# Initialize ip= and user= collections.
#
SecAction phase:1,initcol:ip=%{REQUEST_HEADERS.x-forwarded-for},pass,id:50,nolog
SecAction phase:1,initcol:user=%{REQUEST_HEADERS.x-forwarded-for},pass,id:51,nolog

# Do not block the load balancer nor its probes
SecRule &REQUEST_HEADERS:x-forwarded-for "@eq 0" "phase:1,pass,ctl:ruleEngine=off,id:52,nolog,chain"
SecRule REMOTE_ADDR "^10\.\d+\.\d+\.\d+$" "t:none,nolog"

SecRule REMOTE_ADDR "^192\.168\.\d+\.\d+$" "phase:1,pass,ctl:ruleEngine=off,id:70,nolog"
SecRule REMOTE_ADDR "^(127\.0\.0\.1|::1)$" "phase:1,pass,ctl:ruleEngine=off,id:71,nolog"

# Count all requests, decrement count every N seconds.
# user.count=1/150 for decrementing every 2.5 minutes.
SecAction "phase:1,setvar:ip.req_counter=+1,deprecatevar:user.count=1/150,id:54,nolog"

# Request counter for the user is above our permitted limit, increment the "burst" counter
# and reset the request counter.
SecRule IP:REQ_COUNTER "@ge 360" "phase:1,setvar:user.count=+1,setvar:ip.req_counter=0,id:55,nolog"

# First burst count, block client for 5 minutes.
# ip.blocked=300 (in secs, 5 minutes)
SecRule USER:COUNT "@ge 1" "phase:1,setvar:ip.blocked=1,expirevar:ip.blocked=300,id:56,nolog"

# Second burst by client, block for 10 minutes.
SecRule USER:COUNT "@ge 2" "phase:1,setvar:ip.blocked=1,expirevar:ip.blocked=600,id:57,nolog"

# Third burst by client, block for 20 minutes.
SecRule USER:COUNT "@ge 3" "phase:1,setvar:ip.blocked=1,expirevar:ip.blocked=1200,id:58,nolog"

# If client is blocked, deny (return 403) access anywhere.
SecRule &IP:BLOCKED "@gt 0" "phase:1,deny,id:60,auditlog,msg:'blocked: X-Forwarded-For: %{REQUEST_HEADERS.x-forwarded-for} REMOTE_ADDR: %{REMOTE_ADDR}'"
