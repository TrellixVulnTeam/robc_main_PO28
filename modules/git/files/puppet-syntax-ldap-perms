#!/bin/bash

#set -x

NOREV=0000000000000000000000000000000000000000

#look at user of commit and reject if it's not a valid ldap user 

while read oldrev newrev ref; do

    if [[ $newrev = $NOREV ]]; then
        # ignore branch and tag deletes
        exit 0;
    fi

    # ignore new branch creations
    if [[ $oldrev = $NOREV ]]; then
        exit 0
    else 

        # Check the list of incoming commits
        all_revs=`git rev-list $oldrev..$newrev`
        for rev in $all_revs; do
            commit_name=$(git log -1 --pretty="%an" $rev)

                 if [[ $commit_name != $GL_USER ]]; then
                     echo
                     echo "COMMIT FAILED: Please configure your git name as $GL_USER." 
                     echo "Right now it is configured as $(git log -1 $rev |awk '{print $2,$3}'|sed -n '2p')!"
                     echo 'To change the author: git commit --amend --author="'$GL_USER'"'
                     echo 'To fix permanently going forward: git config user.name "'$GL_USER'"'
                     exit 1 
                 fi
         done
    fi

    # GIT pre-commit hook to check Puppet syntax for .pp files
    TMPFILE=$(mktemp /tmp/tmp.XXXXXXXXXX)

    if [[ $oldrev = $NOREV ]]; then
            # ignore new branches
            exit 0;
    fi

    if [[ $newrev = $NOREV ]]; then
            # ignore branch deletes
            exit 0;
    fi

    changed_syntax_check_files=$(git diff --name-only --diff-filter=ACM $oldrev $newrev | egrep "(\\.pp$|\\.erb$|\\.rb$|\\.json$|^\\.arcconfig$)")
    for file in $changed_syntax_check_files; do
        # Don't check empty files
        if [[ $(git cat-file -s ${newrev}:"${file}") -eq 0 ]]; then
            continue
        fi

        echo "syntax checking ${file}"
        # dumps the new version into TMPFILE for testing
        git cat-file blob ${newrev}:"${file}" > $TMPFILE

        if [[ "${file##*.}" == "pp" ]]; then #puppet syntax check
            puppet parser validate --color=false --confdir=/tmp --vardir=/tmp --ignoreimport $TMPFILE

        elif [[ "${file##*.}" == "erb" ]]; then #ruby template syntax check
            cat $TMPFILE | erb -x -T - | ruby -c

        elif [[ "${file##*.}" == "rb" ]]; then #ruby syntax check
            ruby -c $TMPFILE

        elif [[ "${file##*.}" == "json" || "${file}" == ".arcconfig" ]]; then #json syntax check
            cat $TMPFILE | json_verify

        else
            echo "Wierd... ${file} does not appear to be a puppet, ruby, or ruby template file??? egrep has failed us!"
        fi

        if [ $? -ne 0 ]; then
            echo "Push failed!  Syntax error in ${file}." >&2
            rm $TMPFILE
            exit 1
        fi
    done
done
rm $TMPFILE
