#!/usr/bin/perl -w

use strict;

# Globals
my $PROGNAME = "check_aceftsync";
use Getopt::Long;
use vars qw($opt_V $opt_v $opt_h $opt_c $opt_H $PROGNAME);



my $DEBUG           = 0;
my $REVISION        = "0.1";
my $hostname        = undef;
my $exitok=0;
my $exitwarn=1;
my $exitcrit=2;
my $exitunk=3;


# nagios specific
my $status      = $exitok;
my $problem_on_name = undef;
my $problem_value   = undef;


sub in ($$);
$ENV{'BASH_ENV'}='';
$ENV{'ENV'}='';
$ENV{'PATH'}='/usr/local/bin:/usr/bin:/bin';
$ENV{'LC_ALL'}='C';



Getopt::Long::Configure('bundling');
GetOptions
       ("V"   => \$opt_V, "version"     => \$opt_V,
        "h"   => \$opt_h, "help"        => \$opt_h,
        "v"   => \$opt_v, "verbose"     => \$opt_v,
        "c=s"   => \$opt_c, "context=s"     => \$opt_c,
        "H=s" => \$opt_H, "hostname=s"  => \$opt_H);


# check if everything is ok
check_parameters();

my %expectedstates=();
foreach (@ARGV) {
   /(.*)=(.*)/ and
   $expectedstates{$1}=$2;
}

use Data::Dumper;

my %acestates=();
# Admin: startup-cfg configured enabled
print "Executing 'aceman -c $hostname showftsync'\n" if $DEBUG;
open(ACEMAN,"aceman -c $hostname showftsync 2>&1|") or die;
while (my $line=<ACEMAN>) {
   if ($line=~/^(.*): (.*) (.*) (.*)/) {
      $acestates{$1}{$2}{$3}=$4;
   } else {
     print "aceman error: $line\n";
     exit $exitunk;
   }
}
close(ACEMAN);
if ($? != 0) {
   print "aceman error\n";
   exit $exitunk;
}

my $response_text       = '';
my @contexts=();
if (defined($opt_c)) {
   push(@contexts,$opt_c);
} else {
   @contexts=sort keys %acestates;
}

foreach my $context (@contexts) {
   print "Looking at context $context\n" if $DEBUG;

   foreach my $which (keys %{ $acestates{$context} }) {
      print "  Looking at context $context $which\n" if $DEBUG;
      foreach my $actual (keys %{ $acestates{$context}{$which} }) {

         print "      Looking at context $context $which $actual\n" if $DEBUG;
         if (exists $expectedstates{$actual}) {
            if ($expectedstates{$actual} ne $acestates{$context}{$which}{$actual}) {
                $status=$exitcrit;
                $response_text.="$context $which $actual is ".$acestates{$context}{$which}{$actual}."\n";
            }
         }
      }
   }
}

if ($status) {
   print "$response_text  \n";
   exit $status;
} else {
   print "All ftsync like ".join(" ",@ARGV)."\n";
   exit $exitok;
}



##
###
### Functions
###
##



# That one check parameters
sub check_parameters {
    # Basic checks
    if ($opt_V) {
             print "$PROGNAME $REVISION\n";
             exit 1;
    }

    if ($opt_h) {
             print_help ();
             print "$PROGNAME $REVISION\n";
             exit 1;
    }

    if ($opt_v) {
        $DEBUG = 1;
    }

    if (!defined($opt_H))   {
            print "Hostname requested !\n";
            print_usage();
            exit 1;
    } else {
            $hostname = $opt_H;
    }


} # end check_options


sub print_usage () {
   print "Usage: $0  -H <host> -c <context> states...\n";
}


sub print_help () {
  print "Monitor Fault-Tolerant state of ACE loadbalancers\n";
  print_usage();
  print <<EOT;
-h, --help
       print this help message
-H, --hostname=HOST
       name or IP address of host to check
-c, --contextname
       name of the context
-v  --verbose
       Be verbose
-V, --version
       prints version number
states
       The expected states, e.g. actual=enabled configured=enabled
EOT
}


