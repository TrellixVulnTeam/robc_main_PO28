#!/bin/bash

sqlcopy=/usr/local/bin/sqlcopy

usage() {
    echo "Usage: $0 sourcehost newslave" 1>&2
    echo 
    echo "Various attributes of sourcehost will be used to create newslave."
    echo "This script handles puppet, xcat, creating filesystems, copies"
    echo "the database, and sets up the master->slave relationship."
    echo "It does not handle the ACE config."
    echo
    echo "If sourcehost is a master, then it will be the master of newslave."
    echo "If sourcehost is a slave, then it's master will be used."
    exit 1
}

while [ $# -gt 0 ];do
    case $1 in
        -c) cpus=$2; shift; shift;;
        -m) mem=$2; shift; shift;;
        -d) disk=$2; shift; shift;;
        -o) os=$2; shift; shift;;
        -a) arch=$2; shift; shift;;
        -h|--help) usage;;
        -*) echo "Unknown option: $1"; usage;;
        *) if [ -z "$sourcehost" ];then
        sourcehost=$1
    else
        newslave=$1
    fi
    shift;;
esac
done

if [ -z "$newslave" ];then
    usage
fi

if [ 0 == $(id -u) ];then
    echo "Not as root"
    exit 1
fi

sourcehostip=$(getent hosts $sourcehost | awk '{print $1}')
newslaveip=$(getent hosts $newslave | awk '{print $1}')
if [ -z "$sourcehostip" ];then
    echo "Failed to resolve $sourcehost" 1>&2
    exit 1
fi
if [ -n "$newslaveip" ];then
    echo "$newslave already resolves. " 1>&2
    read -p "<enter> to continue." prompt
fi

incr=$(echo "$newslave" | sed 's/.*\([[:digit:]]\).*/\1/')
case $((incr%2)) in
    0) iX=2;;
    1) iX=1;;
esac



if [ -z "$cpus" ];then
    cpus=$(lsdef -i vmcpus $sourcehost | grep vmcpus= | awk -F= '{print $2}')
fi
if [ -z "$mem" ];then
    mem=$(lsdef -i vmmemory $sourcehost | grep vmmemory= | awk -F= '{print $2}')
    mem=$((mem/1024))
fi
if [ -z "$os" ];then
    os=$(lsdef -i os $sourcehost | grep os= | awk -F= '{print $2}')
fi
if [ -z "$arch" ];then
    arch=$(lsdef -i arch $sourcehost | grep arch= | awk -F= '{print $2}')
fi
busunit=$(rt list -l  -t asset  "Name = '$sourcehost'"  | grep ^CF.{BusinessUnit} | awk '{print $2}')
env=$(echo ${newslave} | cut -d . -f 3)

if [ -z "$busunit" ];then
    echo "Unable to find business unit for $sourcehost" 1>&2
    exit 1
fi

echo "Environment: $env"
echo "Business Unit: $busunit"
echo "Num Cpus: $cpus"
echo "Memory (gigs): $mem"
echo "OS: $os"
echo "Arch: $arch"
echo "Incr: $incr (iX=$iX)"
echo



echo "Retrieving source manifest..."
tmpdir=/tmp/vmclone.$$.$RANDOM
rm -rf $tmpdir
mkdir  $tmpdir
cd $tmpdir || exit 1
git clone git@git.gnmedia.net:/puppet-manifests >/dev/null
#svn co https://svn.gnmedia.net/puppet/manifests/nodes >/dev/null
cd puppet-manifests/nodes || exit 1
git config user.name `whoami`

oldmanifest=$(echo */$sourcehost.pp)
if ! test -f "$oldmanifest" ;then
    oldmanifest=$(echo */*/$sourcehost.pp)
    if ! test -f "$oldmanifest" ;then
        echo "Can not locate source manifest"
        exit 1
    fi
fi
manidir=$(dirname $oldmanifest)
echo $oldmanifest
mycnftemplate=$(grep mysqld::server $oldmanifest | grep install | sed -e 's/.*install\s*{\"//' -e 's/\".*//')
mycnfversion=$(grep mysqld::server $oldmanifest | grep install | sed -e 's/.*::v\(.*\)::install.*/\1/')
echo "My.cnf Template: ${mycnftemplate:=none}"
read -p "<enter> to continue..." prompt


if [ -f $manidir/$newslave.pp ];then
    echo "$newslave.pp already exists"
    read -p "<enter> to continue..." prompt
else
    echo "Creating new manifest..."
    cp $oldmanifest $manidir/$newslave.pp
    match=$(echo $sourcehost | awk -F- '{print $1}')
    replc=$(echo $newslave | awk -F- '{print $1}')
    sed -i -e s/$match/$replc/g $manidir/$newslave.pp
    sed -i -e "/_data\"/s/nfs[0-9]/nfs$iX/g" $manidir/$newslave.pp
    sed -i -e "/_binlog\"/s/nfs[0-9]/nfs$iX/g" $manidir/$newslave.pp
    sed -i -e "/$newslave\"/s/nfs[0-9]/nfs$iX/g" $manidir/$newslave.pp
    case $mycnftemplate in
        none) ;;
        *master) echo "Cloning MySQL from the master"; masterhost=$sourcehost; masterip=$sourcehostip;
        reply="blah"
        while test "$reply" != "master" -a "$reply" != "slave" ;do
            read -p "Is $newslave a master or slave? (default=slave) [slave/master]" reply
            : ${reply:=slave}
        done
        case $reply in
            master) newmycnftemplate=$mycnftemplate;;
            slave) newmycnftemplate=$(echo $mycnftemplate | sed s/-master/-slave/)
            sed -i "/install/s/$mycnftemplate/$newmycnftemplate/" $manidir/$newslave.pp;;
        esac

        $curlargs=""
        if [[ -f ~/.netrc ]]; then
           $curlargs="-n ~/.netrc"
        else
           $curlargs="-u `whoami`"
        fi
        if curl -f $curlargs "https://git.gnmedia.net/?p=puppet-templates.git;a=blob_plain;f=mysqld/$mycnfversion/my.cnf-$newmycnftemplate.erb"; then
            echo "my.cnf template ($newmycnftemplate) exists... good"
        else
            echo "Error: my.cnf template ($newmycnftemplate) does not exist"
            exit 1
        fi
        ;;
        *slave) echo "Retrieving MySQL masterip from $sourcehost..."
        ssh $sourcehost :
        master=$(ssh $sourcehost 'echo show slave status | sudo mysql | tail -1 | cut -f 2')
        masterip=$(getent hosts $master | awk '{print $1}')
        masterhost=$(getent hosts $master | awk '{print $2}')
        echo "Master: $masterhost ($masterip)"
        ;;
        *) echo "Error: Source my.cnf template \"$mycnftemplate\" does not end in \"master\" or \"slave\""; exit 1
        ;;
    esac
    echo '>>>>>>> Begin manifest <<<<<<<<'
    cat $manidir/$newslave.pp
    echo '>>>>>>> End manifest <<<<<<<<'
    read -p "<enter> to continue..." prompt
    git add $manidir/$newslave.pp
    git commit -m "New manifest for $newslave, generated from $oldmanifest" $manidir/$newslave.pp
    git push
fi
set -x
echo "${newslave%%.*} -b $busunit -e $env -c $cpus -m $mem"
env NOAUTOPUPPET=1 newvm ${newslave%%.*} -b $busunit -e $env -c $cpus -m $mem -o $os -a $arch
env SOURCEHOST=$sourcehost MATCHREPLACE=s/$replc/$match/g autovolume $manidir/$newslave.pp
set +x

if [ "$mycnftemplate" = "none" ];then
    echo "Have a nice day."
    exit 0
fi

rm -r $tmpdir

echo "Sleeping until the node is installed... Will run sqlcopy when done!"
sleep 60

while sleep 10;do
    if nodeset $newslave stat | grep -q boot && nodestat $newslave | grep -q sshd ;then
        echo "Node is booted."
        break;
    fi
done

echo "Calling sqlcopy..."
echo "masterhost: $masterhost"
echo "newslave: $newslave"
sudo $sqlcopy --slave $masterhost $newslave

