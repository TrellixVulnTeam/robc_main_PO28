#!/bin/bash
#Modified for GIT


usage() {
   echo "Usage: $0 hostname x.x.x.x (A and PTR records)"
   echo "       $0 hostname hostname2 (CNAME)"
   echo "       --test: will display the git diff and not commit"
   echo "       --commit: will commit the git diff without prompting"
   echo "       --batch dir: operate on existing git checkout without commit"
   echo "       -m msg: set the git log message"
   echo "    Split zones:"
   echo "       $0 hostname [-i|--internal data] [-e|--external data]"
   exit 1
}
   
commit=ask
batch=no
while [ -n "$1" ];do
case "$1" in
   --commit) commit=yes;;
   --test) commit=no;;
   --batch) batch=$2;shift;;
   -m) msg=$2;shift;;
   -e|--external) edata=$2;shift;;
   -i|--internal) idata=$2;shift;;
   -*) echo "unknown option";usage;;
   *) [ -z "$host" ] && host=$1 || data=$1;;
esac;
shift;done


if [ -n "$data" -a -n "$edata" ];then
    usage
elif [ -n "$data" -a -n "$idata" ];then
    usage
elif [ -z "$data" -a -z "$idata" -a -z "$edata" ];then
    usage
fi

if [ "$batch" != no -a ! -d "$batch" ];then
   echo "--batch takes a directory"
   usage
fi
# end of arg processing


# setup working directory
: ${PAGER:=less}
if [ "$batch" == no ];then
   tmpdir=/tmp/dnsnewentry.$$.$RANDOM
   rm -rf $tmpdir
   mkdir  $tmpdir
   cd $tmpdir
#   svn co https://svn.gnmedia.net/sysadmins/trunk/dns>/dev/null || exit 1
   git clone git@bitbucket.org:/evolvemediallc/tp_dns dns>/dev/null || exit 1
   cd dns || exit 1
else
   cd $batch
fi

if [ ! -d zones ];then
    echo "Wrong directory: can't find 'zones'"
   exit 1
fi


addrecord() {
    declare host=$1
    declare data=$2
    declare area=$3
    declare hostre=${host//./\\.}

    declare -a parts
    parts=($(IFS=.; set -- $host; echo $@))
    lastbit=$((${#parts[*]}-1))
    
    zone=""
    for bit in $(seq 0 $lastbit | tac);do
        [ -n "$zone" ] && zone=".$zone"
        zone="${parts[$bit]}$zone"
        if [ -n "$area" ];then
            if [ -f "zones/$area/$zone.hosts" ];then
                hostzonefiles="$area/$zone.hosts"
            fi
        else
            if [ -f "zones/internal/$zone.hosts" -a -f "zones/external/$zone.hosts" ] ;then
                hostzonefiles="internal/$zone.hosts external/$zone.hosts"
            fi
            if [ -f "zones/$zone.hosts" ];then
                hostzonefiles="$zone.hosts"
            fi
        fi
    done
    
    if [ -z "$hostzonefiles" ];then
    echo "$area zone file not found for $host" 1>&2
    return 1
    fi
    
    for hostzonefile in $hostzonefiles;do
    
        if ipcalc -n $data/24 >/dev/null 2>&1 ;then
            ip=$data
            echo "Adding new A and PTR records..."
            revzonefile=${ip%*.*}.rev
            if [ -f "zones/internal/$revzonefile" ];then
                revzonefile=internal/$revzonefile
            elif [ -f "zones/external/$revzonefile" ];then
                revzonefile=external/$revzonefile
            fi
            if [ ! -f "zones/$revzonefile" ];then
                echo "Adding new reverse zone"
                cp revzonetemplate zones/$revzonefile
                git add zones/$revzonefile
            fi
            revzonename=$(IFS=. ; set -- $ip; echo $3.$2.$1.in-addr.arpa)
            echo $revzonename
    
    
    
            newline=$(printf "%-40s IN      A       %s" ${host%\.}. $ip)
            if egrep -q "^$hostre\.[[:space:]]*IN[[:space:]]*A[[:space:]]*.*$" zones/$hostzonefile;then
                sed -i "s/^$hostre\.[[:space:]]*IN[[:space:]]*A[[:space:]]*.*$/$newline/" zones/$hostzonefile
            else
                echo "$newline" >> zones/$hostzonefile
            fi
            echo -n "$hostzonefile: "
            if [ "$batch" == no ];then
                dnsupdateserial zones/$hostzonefile
            else
                echo "modified."
            fi
    
    
            last=${ip#*.*.*.*}
            newline="$last\tIN\tPTR\t${host%\.}."
            sed -i "s/^;$last\([[:space:]]\)/$last\1/" zones/$revzonefile
            if egrep -q "^$last[[:space:]]" zones/$revzonefile ;then
                sed -i "s/^$last[[:space:]].*/$newline/" zones/$revzonefile
            else
                echo -e "$newline" >> zones/$revzonefile
            fi
            echo -n "$revzonefile: "
            if [ "$batch" == no ];then
                dnsupdateserial zones/$revzonefile
            else
                echo "modified."
            fi
    
    
        else
            # new CNAME
            newline=$(printf "%-40s IN      CNAME       %s" ${host%\.}. ${data%\.}.)
            if grep -q ^$host zones/$hostzonefile;then
                sed -i "s/^$host.*/$newline/" zones/$hostzonefile
            else
                echo "$newline" >> zones/$hostzonefile
            fi
            echo -n "$hostzonefile: "
            if [ "$batch" == no ];then
                dnsupdateserial zones/$hostzonefile
            else
                echo "modified."
            fi
        fi
    done
    
    return 0
} # end addrecord function




if [ -n "$edata" ];then
    addrecord $host $edata external
fi
if [ -n "$idata" ];then
    addrecord $host $idata internal
fi
if [ -n "$data" ];then
    addrecord $host $data || ( addrecord $host $data external; addrecord $host $data internal )
fi



if [ "$batch" != no ];then
   exit 0
fi

continue() {
   read -p "${1:-Continue?} [Y/n] " reply
   if test -z "$reply" -o "${reply:0:1}" = Y -o "${reply:0:1}" = y ; then
      return 0
   else
      return 1
   fi
}

if [ "$commit" = "ask" ];then
   read -p "Please confirm DNS changes (enter to view in $PAGER)... "
   git diff | $PAGER
   if continue "Commit changes?" ;then
      [ -z "$msg" ] && read -p "GIT log message? " msg
      git add *
      git commit -m "${msg:=Adding $host/$ip}"
      git push
   else
      echo "Dropping to a shell..."
      echo "You can edit, git commit, and exit when you are done..."
      (export PS1="dnsnewentry> "
      pwd
      $SHELL)
   fi
elif [ "$commit" = "yes" ];then
   git add .
   git commit -m "${msg:=Adding $host/$ip}"
   git push
else
   git diff
   echo "Changes were not committed."
fi
cd 
rm -rf $tmpdir
