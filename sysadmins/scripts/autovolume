#!/bin/bash

# gstaples @ Gorilla Nation

# Given a manifest, autovolume will attempt to create and share the volumes

filers="nfs1-1g.lax1.gnmedia.net nfs1-1g.lax2.gnmedia.net nfs1.lax3.gnmedia.net"
manifest=$1
if [ -z "$manifest" ];then
   echo "Usage: $0 <manifest>" 1>&2
   exit 1
fi
if [ ! -f "$manifest" ];then
   echo "$manifest: No such file or directory" 1>&2
   exit 1
fi

fqdn=$(grep ^node $manifest | head -1 | awk '$1 == "node" {print $2}' | xargs echo)
nfs_ip=$(grep nfs_ip $manifest | grep = | head -1 | sed 's/.*\"\(.*\)\".*/\1/'|grep -v \\$)
ip=$(getent hosts $fqdn | awk '{print $1}')

if [ -z "$ip" ];then
   echo "* $fqdn does not resolve, will not be able to export volumes"
   read -p "Continue [N/y]? " reply
   case $reply in
     Y|y*) :;;
     *) exit;;
   esac
   echo
fi

mounts=$(grep -v ^# $manifest | grep device | sed 's/.*\"\(.*\)\".*/\1/' | grep : | xargs echo)
echo "Your manifest has the following mounts: "
if [ -n "$nfs_ip" ];then
  echo "\$nfs_ip: ${nfs_ip:="not set"}"
fi
echo $mounts | xargs -n 1 echo "    "
if [ -z "$SOURCEHOST" ];then
   read -p "Enter to continue " reply
fi

for mount in $mounts;do
   server=$(IFS=:; set -- $mount; echo $1)
   path=$(IFS=:; set -- $mount; echo $2)
   case $server in
      \$nfs_ip) server=$nfs_ip;;
   esac
   case $path in
     /vol/*) volume=$(echo $path | cut -d/ -f 3)
             qtree=$(echo $path | cut -d/ -f 4)
             subdirs=$(echo $path | cut -d/ -f 5-)
             ;;
     /home) volume=home;;
   esac

   if ! ping -c 1 $server  >/dev/null 2>&1;then
      server=""
      echo " ** Unable to find server from the manifest (autovolume lacks a good parser), will search filers..."
      for filer in $filers;do
         if [ $(rnetapp $filer volume list $path | wc -l) -eq 2 ];then
             echo " ** Found $path on $filer"
             server=$filer
         fi
      done
   fi
   if [ -z "$server" ];then
      echo " ** autovolume could not divine the correct filer for $path. Have a Nice Day."
      continue;
   fi


   case $volume in
       *_tp_*) lif=tp;;
       *_ci_*) lif=ci;;
       *_ao_*) lif=ao;;
       *_ap_*) lif=ap;;
       *_si_*) lif=si;;
       *_sbv_*) lif=sbv;;
       *_og_*) lif=og;;
   esac
   case $volume in
       *_prd_*) lif=$lif.prd;;
       *_stg_*) lif=$lif.stg;;
       *_dev_*) lif=$lif.dev;;
   esac
   lif=$lif.lax.gnmedia.net

   case $volume in
       *_sql_*)
         case $server in
           nfsA-netapp1.gnmedia.net) server=nfsA-netapp1-int.$lif;;
           nfsB-netapp1.gnmedia.net) server=nfsB-netapp1-int.$lif;;
         esac;;
       *)
         case $server in
           nfsA-netapp1.gnmedia.net) server=nfsA-netapp1.$lif;;
           nfsB-netapp1.gnmedia.net) server=nfsB-netapp1.$lif;;
         esac;;
     esac

   foundaggr=0
   case $server in
      *lax1*) aggr=aggr_app_lax1;;
      nfsA-netapp1*) aggr=`lif2aggr $server`;foundaggr=1;;
      nfs1.netapp3*) aggr=data1;;
      *lax2*) aggr=aggr_app_lax2;;
      nfsB-netapp1*) aggr=`lif2aggr $server`;foundaggr=1;;
      nfs2.netapp3*) aggr=data1;;
      *lax3*) aggr=lax3;;
      *) aggr=unknown;;
   esac

   case $volume in
     *_prd_*_ugc) snapvault="yes";;
     *_prd_*_shared) snapvault="yes";;
     *) snapvault="no";;
   esac

   echo
   echo "* Checking $volume volume and exports on $server..."
   if ! rnetapp $server volume list $volume ;then
      echo "* $volume does not exist."

      if [ -n "$SOURCEHOST" ];then
         sourcevolume=$(echo $volume | sed $MATCHREPLACE)
         echo -n "** Looking for $sourcevolume... "
         if ! rnetapp $server volume list $sourcevolume >/dev/null ;then
            echo "nope."
         else
            echo "Yes!"
            rnetapp $server volume create $volume like $sourcevolume
            rnetapp $server snapshot sched $volume 0 0 0
            echo "* Exporting $volume to $ip ...";
            $test rnetapp $server exports add $volume $ip
            # Make a qtree
            if [ -n "$qtree" ];then
                # FIXME: error checking
                $test rnetapp $server qtree create $volume $qtree 2>&1 | grep -v "already exists"
            fi
            if [ -n "$subdirs" ];then
                subpath=""
                for dir in $(echo $subdirs | tr '/' ' ');do
                    subpath="$subpath/$dir"
                    $test rnetapp $server volume mkdir $volume $qtree$subpath 2>&1 | grep -v "File exists"
                done
            fi
         fi
         # FIXME: need to do further steps below
         continue;
      fi
     
      if [ -z "$aggr" ];then
          echo "* Unable to determine aggr from $server:$volume\n";
          echo
          continue;
      fi
      read -p "Create $volume on $server($aggr)? [Y/n] " reply
      case $reply in
        y|Y|"") : ;;
        *) continue;;
      esac


      size=10G
      read -p "Size? [$size] " reply
      if [ -n "$reply" ];then
         size=$reply
      fi
      
      # Create the volume
      $test rnetapp $server volume create $volume $size $aggr
      $test rnetapp $server snapshot sched $volume 0 0 0
      # FIXME: error checking
      createdvolumes="$createdvolumes $volume"

   fi

   if [ "$snapvault" = "yes" ];then
      snapvault-setup $server:$volume
   fi

   # Maybe Enable autosize
   case $volume in
      *_prd_*_binlog) $test rnetapp $server vol autosize $volume on;;
      *_prd_*_data) $test rnetapp $server vol autosize $volume on;;
   esac

   # Export the volume
   if [ -z "$ip" ];then
      echo "* $fqdn does not resolve, cannot export $volume now."
   else
      echo "* Exporting $volume to $ip ...";
      $test rnetapp $server exports add $volume $ip
   fi

   # Make a qtree
   if [ -n "$qtree" ];then
      # FIXME: error checking
      $test rnetapp $server qtree create $volume $qtree 2>&1 | grep -v "already exists"
   fi
   if [ -n "$subdirs" ];then
       subpath=""
        for dir in $(echo $subdirs | tr '/' ' ');do
          subpath="$subpath/$dir"
          $test rnetapp $server volume mkdir $volume $qtree$subpath 2>&1 | grep -v "File exists"
       done
   fi

done
echo "* Created volumes: $createdvolumes"
echo "* Volume management complete."

