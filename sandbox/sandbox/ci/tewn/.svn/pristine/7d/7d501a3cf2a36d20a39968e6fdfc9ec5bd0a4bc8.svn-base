<?php

namespace CI\Test\Filter\String;
use CI\Filter\String\Md5;

/**
 * @group filter
 * @group filter_string
 */
class FilterStringMd5Test extends \PHPUnit_Framework_TestCase
{
    private $oHash;

    public function setUp()
    {
        $this->oHash = new Md5();
    }

    /**
     * Tests a basic functionality of oHashing a string
     *
     * @dataProvider getString
     */
    public function testBasic($sString)
    {
        $this->assertEquals(md5($sString), $this->oHash->filter($sString), 'Strings hashed are not equal');

        // Is only to be sure that raw output is false
        $this->assertFalse($this->oHash->isRawOutput(), 'Raw Output is not false');
    }

    /**
     * Tests if a string is converted to a raw binary
     *
     * @dataProvider getString
     */
    public function testRawData($sString)
    {
        $this->oHash->setRawOutput(true);

        $this->assertEquals(md5($sString, true), $this->oHash->filter($sString), 'Strings hashed are not equal');
        $this->assertTrue($this->oHash->isRawOutput(), 'Raw Output is not true');
    }

    /**
     * Tests if process function throws the \CI\String\Exception because
     * the $sValue is not a string
     *
     * @expectedException \CI\String\Exception
     * @expectedExceptionCode \CI\String\Exception::NOT_VALID
     * @dataProvider getInvalidType
     */
    public function testInvalidTypeException($sValue)
    {
        $this->oHash->filter($sValue);
    }

    public function getInvalidType( )
    {
        return array(
            array(99999),
            array(new \stdClass()),
            array(array()),
            array(true),
        );
    }

    public function getString()
    {
        return array(
            array('Lorem ipsum dolor sit amet, consectetuer adipiscing')
        );
    }

    public function tearDown()
    {
        unset($this->oHash);
    }
}