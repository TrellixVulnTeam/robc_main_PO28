<?php
namespace Test\IO\File;
use CI\IO\File;
use CI\IO\File\System;

/**
 * @group io
 * @group io_file
 */
class ImageTest extends \PHPUnit_Framework_TestCase
{
    protected $oFileSystem;

    public function setUp()
    {
        $this->oFileSystem = new System();
    }

    public function testShouldReturnImageFile()
    {
        $oFile = $this->oFileSystem->read(LIBRARY_DIR . '../tests/resources/image.png');
        $this->assertInstanceOf('\CI\IO\File\Image', new \CI\IO\File\Image($oFile), 'The file should be a valid image');
    }

    public function testShouldReturnExtension()
    {
        $sExtension = 'png';

        $oFile = $this->oFileSystem->read(LIBRARY_DIR . '../tests/resources/image.png');
        $oImage = new \CI\IO\File\Image($oFile);

        $this->assertEquals($sExtension, $oImage->getExtension());
    }

    public function testShouldGetExtensionFromMime()
    {
        $sExtension = 'png';

        $oFile = $this->oFileSystem->read(LIBRARY_DIR . '../tests/resources/image.png');
        $oImage = new ImageMockExtension($oFile);

        $this->assertEquals($sExtension, $oImage->getExtension());
    }

    public function testGetSizeShouldReturnArray()
    {
        $oFile = $this->oFileSystem->read(LIBRARY_DIR . '../tests/resources/image.png');
        $oImage = new \CI\IO\File\Image($oFile);

        $this->assertEquals(
            array(
                'width'  => 239,
                'height' => 233
            ),
            $oImage->getSize(),
            'The size is not correct'
        );
    }

    /**
     * @expectedException \CI\IO\File\Image\Exception
     * @expectedExceptionCode \CI\IO\File\Image\Exception::NOT_VALID_IMAGE
     */
    public function testValidateMimeTypeShouldThrowException()
    {
        $oImage = new ImageMock();
        $oImage->setMymeType('mime/wrong');
        $oImage->validateMimeType();
    }

    /**
     * @expectedException \CI\IO\File\Image\Exception
     * @expectedExceptionCode \CI\IO\File\Image\Exception::SIZE_FAILURE
     */
    public function testValidateGetSizesShouldThrowException()
    {
        $oImage = new ImageMock();
        $oImage->validateGetSizes(array());
    }

    /**
     * @expectedException \CI\IO\File\Image\Exception
     * @expectedExceptionCode \CI\IO\File\Image\Exception::UNABLE_TO_GET_MIMETYPE
     */
    public function testValidateGetMimeTypeShouldThrowException()
    {
        $oImage = new ImageMock();
        $oImage->validateGetMimeType(array());
    }

    /**
     * @expectedException \CI\IO\File\Image\Exception
     * @expectedExceptionCode \CI\IO\File\Image\Exception::INVALID_TYPE
     */
    public function testValidateGetMimeTypeShouldThrowInvalidTypeException()
    {
        $oImage = new ImageMock();
        $oImage->validateGetMimeType('something');
    }
}

class ImageMock extends \CI\IO\File\Image
{
    public function __construct() {}

    public function setMymeType($sMimeType)
    {
        $this->sMimeType = $sMimeType;
    }

    public function validateMimeType()
    {
        parent::validateMimeType();
    }

    public function validateGetSizes($aInfo)
    {
        parent::validateGetSizes($aInfo);
    }

    public function validateGetMimeType($aInfo)
    {
        parent::validateGetMimeType($aInfo);
    }
}

class ImageMockExtension extends \CI\IO\File\Image
{
    protected function isVaildExtension($sExtension)
    {
        return false;
    }
}