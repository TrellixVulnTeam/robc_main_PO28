<?php
include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

class AccountsController extends AppController {

	var $name = 'Accounts';
	var $uses = array('Account', 'User', 'Website', 'MetricLog');
	var $helpers = array("Ajax", "Form", "Html", "Convert");
	var $components = array('RequestHandler', 'Mail', 'Paypal', 'Cookie', 'BitSettings', 'WebsiteSettings');

	function beforeFilter() {
		$this->layout = DOMAIN.'/default';
		$this->set("WebsiteSettings", $this->WebsiteSettings);
		$isIpad = false;
		if (isset($_SERVER['HTTP_USER_AGENT'])) {
			$isIpad = (bool) strpos($_SERVER['HTTP_USER_AGENT'],'iPad');
		}
		$this->set('isIpad', $isIpad);
	}

	function index() {
	}

	function credit($id) {
		if (!$this->is_admin()) {
			$this->saveUrl($_SERVER['REQUEST_URI']);
			$this->redirect("/login");
			exit();
		}

		if ($this->data) {
			$this->data['Account']['id'] = $id;
			$this->data['Account']['credits'] = $this->data['Account']['credits'] * 10;

			$account = $this->Account->find("first", array(
				"fields" => array('id', 'domain_bitfield', 'credits', 'website_id'),
				"conditions" => array("id" => $id)
			));
			if ($account) {
				// We need to set the credits ammount so calculate if decrement or increment the credits at
				// this moment (setting credits - actual credits)
				$credits = $this->data['Account']['credits'] - $account['Account']['credits'];
				ClassRegistry::init('StatsAccount')->increment_stats(
					date('Y-m-d H:00:00'), $account['Account'], array('credits' => $credits)
				);
			}

			$this->MetricLog->log(LOG_TYPE_ACCOUNT_MODIFY_CREDITS, 0, 0, json_encode($this->data));
			$this->Account->save($this->data);
			$this->redirect("/admin/websites/report");
			exit();
		}

		$account = $this->Account->findById($id);

		$this->set("account", $account);
		$this->data = $account;

	}

	function add($user_id, $website, $notes = '') {
		// Save off account into
		$this->Session->activate();
		$this->data['Account']['refer_id'] = $this->Cookie->read("aff_refer_id");
		if ($this->data['Account']['refer_id']) {
			$this->data['Account']['refer_transfer_rate'] = DEFAULT_REFER_TRANSFER_RATE;
		}
		$this->data['Account']['user_id'] = $user_id;
		$this->data['Account']['status'] = ACCOUNT_STATUS_NEW;
		$this->data['Account']['credits'] = ACCOUNT_CREDITS_STARTING*10;
		$this->data['Account']['incoming'] = 0;
		$this->data['Account']['outgoing'] = 0;
		$this->data['Account']['transfer_account_id'] = 0;
		$this->data['Account']['rate'] = DEFAULT_RETURN_RATE;
		$this->data['Account']['visible'] = true;
		$this->data['Account']['domain_bitfield'] = DOMAIN_BIT;
		$this->data['Account']['widget_rebalance'] = date("Y-m-d G:i:s");
		$rc = $this->Account->save($this->data);
		if (!$rc) {
			return;
		}

		$account_id = $this->Account->getLastInsertId();
		$this->data['Account']['id'] = $account_id;

		// Save off website info
		$this->data['Website']['user_id'] = $user_id;
		$this->data['Website']['account_id'] = $account_id;
		$this->data['Website']['status'] = WEBSITE_STATUS_NEW;
		$this->data['Website']['url'] = preg_replace('+https?://+', '', $website);
		$this->data['Website']['subdomain'] = 0;
		$this->data['Website']['title_regex'] = DEFAULT_TITLE_REGEX;
		$this->data['Website']['url_regex'] = DEFAULT_URL_REGEX;
		$this->data['Website']['visible'] = true;
		$this->data['Website']['notes'] = $notes;

		// Figure out primary domain
		if (!isset($this->data['Website']['domain_primary'])) {
			$category = isset($this->data['Website']['category']) ? $this->data['Website']['category'] : 0;
			$this->data['Website']['domain_primary'] = $this->domain_primary_get($category, $user_id);
		}

		// Figure out category
		if (!isset($this->data['Website']['category'])) {
			$this->data['Website']['category'] = $this->category_get($this->data['Website']['domain_primary']);
		}

		// Have widget only show default category to start
		$this->data['Website']['allowed_categories_bitfield'] = 1 << $this->data['Website']['category'];

		$oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
		$this->data['Website']['domain_bitfield'] = $oHub->idToBit($this->data['Website']['domain_primary']);
		$rc = $this->Website->save($this->data);
		if (!$rc) {
			$this->Account->delete($account_id);
			return;
		}

		//$this->Mail->website($this->data['Website']['url']);

		$website_id = $this->Website->getLastInsertId();

		$this->MetricLog->log(LOG_TYPE_WEBSITE_NEW, $website_id);

		// Update account w/ the website info
		$this->Account->id = $account_id;
		$this->Account->saveField("website_id", $website_id);

		return $website_id;
	}

	function category_get($domain_primary) {
		switch ($domain_primary) {
		default:
		case DOMAIN_ID_CRAVE_ONLINE:
			$category = CATEGORY_MEDIA;
			break;
		case DOMAIN_ID_GAME_REVOLUTION:
			$category = CATEGORY_GAMING;
			break;
		case DOMAIN_ID_THEFASHIONSPOT:
			$category = CATEGORY_BEAUTY;
			break;
        case DOMAIN_ID_MOMTASTIC:
			$category = CATEGORY_PARENTING;
			break;
        case DOMAIN_ID_TOTALLYHER:
            $category = CATEGORY_CELEBRITIES;
            break;
        case DOMAIN_ID_NEWS:
            $category = CATEGORY_NEWS;
            break;
		}

		return $category;
	}

	function domain_primary_get($category, $user_id) {
		switch ($category) {
			// Crave
		case CATEGORY_OFFBEAT:
		case CATEGORY_SPORTS:
		case CATEGORY_LIFESTYLE:
		case CATEGORY_MEDIA:
		case CATEGORY_TECHNOLOGY:
		case CATEGORY_MUSIC:
		case CATEGORY_MENS_ENTERTAINMENT:
		case CATEGORY_ANIME:
		case CATEGORY_AUTOMOTIVE:
		case CATEGORY_URBAN:
        case CATEGORY_OUTDOORS:
			$domain_primary = DOMAIN_ID_CRAVE_ONLINE;
			break;
			// Game Revolution
		case CATEGORY_CASUAL_GAMES:
		case CATEGORY_GAMING:
			$domain_primary = DOMAIN_ID_GAME_REVOLUTION;
			break;
			// Totally Her
		case CATEGORY_CELEBRITIES:
        case CATEGORY_TRAVEL:
			$domain_primary = DOMAIN_ID_TOTALLYHER;
			break;
			// The Fashion Spot
		case CATEGORY_BEAUTY:
			$domain_primary = DOMAIN_ID_THEFASHIONSPOT;
			break;
			// Momtastic
		case CATEGORY_PETS:
		case CATEGORY_FOOD:
		case CATEGORY_PARENTING:
		case CATEGORY_DEALS:
		case CATEGORY_HEALTH:
		case CATEGORY_DIY:
		case CATEGORY_HOME:
			$domain_primary = DOMAIN_ID_MOMTASTIC;
			break;
        case CATEGORY_NEWS:
            $domain_primary = DOMAIN_ID_NEWS;
            break;
		case CATEGORY_ALL:
		default:
			// Try figuring out what new sites should be classified as
			$existing = $this->Website->findByUserId($user_id);
			if ($existing) {
				$domain_primary = $existing['Website']['domain_primary'];
			} else {
				$domain_primary = DOMAIN_ID_CRAVE_ONLINE;
			}
		}

		return $domain_primary;
	}

	/* account signup contact form AZ320 */
	function create() {
		if ($this->data) {

			if( $this->data["Accounts"]["websitename"]!="" &&
				$this->data["Accounts"]["websiteurl"]!="" &&
				$this->data["Accounts"]["monthlyviews"]!="" &&
				$this->data["Accounts"]["name"]!="" &&
				$this->data["Accounts"]["email"]!="" &&
				$this->data["Accounts"]["phone"]!="" &&
				$this->data["Accounts"]["agree"]!="0" ) {

				$success = "true";

				$notes = array();
				$notes[] = 'Website Name: '.$this->data["Accounts"]["websitename"];
				$notes[] = 'Website Monthly Views: '.$this->data["Accounts"]["monthlyviews"];
				$notes[] = 'Website US Traffic: '.$this->data["Accounts"]["americantraffic"][0];
				$notes[] = 'Contact Name: '.$this->data["Accounts"]["name"];
				$notes[] = 'Contact Email: '.$this->data["Accounts"]["email"];
				$notes[] = 'Contact Phone: '.$this->data["Accounts"]["phone"];
				// Add website and account
				$website_id = $this->add(0/*No user*/, $this->data["Accounts"]["websiteurl"], implode(', ', $notes));

				$mail = array();
				$mail['from'] = 'admin@crowdignite.com';
				$mail['to'] = 'contact@crowdignite.com';
				$mail['subject'] = 'Crowd Ignite - New Sign Up Request';
				$mail['body'] = '<b>Sign Up form sent from http://crowdignite.com/account</b><br/><br/>';
				$mail['body'].= 'Website Name: '.$this->data["Accounts"]["websitename"].'<br/>';
				$mail['body'].= 'Website URL: '.$this->data["Accounts"]["websiteurl"].'<br/>';
				$mail['body'].= 'Website Monthly Views: '.$this->data["Accounts"]["monthlyviews"].'<br/>';
				$mail['body'].= 'Website US Traffic: '.$this->data["Accounts"]["americantraffic"][0].'<br/><br/>';
				$mail['body'].= 'Contact Name: '.$this->data["Accounts"]["name"].'<br/>';
				$mail['body'].= 'Contact Email: '.$this->data["Accounts"]["email"].'<br/>';
				$mail['body'].= 'Contact Phone: '.$this->data["Accounts"]["phone"].'<br/><br/>';
				$mail['body'].= '<a href="http://management.crowdignite.com/websites/moderate/'. $website_id .'">Moderate Website</a>';

				$this->Mail->send_mail($mail['to'], $mail['from'], $mail['subject'], $mail['body']);

				if (!isset($this->data["Accounts"]["send_email"]) or (isset($this->data["Accounts"]["send_email"]) and !$this->data["Accounts"]["send_email"])){
					$welcome_email = array();
					$welcome_email['to'] = $this->data["Accounts"]["email"];
					$welcome_email['from'] = EMAIL_TECH;
					$welcome_email['subject'] = "Thank you for your interest in Crowd Ignite";

					/* fetching email from a view */
					$view = new View($this, false);
					$view->layout = "none";
					$welcome_email['body'] = $view->render('welcome');
					$this->Mail->send_mail($welcome_email['to'], $welcome_email['from'], $welcome_email['subject'], $welcome_email['body']);
				}

			} else {
				$success = "false";
			}
			$this->set("success", $success);
		}

		if ($this->is_admin()) {
			$isAdmin = true;
		} else {
			$isAdmin = false;
		}
		$this->set("isAdmin", $isAdmin);
	}

	public function welcome() {
		$this->layout = "none";
	}

	/* account creation form */
	function create_account($refer_id = 0) {
		if ($this->RequestHandler->isAjax()) {
			$this->RequestHandler->renderAs($this, 'ajax');
		}

		if ($refer_id) {
			$this->Session->activate();
			$this->Cookie->write('aff_refer_id', $refer_id, false, '30 days');
		}

		/* Get yesterday's return rate */
		//$rate = $this->RequestAction("/history_credits/return_rate_day");

		/* Setup View */
		$this->set("percentage", DEFAULT_RETURN_RATE * 100);
		//$this->set("yesterdays_return_rate", $rate);
		$this->set("yesterdays_return_rate", 230);

		$this->layout = DOMAIN."/fullscreen";


		if ($this->data) {
			$this->Session->activate();

			$user = $this->Session->read('User');

			if (!$user || isset($this->data['User']['username'])) {
				// Save off user info
				$this->data['User']['premium'] = 0;
				$this->data['User']['lastlogin'] = date('Y-m-d H:i:s');
				$this->data['User']['visible'] = true;
				// Set terms accept
				if ($this->data['User']['terms']) {
					$this->data['User']['terms_accept'] = date('Y-m-d G:i:s');
				}
				$rc = $this->User->save($this->data);
				if (!$rc) {
					return;
				}

				$user_id = $this->User->getLastInsertId();
				$this->data['User']['id'] = $user_id;
				$rc['User']['id'] = $user_id;

				// Login
				$this->Session->write('User', $rc['User']);

			} else {
				$user_id = $user['id'];
			}

			$rc = $this->add($user_id, $this->data['Website']['url']);
			if ($rc) {
				$this->redirect("/widgets/create");
				exit();
			}
		}
	}

	function clear_refer($id) {
		if ($this->RequestHandler->isAjax()) {
			$this->RequestHandler->renderAs($this, 'ajax');
		}

		if (!$this->is_admin()) {
			$this->saveUrl($_SERVER['REQUEST_URI']);
			$this->redirect("/login");
			exit();
		}

		$this->Account->id = $id;
		$this->Account->saveField("refer_id", 0);

		$account = $this->Account->read("website_id");

		// Return
		$this->layout = "none";
	}

	function paypal() {
		// Get details
		$details = $this->Paypal->get_payment_details($_GET['tx']);

		if (!isset($details['FAIL'])) {

			$account_id = $details['custom']; // This is the prayer ID
			$txn_id = $details['txn_id'];

			// Get credits
			$tmp_credits = explode("+", $details['option_selection1']);
			$credits = $tmp_credits[0];

			// Let us know that the purchase has been made
			$this->Mail->purchase($details);

			if ($details['payment_status'] == 'Completed') {
				$this->Account->credits_add($account_id, $credits);

				$success = 1;
			} else {
				$success = 0;
			}
		} else {
			$success = 0;
		}

		$this->set("success", $success);
	}
}
?>
