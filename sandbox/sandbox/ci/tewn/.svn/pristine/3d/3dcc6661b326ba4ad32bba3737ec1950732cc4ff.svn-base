<?php

namespace CI;

class Hub
{
    const DOMAIN_ID_ALL = -1;

    const DOMAIN_ID_CROWD_IGNITE    = 0;
    const DOMAIN_ID_GAME_REVOLUTION = 2;
    const DOMAIN_ID_CRAVE_ONLINE    = 3;
    const DOMAIN_ID_MOMTASTIC       = 5;
    const DOMAIN_ID_THEFASHIONSPOT  = 6;
    const DOMAIN_ID_TOTALLYHER      = 11;
    const DOMAIN_ID_NEWS            = 12;
    const DOMAIN_ID_ES              = 13;

    const HUB_INACTIVE = 0;
    const HUB_ACTIVE   = 1;

    protected $oDataSource   = null;

    public function __construct(\CI\Hub\DataSource $oDataSource)
    {
        $this->oDataSource = $oDataSource;
    }

    public function getById($nId)
    {
        return $this->oDataSource->getHubById($nId);
    }

    public function getAllBits($bitfield = self::DOMAIN_ID_ALL)
    {
        $domains = array();

        foreach ($this->oDataSource as $aHub) {
            $bit = 1 << $aHub['id'];
            if ($bit & $bitfield) {
                array_push($domains, $bit);
            }
        }

        return $domains;
    }

    /**
     * Just the domains which are currently active that we haven't taken down
     * @return array Bits that are active
     */
    public function getAllActiveBits()
    {
        $bits = array();

        foreach ($this->oDataSource as $aHub) {
            if ($aHub['status'] === self::HUB_ACTIVE) {
                $bit = 1 << $aHub['id'];
                array_push($bits, $bit);
            }
        }

        return $bits;
    }

    public function getAllActiveIds()
    {
        return array_keys($this->getAllActiveHubsName());
    }

    public function name($id)
    {
        $id = (int) $id;
        $aHub = $this->oDataSource->getHubById($id);
        return $aHub !== null ? $aHub['short_name'] : '';
    }

    public function fullName($id)
    {
        $id = (int) $id;
        $aHub = $this->oDataSource->getHubById($id);
        return $aHub !== null ? $aHub['name'] : '';
    }

    public function getAllActiveHubsShortName()
    {
        $hubs = array();

        foreach ($this->oDataSource as $aHub) {
            if ($aHub['status'] === self::HUB_ACTIVE) {
                $hubs[$aHub['id']] = $aHub['short_name'];
            }
        }

        return $hubs;
    }

    public function getAllActiveHubsName()
    {
        $hubs = array();

        foreach ($this->oDataSource as $aHub) {
            if ($aHub['status'] === self::HUB_ACTIVE) {
                $hubs[$aHub['id']] = $aHub['name'];
            }
        }

        return $hubs;
    }

    public function getAllIds()
    {
        $aDomains = array();

        foreach ($this->oDataSource as $aHub) {
            $aDomains[] = $aHub['id'];
        }

        return $aDomains;
    }

    public function getBitsDomainArray($domain_array)
    {
        $out_bits = 0;

        foreach ($this->oDataSource as $aHub) {
            if (isset($domain_array['domain_' . $aHub['short_name']])) {
                $out_bits |= $domain_array['domain_' . $aHub['short_name']];
            }
        }

        return $out_bits;
    }

    public function getIdsDomainArray($domain_array)
    {
        $out_domains = array();

        foreach ($this->oDataSource as $aHub) {
            $sDomain = 'domain_' . $aHub['short_name'];
            if (isset($domain_array[$sDomain]) && $domain_array[$sDomain] != 0) {
                $out_domains[] = $aHub['id'];
            }
        }

        return $out_domains;
    }

    public function bitsToIdArray($bitfield)
    {
        $ids = array();

        foreach ($this->oDataSource as $aHub) {
            $bit = 1 << $aHub['id'];
            if ($bit & $bitfield) {
                $ids[] = $aHub['id'];
            }
        }

        return $ids;
    }

    public function idArrayToBits($domain_ids)
    {
        $out_bits = 0;

        if (is_array($domain_ids) === false) {
            $domain_ids = array();
        }

        foreach ($domain_ids as $id) {
            $out_bits |= $this->idToBit($id);
        }

        return $out_bits;
    }

    public function idArrayToBitsArray($domain_ids)
    {
        $out_bits = array();

        if (is_array($domain_ids) === false) {
            $domain_ids = array();
        }

        foreach ($domain_ids as $id) {
            $out_bits[] = $this->idToBit($id);
        }

        return $out_bits;
    }

    public function bitsToBitsArray($bitfield)
    {
        $out_bits = array();
        $domain_ids = $this->bitsToIdArray($bitfield);

        foreach ($domain_ids as $id) {
            $out_bits[] = $this->idToBit($id);
        }

        return $out_bits;
    }

    public function idToBit($domain_id)
    {
        if ($domain_id == self::DOMAIN_ID_ALL) {
            return -1;
        }

        return (1 << $domain_id);
    }

    public function bitToId($domain_bit)
    {
        if (!$domain_bit) {
            throw new \InvalidArgumentException('Domain bit can not be false');
        }

        $count = 0;

        while (1) {
            if ($domain_bit & 1) {
                return $count;
            }
            $count++;
            $domain_bit = $domain_bit >> 1;
        }
    }

    public function idToLandingpage($id)
    {
        $aHub = $this->oDataSource->getHubById($id);
        return $aHub !== null ? $aHub['landing_page'] : '';
    }

    public function getFriendlyUrlName($sHubName)
    {
        return str_replace(array(' ', 'Ã±'), array('-', 'n'), strtolower($sHubName));
    }
}