<?php
include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");
include_once (ROOT . DS . APP_DIR . DS . "controllers/history_controller.php");

class HistoryWidgetsController extends HistoryController {

    var $name = 'HistoryWidgets';
    var $uses = array("Widget", "Website", "Account", "StatsWidget");
    var $components = array('RequestHandler', "History", "Date", "Timer");

    var $cache_on = 1;
    var $debug = 0;

    protected $ChartWidgets = null;
    protected $ChartCache = null;

    private function _initChartWidgets()
    {
        if (is_null($this->ChartWidgets)) {
            App::import('Helper', 'Convert');
            $this->ChartWidgets = new CI\Chart\Widget();
            $this->ChartWidgets->addModel('website', $this->Website);
            $this->ChartWidgets->addModel('widget', $this->Widget);
            $this->ChartWidgets->addModel('stats', $this->StatsWidget);
            $this->ChartWidgets->addComponent('convert', new ConvertHelper());
        }
    }

    private function _initChartCache()
    {
        if (is_null($this->ChartCache)) {
            $this->ChartCache = new CI\Chart\Cache\Widget($this->Widget);
        }
    }

    function update() {
        $this->autoRender = false;
        echo "Remove me Fletcherito, please... im the cron /history_widgets/update and im not used anymore...";
    }

    /* Chart abstract functions */
    function chart_request() {
        $this->_initChartWidgets();
        return $this->ChartWidgets->getRequest();
    }

    function chart_websites($request) {
        $this->_initChartWidgets();
        return $this->ChartWidgets->getWebsites($request);
    }

    function chart_get_cache_all($point) {
        $this->_initChartCache();
        return $this->ChartCache->getAllStatsFromDate($point);
    }

    function chart_set_cache_all($point, $data) {
        $this->_initChartCache();
        return $this->ChartCache->setAllStatsFromDate($point, $data);
    }

    function chart_get_cache_domain($point, $domain_id) {
        $this->_initChartCache();
        return $this->ChartCache->getDomainStatsFromDate($point, $domain_id);
    }

    function chart_set_cache_domain($point, $data, $domain_id) {
        $this->_initChartCache();
        return $this->ChartCache->setDomainStatsFromDate($point, $data, $domain_id);
    }

    function chart_process_website($history, $website_id, $request, $point, $time_unit) {
        $this->_initChartWidgets();
        return $this->ChartWidgets->processWebsite($history, $website_id, $request, $point, $time_unit);
    }

    function chart_process_domain_increment($history, $stats, $point, $account, $domain_id) {
        $this->_initChartWidgets();
        return $this->ChartWidgets->incrementDomainStats($history, $stats, $point, $account, $domain_id);
    }

    function chart_process_all_increment($history, $stats, $point, $account) {
        $this->_initChartWidgets();
        return $this->ChartWidgets->incrementAllStats($history, $stats, $point, $account);
    }

    function chart_process_all_aggregate($history, $website_ids, $point) {
        return $history;
    }

    function chart_process_domain_aggregate($history, $website_ids, $point) {
        return $history;
    }

    function chart_initialize_stats($website_id) {
        $this->_initChartWidgets();
        return $this->ChartWidgets->initializeStats($website_id);
    }

    function chart_initialize_cumulative_stats() {
        $this->_initChartWidgets();
        return $this->ChartWidgets->initializeCumulativeStats();
    }

    function chart_line_initialize($request) {
        $this->_initChartWidgets();
        return $this->ChartWidgets->initializeLineData($request);
    }

    function chart_line_data($line, $stats, $website_id, $request, $domain_id = false) {
        $this->_initChartWidgets();
        return $this->ChartWidgets->processLineData($line, $stats, $website_id, $request, $domain_id);
    }

    function chart_lines($out, $line, $website_id, $request, $domain_id = false, $time_unit) {
        $this->_initChartWidgets();
        return $this->ChartWidgets->processLines($out, $line, $website_id, $request, $domain_id, $time_unit);
    }

    function website_stats_day($website_id, $date = null) {
        $stats_widget = new CI\Stats\Widget();
        return $stats_widget
            ->setModel($this->StatsWidget)
            ->setWebsiteId($website_id)
            ->setDate($date)
            ->getData();
    }

    function website_stats_range($website_id, $date_start, $date_end)
    {
        $stats_widget = new CI\Stats\Widget();
        return $stats_widget
            ->setModel($this->StatsWidget)
            ->setWebsiteId($website_id)
            ->setDateRange($date_start, $date_end)
            ->getData();
    }

    function aggregate_stats_range($widgets, $date_start, $date_end) {
        $stats_widget = new CI\Stats\Widget();
        $widget_stats = $stats_widget->getEmptyStats();

        $stats_widget->setModel($this->StatsWidget);
        $stats_widget->setDateRange($date_start, $date_end);

        foreach ($widgets as $widget) {
            $stats = $stats_widget->setWidgetId($widget['Widget']['id'])->getData();
            foreach ($widget_stats as $field => $stat) {
                $widget_stats[$field] += $stats[$field];
            }
        }

        return $widget_stats;
    }

    function stats_day($widget_id, $date = null) {
        if (empty($date)) {
            $Date = new CI\Date();
            $date = $Date->yesterday();
        }
        $stats = array();
        if ($this->cache_on) {
            $stats = $this->stats_cache_get($widget_id, $date);
        }
        if (empty($stats)) {
            $stats_widget = new CI\Stats\Widget();
            $stats = $stats_widget
                ->setModel($this->StatsWidget)
                ->setWidgetId($widget_id)
                ->setDate($date)
                ->getData();
            if ($this->cache_on) {
                $this->stats_cache_set($widget_id, $date, $stats);
            }
        }
        return $stats;
    }

    function stats_range($widget_id, $datetime_start, $datetime_end)
    {
        $stats_widget = new CI\Stats\Widget();
        return $stats_widget
            ->setModel($this->StatsWidget)
            ->setWidgetId($widget_id)
            ->setDateRange($datetime_start, $datetime_end)
            ->getData();
    }

    function impressions_since_time($widget_id, $time_start) {
        $Date = new CI\Date();
        $time_end = $Date->now();
        $stats = $this->stats_range($widget_id, $time_start, $time_end);
        return $stats['display'];
    }

    function stats_cache_get($id, $date) {
        $this->_initChartCache();
        return $this->ChartCache->getStatsFromDate($date, $id);
    }

    function stats_cache_set($id, $date, $stats) {
        $this->_initChartCache();
        return $this->ChartCache->setStatsFromDate($date, $id, $stats);
    }

    public function clear_cache($date = null) {
        $this->autoRender = false;
        $oDate = new CI\Date();
        if (empty($date)) {
            $date = $oDate->yesterday();
        }

        $widgets = $this->Widget->find(
            'list',
            array(
                'fields' => 'id, name',
                'conditions' => array(
                    'visible' => true,
                ),
            )
        );

        App::import('Component', 'Domain');
        $Domain = new DomainComponent();
        $domains = $Domain->getAllIds();

        $this->_initChartCache();
        $days = $oDate->getDays($date, $oDate->today());
        echo PHP_EOL;
        for ($i = 0; $i < $days; $i++) {
            $day_to_delete = $oDate->addDays($date, $i);
            echo 'Start clearing day ', $day_to_delete, PHP_EOL;
            $this->ChartCache->removeAllStatsFromDate($day_to_delete);
            echo '    Clearing widgets: ';
            foreach ($widgets as $id => $name) {
                $this->ChartCache->removeStatsFromDate($day_to_delete, $id);
            }
            echo 'Done', PHP_EOL, '    Clearing Domains: ';
            foreach ($domains as $domain_id) {
                $this->ChartCache->removeDomainStatsFromDate($day_to_delete, $domain_id);
            }
            echo 'Done', PHP_EOL, PHP_EOL;
        }
        echo 'Cache Cleared';
    }

    /* Returns json object with the stats for a website after the specified date */
    public function website_stats_by_date($website_id, $start_timestamp, $end_timestamp = 0) {
        Configure::write('debug', 0);
        $this->autoRender = false;

        $Date = new CI\Date();
        $datetime_start = $Date->oFormat->timestampToDatetime($start_timestamp);
        $datetime_end = (0 == $end_timestamp) ?
            $Date->yesterdayEnd() :
            $Date->oFormat->timestampToDatetime($end_timestamp);

        $stats = $this->website_stats_range($website_id, $datetime_start, $datetime_end);

        return json_encode($stats);
    }

    function base_point($base_start, $datetime_start, $widget_id) {}

    function point($datetime_start, $datetime_end, $widget_id) {}

    function points_aggregate($points) {}

    function stats_init($stats) {}

    function stats_non_zero($stats) {}

    function stats_set($stats, $data) {}

    function stats_add($stats, $data) {}

    function stats_delta($stats, $base) {}

    function stats_validate($stats, $info) {}

}

?>
