<?php

use CI\Facade\DebugBar;

include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

class ManagementController extends AppController
{
    var $name = 'Management';
    var $helpers = array('Html', 'Ajax', 'Javascript','Convert', 'Csv');
    var $uses = array('User', 'Log', 'Account', 'Website', 'Widget', 'Page', 'SocialPages', 'HistoryTimer', 'Analytic', 'LandingPageAnalytic', 'WidgetAnalytic', 'SimilarEngine', 'CompeteStore', 'LandingPageRebalance', 'WidgetRebalance', 'MetricLog', 'Tag', 'PageTag', 'Setting', 'Stats', 'CustomLandingPage');
    var $components = array('RequestHandler', 'Mail', 'CakeMemcache', 'Timer', 'Intersects', 'Date', 'Compete', 'Category');

    var $cache_on = 1;

    function beforeFilter() {
        // History Credits Controller
        App::import('Controller', 'HistoryCredits');
        global $HistoryCredits;
        $HistoryCredits = new HistoryCreditsController;
        $HistoryCredits->constructClasses();

        // History Widgets Controller
        App::import('Controller', 'HistoryWidgets');
        global $HistoryWidgets;
        $HistoryWidgets = new HistoryWidgetsController;
        $HistoryWidgets->constructClasses();

        // Pages
        App::import('Controller', 'Pages');
        global $Pages;
        $Pages = new PagesController;
        $Pages->constructClasses();

        // History Widgets Controller
        App::import('Controller', 'WidgetEngine');
        global $WidgetEngine;
        $WidgetEngine = new WidgetEngineController;
        $WidgetEngine->constructClasses();

        // Landing Page Engine Controller
        App::import('Controller', 'LandingPageEngine');
        global $LandingPageEngine;
        $LandingPageEngine = new LandingPageEngineController;
        $LandingPageEngine->constructClasses();

        // Landing Page Engine Controller
        App::import('Controller', 'LandingPageAnalytics');
        global $LandingPageAnalytics;
        $LandingPageAnalytics = new LandingPageAnalyticsController;
        $LandingPageAnalytics->constructClasses();

        // Landing Page Engine Controller
        App::import('Controller', 'WidgetAnalytics');
        global $WidgetAnalytics;
        $WidgetAnalytics = new WidgetAnalyticsController;
        $WidgetAnalytics->constructClasses();

        $this->Session->activate();
        $user = $this->Session->read('User');
        $user = $this->User->findById($user['id']);

        $this->validate_admin(ADMIN_DOMAIN);

        $this->layout = DOMAIN.'/default';
        $this->set('user', $user);
        $this->set_types_user($user['User']);

        if ($this->RequestHandler->isAjax()) {
            Configure::write('debug',0); // clean ajax results (no debug info)
        }
    }

    function index($full = 0, $website_id = 0) {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
        $this->layout = 'backend2';

        // Get accounts
        $accounts = $this->Account->findAllByStatus(ACCOUNT_STATUS_RUNNING);

        // Get websites
        if ($website_id) {
            $websites = $this->Website->find("all", array("conditions" => array("id" => $website_id)));
        } else {
            $websites = $this->Website->running();
        }

        foreach ($websites as $website) {
            $website_ids[] = $website['Website']['id'];
        }

        $active_sites_count = count($this->Website->running());

        $this->Website->bindModel(array("belongsTo" => array("Account" =>
                                     array('className' => 'Account',
                                     'conditions' => '',
                                     'order' => '',
                                     'foreignKey' => 'account_id'))));

        $new_websites = $this->Website->findAllByStatus(WEBSITE_STATUS_NEW);
        $new_sites_count = count($new_websites);

        // Get stats
        $active_pages_count = $this->Page->count_by_website_id($website_ids, PAGE_STATUS_APPROVED);
        $pending_moderation_pages_count = $this->Page->find("count", array("conditions" => array("status" => PAGE_STATUS_PENDING_MODERATION)));
        $page_freshness = $this->Page->get_freshness(PAGE_STATUS_APPROVED);
        $landing_page_rebalance = $this->LandingPageRebalance->max_count();
        $widget_rebalance = $this->WidgetRebalance->max_count();

        // Get timer information
        $landing_page_rebalance_timer = $this->HistoryTimer->find("all", array("conditions" => array("type" => TIMER_LANDING_PAGE_ENGINE_REBALANCE),
                                            "order" => "created DESC",
                                            "limit" => 1));

        $widget_rebalance_timer = $this->HistoryTimer->find("all", array("conditions" => array("type" => TIMER_WIDGET_ENGINE_REBALANCE),
                                            "order" => "created DESC",
                                            "limit" => 1));

        $persist_cache_timer = $this->HistoryTimer->find("all", array("conditions" => array("type" => TIMER_PERSIST_CACHE),
                                            "order" => "created DESC",
                                            "limit" => 1));

        App::import('Component', 'Dictionary');
        $Dictionary = new DictionaryComponent();

        $this->set("categories", $Dictionary->get_dictionary(DictionaryComponent::TYPE_CATEGORY));

        $this->set("websites", $websites);
        $this->set("active_sites_count", $active_sites_count);
        $this->set("new_sites_count", $new_sites_count);
        $this->set("new_websites", $new_websites);
        $this->set("active_pages_count", $active_pages_count);
        $this->set("pending_moderation_pages_count", $pending_moderation_pages_count);
        $this->set("page_freshness", $page_freshness);
        $this->set("landing_page_rebalance", $landing_page_rebalance);
        $this->set("widget_rebalance", $widget_rebalance);
        $this->set("full_chart", $full);
        $this->set("landing_page_rebalance_timer", $landing_page_rebalance_timer);
        $this->set("widget_rebalance_timer", $widget_rebalance_timer);
        $this->set("persist_cache_timer", $persist_cache_timer);
        $this->set("memcached_slab_stats", array());

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $this->set("domain_component", $oHub);
    }

    /**
     * Returns a json with the similiar pages count
     * to be shown on the dashboard
     */
    public function get_similar_pages_counts()
    {
        $this->validate_admin(ADMIN_FULL);
        $this->autoRender = false;
        $return = array(
            'widget' => 0,
            'landing_page' => 0
        );

        $return['widget'] = $this->WidgetAnalytic->get_similar_page_count();
        $return['landing_page'] = $this->LandingPageAnalytic->get_similar_page_count(0);

        echo json_encode($return);
    }

    /**
     * Returns a json with the queues sizes to be
     * used on the dashboard.
     */
    public function get_queues_sizes()
    {
        $this->validate_admin(ADMIN_FULL);
        $this->autoRender = false;
        $return = array();
        $return = $this->queue_info();
        echo json_encode($return);
    }

    /**
     * Print the json with the information for the WARned websites
     * This is calculated taking in count yesterday and the same day
     * from the last 3 weeks to take an average.
     *
     * @return string JSON with the warned sites
     */
    public function get_warned_sites()
    {
        set_time_limit(TIME_LIMIT_HISTORY_WIDGETS_UPDATE);

        $lower_drop_limit = 30;
        $lower_traffic_limit = 10000; // don't show small sites per AZ1267
        $this->autoRender = false;
        $yesterday        = $this->Date->yesterday();

        App::Import('Controller', 'HistoryWidgets');
        $history_widgets = new HistoryWidgetsController();
        $history_widgets->constructClasses();

        $oKeyGen = new \CI\Memcached\KeyGen(strtotime($yesterday), 'warned_sites_key');
        $cache_key = $oKeyGen->generate();

        $widgets_stats = array();
        if ($this->cache_on) {
            $widgets_stats = $this->Widget->memcached_get_json($cache_key);
        }

        if (empty($widgets_stats)) {
            $yesterday_end       = $this->Date->day_end($yesterday);
            $one_week_ago        = $this->Date->point_add($yesterday, -7, TIME_UNIT_DAY);
            $one_week_ago_end    = $this->Date->day_end($one_week_ago);
            $two_weeks_ago       = $this->Date->point_add($yesterday, -7 * 2, TIME_UNIT_DAY);
            $two_weeks_ago_end   = $this->Date->day_end($two_weeks_ago);
            $three_weeks_ago     = $this->Date->point_add($yesterday, -7 * 3, TIME_UNIT_DAY);
            $three_weeks_ago_end = $this->Date->day_end($three_weeks_ago);

            $widgets_stats = array();
            $websites = $this->Website->find(
                'all',
                array(
                    'fields' => array(
                        'Website.id',
                        'Website.name',
                        'Website.url',
                    ),
                    'conditions' => array(
                        'visible' => true,
                        'status'  => WEBSITE_STATUS_ACTIVE,
                    ),
                )
            );

            foreach ($websites as $website) {
                $yesterday_stats   = $history_widgets->website_stats_range($website['Website']['id'], $yesterday, $yesterday_end);
                $one_week_stats    = $history_widgets->website_stats_range($website['Website']['id'], $one_week_ago, $one_week_ago_end);
                $two_weeks_stats   = $history_widgets->website_stats_range($website['Website']['id'], $two_weeks_ago, $two_weeks_ago_end);
                $three_weeks_stats = $history_widgets->website_stats_range($website['Website']['id'], $three_weeks_ago, $three_weeks_ago_end);

                $average_stats = ($one_week_stats['display'] + $two_weeks_stats['display'] + $three_weeks_stats['display']) / 3;
                $percentage_drop = 0;

                if ($average_stats != 0) {

                    $percentage_drop = ($average_stats - $yesterday_stats['display']) / $average_stats * 100;
                }

                if ($percentage_drop > $lower_drop_limit && $average_stats > $lower_traffic_limit) {
                    $widgets_stats[] = array(
                        'name' => empty($website['Website']['name']) ? $website['Website']['url'] : $website['Website']['name'],
                        'website_id' => $website['Website']['id'],
                        'yesterday_stats' => number_format($yesterday_stats['display']),
                        'widget_imp_average' => number_format($average_stats),
                        'percentage_drop' => number_format($percentage_drop, 2),
                    );
                }
            }

            if (!empty($widgets_stats)) {
                usort($widgets_stats, array('ManagementController','sort_drop_widget_impressions'));
            }

            if ($this->cache_on) {
                $this->Widget->memcached_set_json($cache_key, $widgets_stats);
            }
        }

        return json_encode($widgets_stats);
    }

    /**
     * Get the website & account info and return it on JSON
     * format.
     *
     * @param  int $website_id The ID of the website to grab the data
     *
     * @return string JSON with the info
     */
    public function get_website_details($website_id)
    {
        $this->autoRender = false;
        $this->Website->bindModel(
            array(
                'belongsTo' => array(
                    'Account' => array(
                        'className' => 'Account',
                        'foreignKey' => 'account_id'
                    ),
                    'User' => array(
                        'className' => 'User',
                        'foreignKey' => 'user_id'
                    )
                ),
            )
        );

        $website = $this->Website->find(
            'first',
            array(
                'fields' => array(
                    'Website.id',
                    'Website.name',
                    'Website.ranked',
                    'Website.account_id',
                    'Account.credits',
                    'Account.outgoing',
                    'Account.incoming',
                    'User.email'
                ),
                'conditions' => array(
                    'Website.id' => $website_id
                )
            )
        );

        if (!empty($website)) {
            $website = array_merge($website['Website'], $website['Account'], $website['User']);
            // The credits should be divided between 10 because in the database
            // all the credits are multiplied by 10. eg: if the credits are 5 in the
            // database are 50.
            $website['credits'] = $website['credits'] / 10;
            $website['page_pending'] = $this->Page->find(
                'count',
                array(
                    'conditions' => array(
                        'status' => PAGE_STATUS_PENDING,
                        'website_id' => $website['id']
                    )
                )
            );
            $website['page_active'] = $this->Page->find('count',
                array(
                    'conditions' => array(
                        'status' => PAGE_STATUS_APPROVED,
                        'website_id' => $website['id']
                    )
                )
            );
            $website['page_pending_moderation'] = $this->Page->find(
                'count',
                array(
                    'conditions' => array(
                        'status' => PAGE_STATUS_PENDING_MODERATION,
                        'website_id' => $website['id']
                    )
                )
            );
            $website['page_freshness'] = $this->Page->get_freshness(PAGE_STATUS_APPROVED, $website['id']);
            $website['return_rate'] = 0;
            if (!empty($website['incoming'])) {
                $website['return_rate'] = round($website['outgoing'] / $website['incoming'] * 100, 0);
            }
        }

        return json_encode($website, true);
    }

    function pages_by_category() {
        App::import('Component', 'Dictionary');
        $Dictionary = new DictionaryComponent();
        $categories = $Dictionary->get_dictionary(DictionaryComponent::TYPE_CATEGORY);
        $ratings    = $Dictionary->get_dictionary(DictionaryComponent::TYPE_CONTENT);
        $hub_list   = $Dictionary->get_dictionary(DictionaryComponent::TYPE_DOMAIN);

        $this->set('categories', $categories);
        $this->set('ratings', $ratings);
        $this->set('hub_list', $hub_list);

        $this->layout = 'backend2';
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
    }

    private function sort_drop_widget_impressions($a, $b)
    {
        if ($a['percentage_drop'] == $b['percentage_drop']) {
            return 0;
        }

        return ($a['percentage_drop'] > $b['percentage_drop']) ? -1 : 1;
    }

    function engine() {
        $this->layout = 'backend2';
        $this->helpers[] = 'Engine';

        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        App::import('Helper', 'Convert');
        $Convert = new ConvertHelper();

        $engine_scripts = array();
        $engine_scripts[] = 'Rebalancing';

        /* Landing Page Rebalance */
        $engine_scripts[] = array(
            'title' => 'Landing Pages',
            'url'   => '/landing_page_engine/rebalance',
            'data'  => $this->engine_validate(
                TIMER_LANDING_PAGE_ENGINE_REBALANCE,
                TIME_LIMIT_LANDING_PAGE_REBALANCE,
                MEMORY_LIMIT_LANDING_PAGE_REBALANCE
            )
        );

        /* Landing Page Full Rebalance */
        for($i = 1; $i <= 4; $i++) {
            $engine_scripts[] = array(
                'title' => 'Full Landing Pages Chunk '.$i,
                'url'   => '/landing_page_engine/rebalance_full/'.$i,
                'data'  => $this->engine_validate(
                    constant('TIMER_LANDING_PAGE_ENGINE_FULL_REBALANCE'.$i),
                    TIME_LIMIT_LANDING_PAGE_FULL_REBALANCE,
                    MEMORY_LIMIT_LANDING_PAGE_FULL_REBALANCE
                )
            );
        }

        /* Widget Rebalance */
        $engine_scripts[] = array(
            'title' => 'Widgets',
            'url'   => '/widget_engine/rebalance',
            'data'  => $this->engine_validate(
                TIMER_WIDGET_ENGINE_REBALANCE,
                TIME_LIMIT_WIDGET_REBALANCE,
                MEMORY_LIMIT_WIDGET_REBALANCE
            )
        );

        /* Widget Engine Chunk 1 ~ 8 Rebalance */
        for($i = 1; $i <= 8; $i++) {
            $engine_scripts[] = array(
                'title' => 'Widgets Chunk '.$i,
                'url'   => '/widget_engine/rebalance_website_chunks/'.$i,
                'data'  => $this->engine_validate(
                    constant('TIMER_WIDGET_REBALANCE_CHUNK'.$i),
                    constant('TIME_LIMIT_WIDGET_REBALANCE_CHUNK'.$i),
                    constant('MEMORY_LIMIT_WIDGET_REBALANCE_CHUNK'.$i)
                )
            );
        }

        $engine_scripts[] = 'Processing Queues';

        /* Landing Page Update Display Counts */
        $engine_scripts[] = array(
            'title' => 'Landing Page Views',
            'url'   => '/landing_page_engine/new_update_display_counts',
            'data'  => $this->engine_validate(
                TIMER_LANDING_PAGE_UPDATE_DISPLAY_COUNTS,
                TIME_LIMIT_LANDING_PAGE_UPDATE_DISPLAY_COUNTS,
                MEMORY_LIMIT_LANDING_PAGE_UPDATE_DISPLAY_COUNTS,
                false
            )
        );

        /* Widget Update Display Counts */
        $engine_scripts[] = array(
            'title' => 'Widget Views',
            'url'   => '/widget_engine/new_update_display_counts',
            'data'  => $this->engine_validate(
                TIMER_WIDGET_UPDATE_DISPLAY_COUNTS,
                TIME_LIMIT_WIDGET_UPDATE_DISPLAY_COUNTS,
                MEMORY_LIMIT_WIDGET_UPDATE_DISPLAY_COUNTS,
                false
            )
        );

        /* Outgoing Click Persist */
        $engine_scripts[] = array(
            'title' => 'Outgoing Clicks',
            'url'   => '/page_engine/update_click_counts',
            'data'  => $this->engine_validate(
                TIMER_OUTGOING_CLICK_PERSIST,
                TIME_LIMIT_OUTGOING_CLICK_PERSIST,
                MEMORY_LIMIT_OUTGOING_CLICK_PERSIST,
                false
            )
        );

        /* Page New Queue */
        $engine_scripts[] = array(
            'title' => 'New Pages',
            'url'   => '/page_new_engine/index',
            'data'  => $this->engine_validate(
                TIMER_PAGE_NEW_QUEUE,
                TIME_LIMIT_PAGE_NEW_QUEUE,
                MEMORY_LIMIT_PAGE_NEW_QUEUE,
                false
            )
        );

        /* Contextual Matching Queue */
        $engine_scripts[] = array(
            'title' => 'Contextual Matching',
            'url'   => '/contextual_engine/engine_queue',
            'data'  => $this->engine_validate(
                TIMER_CONTEXTUAL_MATCHING_QUEUE,
                TIME_LIMIT_CONTEXTUAL_MATCHING_QUEUE,
                MEMORY_LIMIT_CONTEXTUAL_MATCHING_QUEUE,
                false
            )
        );

        $engine_scripts[] = 'Refresh';

        /* Landing Page Refresh */
        $engine_scripts[] = array(
            'title' => 'Landing Pages',
            'url'   => '/landing_page_engine/refresh',
            'data'  => $this->engine_validate(
                TIMER_LANDING_PAGE_REFRESH,
                TIME_LIMIT_LANDING_PAGE_REFRESH,
                MEMORY_LIMIT_LANDING_PAGE_REFRESH
            )
        );

        $engine_scripts[] = 'Precaching';

        /* History Widget Analytic Precache */
        $engine_scripts[] = array(
            'title' => 'History Widgets',
            'url'   => '/history_widget_analytics/precache',
            'data'  => $this->engine_validate(
                TIMER_HISTORY_WIDGET_ANALYTICS_PRECACHE,
                TIME_LIMIT_HISTORY_WIDGET_ANALYTICS_PRECACHE,
                MEMORY_LIMIT_HISTORY_WIDGET_ANALYTICS_PRECACHE
            )
        );

        /* History Landing Page Precache */
        $engine_scripts[] = array(
            'title' => 'History Landing Pages',
            'url'   => '/history_landing_page_analytics/precache',
            'data'  => $this->engine_validate(
                TIMER_HISTORY_LANDING_PAGE_ANALYTICS_PRECACHE,
                TIME_LIMIT_HISTORY_LANDING_PAGE_ANALYTICS_PRECACHE,
                MEMORY_LIMIT_HISTORY_LANDING_PAGE_ANALYTICS_PRECACHE
            )
        );

        /* History Stats Precache */
        $engine_scripts[] = array(
            'title' => 'History Stats',
            'url'   => '/history_stats/precache',
            'data'  => $this->engine_validate(
                TIMER_HISTORY_STATS_PRECACHE,
                TIME_LIMIT_HISTORY_STATS_PRECACHE,
                MEMORY_LIMIT_HISTORY_STATS_PRECACHE
            )
        );

        /* History Credits Precache */
        $engine_scripts[] = array(
            'title' => 'History Credits',
            'url'   => '/history_credits/precache',
            'data'  => $this->engine_validate(
                TIMER_HISTORY_CREDITS_PRECACHE,
                TIME_LIMIT_HISTORY_CREDITS_PRECACHE,
                MEMORY_LIMIT_HISTORY_CREDITS_PRECACHE
            )
        );

        /* History Pages Precache */
        $engine_scripts[] = array(
            'title' => 'History Pages',
            'url'   => '/history_pages/precache',
            'data'  => $this->engine_validate(
                TIMER_HISTORY_PAGES_PRECACHE,
                TIME_LIMIT_HISTORY_PAGES_PRECACHE,
                MEMORY_LIMIT_HISTORY_PAGES_PRECACHE
            )
        );

        $engine_scripts[] = 'History Snapshots';

        /* Social Update */
        $engine_scripts[] = array(
            'title' => 'History Social',
            'url'   => '/history_social/update',
            'data'  => $this->engine_validate(
                TIMER_SOCIAL_UPDATE,
                TIME_LIMIT_SOCIAL_UPDATE,
                MEMORY_LIMIT_SOCIAL_UPDATE
            )
        );

        $engine_scripts[] = 'Social Engines';

        /* Social Engine */
        $engine_scripts[] = array(
            'title' => 'Social Engine',
            'url'   => '/social_pages/engine',
            'data'  => $this->engine_validate(
                TIMER_SOCIAL_ENGINE,
                TIME_LIMIT_SOCIAL_ENGINE,
                MEMORY_LIMIT_SOCIAL_ENGINE
            )
        );

        /* Social Update Pages Active */
        $engine_scripts[] = array(
            'title' => 'Update Active',
            'url'   => '/social_pages/update_pages/0/0',
            'data'  => $this->engine_validate(
                TIMER_SOCIAL_UPDATE_PAGES_ACTIVE,
                TIME_LIMIT_SOCIAL_UPDATE_PAGES_ACTIVE,
                MEMORY_LIMIT_SOCIAL_UPDATE_PAGES_ACTIVE
            )
        );

        /* Social Update Pages Pending */
        $engine_scripts[] = array(
            'title' => 'Update Pending',
            'url'   => '/social_pages/update_pages/0/1',
            'data'  => $this->engine_validate(
                TIMER_SOCIAL_UPDATE_PAGES_PENDING,
                TIME_LIMIT_SOCIAL_UPDATE_PAGES_PENDING,
                MEMORY_LIMIT_SOCIAL_UPDATE_PAGES_PENDING
            )
        );

        $engine_scripts[] = 'Contextual Engines';

        /* Contextual Matching New */
        $engine_scripts[] = array(
            'title' => 'Matching News',
            'url'   => '/contextual_engine/engine_new',
            'data'  => $this->engine_validate(
                TIMER_CONTEXTUAL_MATCHING_NEW,
                TIME_LIMIT_CONTEXTUAL_MATCHING_NEW,
                MEMORY_LIMIT_CONTEXTUAL_MATCHING_NEW
            )
        );

        /* Contextual Matching Active */
        $engine_scripts[] = array(
            'title' => 'Matching Actives',
            'url'   => '/contextual_engine/engine_active',
            'data'  => $this->engine_validate(
                TIMER_CONTEXTUAL_MATCHING_ACTIVE,
                TIME_LIMIT_CONTEXTUAL_MATCHING_ACTIVE,
                MEMORY_LIMIT_CONTEXTUAL_MATCHING_ACTIVE
            )
        );

        /* Contextual Matching Chunk 1 ~ 4 Rebalance */
        for($i = 1; $i <= 4; $i++) {
            $engine_scripts[] = array(
                'title' => 'Matching Chunk '.$i,
                'url'   => '/contextual_engine/rebalance_website_chunks/'.$i,
                'data'  => $this->engine_validate(
                    constant('TIMER_CONTEXTUAL_MATCHING_CHUNK'.$i),
                    constant('TIME_LIMIT_CONTEXTUAL_MATCHING_CHUNK'.$i),
                    constant('MEMORY_LIMIT_CONTEXTUAL_MATCHING_CHUNK'.$i)
                )
            );
        }

        /* Similar Engine */
        $engine_scripts[] = 'Similar Engines';

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $oTimer = new \CI\Engine\Timer();
        $active_domain_bits = $oHub->getAllActiveBits();
        foreach ($active_domain_bits as $domain_bit) {
            $domain_id = $oHub->bitToId($domain_bit);
            $engine_scripts[] = array(
                'title' => 'Similar '.$Convert->domain_name($domain_id),
                'url'   => '/similar_engine/'.$domain_id,
                'data'  => $this->engine_validate(
                    $oTimer->idToSimilarTimer($domain_id),
                    TIME_LIMIT_SIMILAR_ENGINE,
                    MEMORY_LIMIT_SIMILAR_ENGINE
                    )
                );
        }

        $engine_scripts[] = 'Misc Engines';

        /* Ranker Engine */
        $engine_scripts[] = array(
            'title' => 'Ranker',
            'url'   => '/ranker/engine',
            'data'  => $this->engine_validate(
                TIMER_RANKER_ENGINE,
                TIME_LIMIT_RANKER_ENGINE,
                MEMORY_LIMIT_RANKER_ENGINE
            )
        );

        /* Ranker Pending Chunk 1 ~ 4 Engine */
        for($i = 1; $i <= RANKER_PENDING_CHUNK_NUM; $i++) {
            $engine_scripts[] = array(
                'title' => 'Ranker Pending Chunk '.$i,
                'url'   => '/ranker/pending_chunk/'.$i,
                'data'  => $this->engine_validate(
                    constant('TIMER_RANKER_PENDING_CHUNK'.$i),
                    TIME_LIMIT_RANKER_PENDING_CHUNK,
                    MEMORY_LIMIT_RANKER_PENDING_CHUNK
                )
            );
        }

        /* Clean LRU */
        $engine_scripts[] = array(
            'title' => 'Clean LRU',
            'url'   => '/pages/clean_lru',
            'data'  => $this->engine_validate(
                TIMER_CLEAN_LRU,
                TIME_LIMIT_CLEAN_LRU,
                MEMORY_LIMIT_CLEAN_LRU
            )
        );

        $this->set('engine_scripts', $engine_scripts);
    }

    private function engine_validate($type, $time_limit, $memory_limit, $progress_show = true) {
        $time_warn_amount = 0.8;
        $memory_warn_amount = 0.8;

        $data = $this->HistoryTimer->find("first", array(
            "conditions" => array("type" => $type),
            "order" => "created DESC"
        ));

        if (!$data) {
            // return empty HitoryTimer if no data
            $progress = 0;
            $running = false;
            if ($progress_show) {
                $progress = $this->Timer->progress_get($type);
                $running = $this->Timer->running_get($type);
            }
            return array(
                'HistoryTimer' => array(
                    'time'             => 0,
                    'minutes'          => 0,
                    'seconds'          => 0,
                    'max_minutes'      => $time_limit > 0 ? (int)($time_limit / 60) : 0,
                    'max_seconds'      => $time_limit > 0 ? (int)($time_limit % 60) : 0,
                    'time_warning'     => false,
                    'memory'           => 0,
                    'max_memory'       => $memory_limit,
                    'memory_warning'   => false,
                    'last_ran_warning' => false,
                    'progress'         => $progress,
                    'running'          => $running,
                    'created'          => false
                )
            );
        }

        // Setup the time
        $total_secs = $data['HistoryTimer']['time'] / 1000;
        $data['HistoryTimer']['minutes'] = (int)($total_secs / 60);
        $data['HistoryTimer']['seconds'] = (int)($total_secs % 60);
        $data['HistoryTimer']['max_minutes'] = (int)($time_limit / 60);
        $data['HistoryTimer']['max_seconds'] = (int)($time_limit % 60);
        $data['HistoryTimer']['time_warning'] = $total_secs >= ($time_limit * $time_warn_amount);

        // Setup the size
        $size = $this->Timer->get_memory_limit($data['HistoryTimer']['data']);
        $size = round($size / (1024 * 1024), 2);
        $data['HistoryTimer']['memory'] = $size;
        $data['HistoryTimer']['max_memory'] = $memory_limit;
        $data['HistoryTimer']['memory_warning'] = $size >= ($memory_limit * $memory_warn_amount);

        // Check the last ran date
        $num_days = $this->Date->get_age($data['HistoryTimer']['created']);
        $data['HistoryTimer']['last_ran_warning'] = $num_days > 1;

        if ($progress_show) {
            $data['HistoryTimer']['progress'] = $this->Timer->progress_get($type);
            $data['HistoryTimer']['running'] = $this->Timer->running_get($type);
        }

        return $data;
    }

    private function load_widgets_by_websites($websites) {
        $count = count($websites);

        for ($i = 0; $i < $count; $i++) {
            $id = $websites[$i]['Website']['id'];

            $conditions = array("visible" => true,
                                "status" => array(WIDGET_STATUS_ACTIVE, WIDGET_STATUS_INACTIVE),
                                "website_id" => $id);

            $widgets = $this->Widget->find("all", array("conditions" => $conditions));

            $websites[$i]['Widgets'] = $widgets;
        }

        return $websites;
    }

    /* Returns yesterday's website data */
    public function websites_yesterday_data() {
        $this->autoRender = false;
        Configure::write('debug', 0);

        // Getting the data from $_POST
        $status   = (int) $_POST['status'];
        $hub      = (int) $_POST['hub'];
        $category = (int) $_POST['category'];

        $this->Website->bindModel(
            array(
                "belongsTo" => array(
                    "Account" => array(
                        'className' => 'Account',
                        'conditions' => '',
                        'order' => '',
                        'foreignKey' => 'account_id'
                    )
                )
            )
        );

        $website_conditions = array("Website.status" => $status);

        if ($hub != DOMAIN_ID_ALL) {
            $website_conditions['Website.domain_primary'] = $hub;
        }

        if ($category != CATEGORY_ALL) {
            $website_conditions['Website.category'] = $category;
        }

        $websites = $this->Website->find(
            "all",
            array(
                "conditions" => $website_conditions,
                "order"      => "credits DESC"
            )
        );

        $count     = count($websites);
        $yesterday = $this->Date->yesterday();

        global $HistoryCredits;
        App::import('Controller', 'HistoryLandingPageAnalytics');
        $HistoryLandingPageAnalytics = new HistoryLandingPageAnalyticsController();
        App::import('Controller', 'HistoryWidgetAnalytics');
        $HistoryWidgetAnalytics = new HistoryWidgetAnalyticsController();

        for ($i = 0; $i < $count; $i++) {
            // Tier
            $websites[$i]['Website']['tier'] = \CI\Component\Facade\Tier::getValidTier($websites[$i]['Website']['tier']);

            // Return Rate
            $websites[$i]['Website']['rr'] = 0;
            if ($websites[$i]['Account']['incoming']) {
                $websites[$i]['Website']['rr'] = $websites[$i]['Account']['outgoing'] / $websites[$i]['Account']['incoming'];
            }
            $total_stats['incoming'] += isset($websites[$i]['Account']['incoming']) ? $websites[$i]['Account']['incoming'] : 0;
            $total_stats['outgoing'] += isset($websites[$i]['Account']['outgoing']) ? $websites[$i]['Account']['outgoing'] : 0;

            // Get yesterday stats
            $yesterday_stats = $HistoryCredits->stats_day($websites[$i]['Website']['account_id'], $yesterday);

            // Yesterday To
            $websites[$i]['Website']['youtgoing'] = $yesterday_stats['outgoing'];
            $total_stats['youtgoing'] += isset($yesterday_stats['outgoing'])
                ? $yesterday_stats['outgoing']
                : 0;

            // Yesterday From
            $websites[$i]['Website']['yincoming'] = $yesterday_stats['incoming'];
            $total_stats['yincoming'] += isset($yesterday_stats['incoming'])
                ? $yesterday_stats['incoming']
                : 0;

            // Yesterday Return Rate
            $websites[$i]['Website']['yrr'] = 0;
            if ($yesterday_stats['incoming']) {
                $websites[$i]['Website']['yrr'] = $yesterday_stats['outgoing'] / $yesterday_stats['incoming'];
            }

            // Get yesterday LP stats
            $yesterday_lp_stats = $HistoryLandingPageAnalytics->stats_days_website_landing_pages($websites[$i]['Website']['id'], 1);

            // Yesterday LP CTR
            $websites[$i]['Website']['y_lp_ctr'] = 0;
            if ($yesterday_lp_stats['num_display']) {
                $websites[$i]['Website']['y_lp_ctr'] = $yesterday_lp_stats['num_ctr'] / $yesterday_lp_stats['num_display'];
            }

            // Yesterday LP clicks
            $total_stats['y_lp_clicks'] += isset($yesterday_lp_stats['num_ctr'])
                ? $yesterday_lp_stats['num_ctr']
                : 0;

            // Yesterday LP Imp
            $websites[$i]['Website']['y_lp_imp']  = $yesterday_lp_stats['num_display'];
            $total_stats['y_lp_imp'] += isset($yesterday_lp_stats['num_display'])
                ? $yesterday_lp_stats['num_display']
                : 0;

            // Get yesterday Widget stats
            $yesterday_widget_stats = $HistoryWidgetAnalytics->stats_days_website($websites[$i]['Website']['id'], 0, 1);

            // Yesterday Widget CTR
            $websites[$i]['Website']['y_w_ctr'] = 0;
            if ($yesterday_widget_stats['num_display']) {
                $websites[$i]['Website']['y_w_ctr'] = $yesterday_widget_stats['num_ctr'] / $yesterday_widget_stats['num_display'];
            }

            // Yesterday Widget clicks
            $total_stats['y_w_clicks'] += isset($yesterday_widget_stats['num_ctr'])
                ? $yesterday_widget_stats['num_ctr']
                : 0;

            // Yesterday Widget Imp
            $websites[$i]['Website']['y_w_imp']  = $yesterday_widget_stats['num_display'];
            $total_stats['y_w_imp'] += isset($yesterday_widget_stats['num_display'])
                ? $yesterday_widget_stats['num_display']
                : 0;

            // Get yesterday shown website data
            $yesterday_shown_website_widget_stats = $this->Stats->get_shown_website_widget_stats($websites[$i]['Website']['id'], $yesterday . ' 00:00:00', $yesterday . ' 23:59:59');

            // Yesterday Generated Return Rate
            $websites[$i]['Website']['y_gen_r_r'] = 0;
            if ($yesterday_stats['incoming']) {
                $websites[$i]['Website']['y_gen_r_r'] = $yesterday_shown_website_widget_stats['traffic'] / $yesterday_stats['incoming'];
            }
            $total_stats['y_w_traffic'] += $yesterday_shown_website_widget_stats['traffic'];

            // Pages
            $page_pending = $this->Page->find(
                "count",
                array(
                    "conditions" => array(
                        "status" => PAGE_STATUS_PENDING,
                        "website_id" => $websites[$i]['Website']['id']
                    )
                )
            );
            $websites[$i]['Website']['page_pending'] = $page_pending;
            $page_active = $this->Page->find(
                "count",
                array(
                    "conditions" => array(
                        "status" => PAGE_STATUS_APPROVED,
                        "website_id" => $websites[$i]['Website']['id']
                    )
                )
            );
            $websites[$i]['Website']['page_active'] = $page_active;
            $page_pending_moderation = $this->Page->find(
                "count",
                array(
                    "conditions" => array(
                        "status" => PAGE_STATUS_PENDING_MODERATION,
                        "website_id" => $websites[$i]['Website']['id']
                    )
                )
            );
            $websites[$i]['Website']['page_pending_moderation'] = $page_pending_moderation;
        }

        // Check which websites need attention
        $needs_attention_count     = 0;
        $needs_attention_notice    = 0;
        $needs_attention_warning   = 0;
        $needs_attention_immediate = 0;

        for ($i = 0; $i < $count; $i++) {
            $rolling_lp_stats     = $HistoryLandingPageAnalytics->stats_days_website_landing_pages($websites[$i]['Website']['id'], MANAGEMENT_LANDING_PAGE_ROLLING_DAYS);
            $rolling_widget_stats = $HistoryWidgetAnalytics->stats_days_website($websites[$i]['Website']['id'], 0, MANAGEMENT_WIDGET_ROLLING_DAYS);

            $websites[$i]['Website']['r_lp_imp'] = $lp_rolling_stats['num_display'];
            $websites[$i]['Website']['r_w_imp'] = $widget_rolling_stats['num_display'];

            $total_stats['r_lp_ctr'] += $rolling_lp_stats['num_ctr'];
            $total_stats['r_lp_imp'] += $rolling_lp_stats['num_display'];

            $total_stats['r_w_ctr'] += $rolling_widget_stats['num_ctr'];
            $total_stats['r_w_imp'] += $rolling_widget_stats['num_display'];

            $atten = $this->needs_attention($websites[$i], $total_stats);
            $websites[$i]['Website']['needs_attention'] = $atten['message'];
            $websites[$i]['Website']['attention_level'] = $atten['level'];
            if ($websites[$i]['Website']['needs_attention']) {
                $needs_attention_count++;
            }

            switch ($atten['level']) {
            case ATTENTION_LEVEL_NOTICE:
                $needs_attention_notice++;
                break;
            case ATTENTION_LEVEL_WARNING:
                $needs_attention_warning++;
                break;
            case ATTENTION_LEVEL_IMMEDIATE:
                $needs_attention_immediate++;
                break;
            }
        }

        $websites['statistics']['needs_attention_count']     = $needs_attention_count;
        $websites['statistics']['needs_attention_notice']    = $needs_attention_notice;
        $websites['statistics']['needs_attention_warning']   = $needs_attention_warning;
        $websites['statistics']['needs_attention_immediate'] = $needs_attention_immediate;

        $websites['statistics']['count'] = $count;
        $websites['statistics']          = array_merge($websites['statistics'], $total_stats);

        DebugBar::sendDataInHeaders();

        echo json_encode($websites);
    }

    function websites($status = WEBSITE_STATUS_ACTIVE, $hub = DOMAIN_ID_ALL, $category = CATEGORY_ALL) {
        $this->layout = 'backend2';
        set_time_limit(10*60);

        $this->validate_admin(ADMIN_DOMAIN, $hub);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $total_stats = array();
        $total_stats['page_pending'] = 0;
        $total_stats['page_active'] = 0;
        $total_stats['page_pending_moderation'] = 0;
        $total_stats['incoming'] = 0;
        $total_stats['outgoing'] = 0;
        $total_stats['credits'] = 0;
        $total_stats['r_lp_ctr'] = 0;
        $total_stats['r_lp_imp'] = 0;
        $total_stats['r_w_ctr'] = 0;
        $total_stats['r_w_imp'] = 0;
        $total_stats['freshness'] = 0;

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $domain_bit = $oHub->idToBit($hub);

        $landing_page_engine = new \CI\Engine\LandingPage();
        $landing_page_priority = $landing_page_engine->getAccountsByPriority($domain_bit);

        $widget_engine = new \CI\Engine\Widget();
        $widget_priority = $widget_engine->getAccountsByPriority($domain_bit);

        $this->Website->bindModel(array("belongsTo" => array("Account" =>
                                     array('className' => 'Account',
                                     'conditions' => '',
                                     'order' => '',
                                     'foreignKey' => 'account_id'))));

        $website_conditions = array("Website.status" => $status);
        if ($hub != DOMAIN_ID_ALL) {
            $website_conditions['Website.domain_primary'] = $hub;
        }
        if ($category != CATEGORY_ALL) {
            $website_conditions['Website.category'] = $category;
        }

        $websites = $this->Website->find(
            "all",
            array(
                "conditions" => $website_conditions,
                "order" => "credits DESC"
            )
        );

        // Current user logged in.
        $user_logged = $this->Session->read('User');
        $user_logged = $this->User->findById($user_logged['id']);

        $flagged_websites = json_decode($user_logged["User"]["flagged_websites"]);
        if(count($flagged_websites) == 0){
            $flagged_websites = array();
        }

        $count = count($websites);

        for ($i = 0; $i < $count; $i++) {

            // Get pages
            $page_pending = $this->Page->find("count", array("conditions" =>
                                     array("status" => PAGE_STATUS_PENDING,
                                             "website_id" => $websites[$i]['Website']['id'])));
            $page_active = $this->Page->find("count", array("conditions" =>
                                    array("status" => PAGE_STATUS_APPROVED,
                                            "website_id" => $websites[$i]['Website']['id'])));

            $page_pending_moderation = $this->Page->find("count", array("conditions" =>
                                            array("status" => PAGE_STATUS_PENDING_MODERATION,
                                                "website_id" => $websites[$i]['Website']['id'])));

            $page_freshness = $this->Page->get_freshness(PAGE_STATUS_APPROVED, $websites[$i]['Website']['id']);

            // Fill in the rest of the stats
            $websites[$i]['Website']['page_pending'] = $page_pending;
            $websites[$i]['Website']['page_active'] = $page_active;
            $websites[$i]['Website']['page_pending_moderation'] = $page_pending_moderation;
            $websites[$i]['Website']['freshness'] = $page_freshness;

            // Get total stats
            $total_stats['page_pending'] += $page_pending;
            $total_stats['page_active'] += $page_active;
            $total_stats['page_pending_moderation'] += $page_pending_moderation;
            $total_stats['incoming'] += $websites[$i]['Account']['incoming'];
            $total_stats['outgoing'] += $websites[$i]['Account']['outgoing'];
            $total_stats['credits'] += $websites[$i]['Account']['credits'];
            $total_stats['freshness'] += $page_freshness;

            // Get other stats
            $user = $this->User->findById($websites[$i]['Website']['user_id']);
            $websites[$i]['Website']['email'] = $user['User']['email'];

            // Get the priority
            $lp_priority = $this->account_index($websites[$i]['Account']['id'], $landing_page_priority);
            $w_priority = $this->account_index($websites[$i]['Account']['id'], $widget_priority);

            $websites[$i]['Website']['lp_priority'] = $lp_priority;
            $websites[$i]['Website']['widget_priority'] = $w_priority;
        }

        if ($count) {
            $total_stats['freshness'] = $total_stats['freshness'] / $count;
        } else {
            $total_stats['freshness'] = 0;
        }

        // Get newly inactive websites
        $inactive_websites = $this->MetricLog->get_websites(LOG_TYPE_WEBSITE_INACTIVE, $this->Date->get_yesterday());

        // Get newly active websites
        $active_websites = $this->MetricLog->get_websites(LOG_TYPE_WEBSITE_ACTIVE, $this->Date->get_yesterday());

        // Get categories for this domain
        $categories = $this->Category->domain($hub);

        $this->set("inactive_websites", $inactive_websites);
        $this->set("active_websites", $active_websites);
        $this->set("websites", $websites);
        $this->set("status", $status);
        $this->set("hub", $hub);
        $this->set("categories", $categories);
        $this->set("category", $category);
        $this->set("total_stats", $total_stats);
        $this->set("domain_component", $oHub);
        $this->set("flagged_websites", $flagged_websites);
    }

    /* Website Management function AZ292 */
    public function website($website_id) {
        $website = $this->Website->find("all", array("conditions" => array("id" => $website_id)));
        $user_id = $website[0]['Website']['user_id'];

        // Get accounts
        $accounts = $this->Account->findAllByUserId($user_id);

        // Get widgets
        $conditions = array("visible" => true,
                        "status" => array(WIDGET_STATUS_ACTIVE, WIDGET_STATUS_INACTIVE),
                        "website_id" => $website_id);
        $widgets = $this->Widget->find("all", array("conditions" => $conditions));


        // Calculate Return Rate & Acct credits
        $rate = -1;
        foreach($accounts as $account) {
            if ($account['Account']['website_id'] == $website_id ) {
                if ($account['Account']['incoming']) {
                    $rate = $account['Account']['outgoing'] / $account['Account']['incoming'];
                } else {
                    $rate = 0;
                }
                $rate *= 100;

                if (!$account['Account']['paid']) {
                    $credits = max(0, $account['Account']['credits']/10);
                } else {
                    $credits = max(0, $account['Account']['credits']/10);
                                    $credits = sprintf("$%01.2f", ($credits/100));
                }

                break;
            }
        }
        plat_assert($rate != -1);
        $website[0]['Website']['return_rate'] = round( intval($rate) ,2 ) . '%';


        /* Get pages count */
        $page_pending = $this->Page->find("count", array("conditions" =>
                                 array("status" => PAGE_STATUS_PENDING,
                                         "website_id" => $website_id)));
        $page_active = $this->Page->find("count", array("conditions" =>
                                array("status" => PAGE_STATUS_APPROVED,
                                        "website_id" => $website_id)));

        $page_pending_moderation = $this->Page->find("count", array("conditions" =>
                                        array("status" => PAGE_STATUS_PENDING_MODERATION,
                                            "website_id" => $website_id)));

        $page_social_trending = $this->RequestAction("/social_pages/website_social_pages_count/".$website_id);
        $total_articles = $this->CustomLandingPage->find(
            'count',
            array(
                'conditions' => array(
                    'status' => CI\Article::STATUS_ACTIVE,
                    'website_id' => $website_id
                )
            )
        );

        // other website stats
        $website_avg_ctr = 0;
        $website_total_incoming = 0;
        $widget_count = 0;

        foreach($widgets as $widget) {
                if ($widget['Widget']['website_id'] != $website_id ) {
                                continue;
                }
                if ($widget['Widget']['display']) {
                                $ctr = ($widget['Widget']['incoming'] / $widget['Widget']['display']) * 100;
                } else {
                                $ctr = 0;
                }
                $widget_count++;
                $website_avg_ctr += $ctr;
                $website_total_incoming += $widget['Widget']['incoming'];
        }
        if ($widget_count!=0) $website_avg_ctr /= $widget_count;

        $website[0]['Website']['ctr'] = round( $website_avg_ctr , 3) . '%';
        $website[0]['Website']['total_incoming'] = $website_total_incoming;

        $oProviderFactory = new \CI\Content\Provider\Factory;
        $this->set('providers', $oProviderFactory->getList());

        // pass them to the view
        $this->set("category", $website[0]['Website']['category']);
        $this->set("hub",  $website[0]['Website']['domain_primary']);
        $this->set("website", $website[0]['Website']);
        $this->set("website_id", $website_id);
        $this->set("credits", $credits);
        $this->set("page_pending",$page_pending);
        $this->set("page_pending_moderation",$page_pending_moderation);
        $this->set("page_active",$page_active);
        $this->set("page_social_trending",$page_social_trending);
        $this->set("total_articles", $total_articles);
    }

    /* Returns json object with the list of referrers for a website after the specified date */
    public function website_top_referrers_by_date($website_id, $date, $limit = 10) {
        Configure::write('debug', 0);
        $this->autoRender = false;

        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        // History Widgets Analytics Controller
        App::import('Controller', 'HistoryWidgetAnalytics');
        $HistoryWidgetAnalytics = new HistoryWidgetAnalyticsController;
        $HistoryWidgetAnalytics->constructClasses();

        $number_of_days = $this->Date->num_days_timestamp($date, strtotime("yesterday midnight"));
        $analytics = $HistoryWidgetAnalytics->stats_days_referrals($website_id, $number_of_days);

        $out_pages = array();
        $out = array();

        foreach ($analytics as $analytic) {

            $index = $analytic[0]['referral'];

            if (empty($out_pages[$index])) {
                $out_pages[$index]['name'] = $index;
                $out_pages[$index]['num_display'] = 0;
                $out_pages[$index]['num_ctr'] = 0;
            }
            $out_pages[$index]['num_display'] += $analytic[0]['num_display'];
            $out_pages[$index]['num_ctr'] += $analytic[0]['num_ctr'];
        }

        foreach($out_pages as $page) {
            $out[$page['num_ctr']] = $page;
        }

        krsort($out);
        echo json_encode(array_slice($out, 0, $limit));
    }


    /* Returns json object with the list of active pages for a website */
    function active_pages() {
        App::import('Helper', 'Convert');
        $Convert = new ConvertHelper();

        Configure::write('debug', 0);
        $this->autoRender = false;
        global $Pages;

        $website_id = $_POST['website_id'];
        $page = $_POST['page'];
        $date = $_POST['date'];
        $all_pages = $_POST['all_pages'];

        if($page==""||$page==0) $page=1;

        set_time_limit(60*5);
        ini_set('memory_limit', '512M');

        $this->validate_admin(ADMIN_DOMAIN);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $conditions = array("Page.status" => PAGE_STATUS_APPROVED,
                            "Page.visible" => true);
        if ($website_id) {
            $conditions["website_id"] = $website_id;
        }

        $limit = '8'; // elements per page
        if($all_pages=="1") $limit = '0';

        $offset = '';
        $pages = $this->Page->find("all",
                    array(
                        "conditions" => $conditions,
                        'limit' => $limit,
                        'page' => $page,
                        'offset'=> $offset,
                    )
                );

        // Get all their stats loaded
        //$pages = $Pages->load_page_stats($pages);

        $count = count($pages);
        $subcategories = $this->Tag->get_subcategories_active();
        $subcategories = $this->Tag->convert_names($subcategories);
        $subcategories[0] = '';
        $asset_image = new \CI\Asset\Image();

        // Switch created to number of days old
        for ($i = 0; $i < $count; $i++) {
            // preserve the creation date
            $pages[$i]['Page']['created_date'] = date('Y-m-d', strtotime($pages[$i]['Page']['created']));
            $pages[$i]['Page']['created'] = $this->Date->get_age($pages[$i]['Page']['created']);
            $pages[$i]['User']['password'] = '';

            $mod_user_info = $this->User->findAll("id='".$pages[$i]['Page']['moderator_user_id']."'");

            $pages[$i]['Page']['moderator_username'] = $mod_user_info[0]['User']['username'];
            $pages[$i]['Page']['category_name'] = $Convert->category_short($pages[$i]['Page']['category']);
            $pages[$i]['Page']['subcategory_name'] = $subcategories[$pages[$i]['Page']['subcategory']];
            $pages[$i]['Page']['image_url'] = $asset_image->getUrl(
                array(
                    'page_id' => $pages[$i]['Page']['id'],
                    'type' => \CI\Asset\Image::URL_RELATIVE,
                    'image' => $pages[$i]['Page']['image'],
                    'extra_parameters' => array(
                        't' => strtotime($pages[$i]['Page']['moderator_modified'])
                    )
                )
            );
        }

        // Rank pages by LP CTR
        // uasort($pages, "management_lp_ctr_rate");
        // $i = 0;
        // foreach ($pages as $id => $page) {
        //  $pages[$id]['Page']['lp_rank'] = $i++;
        // }

        // Rank pages by W CTR
        // uasort($pages, "management_w_ctr_rate");
        // $i = 0;
        // foreach ($pages as $id => $page) {
        //  $pages[$id]['Page']['w_rank'] = $i++;
        // }

        // Get account info
        if ($website_id) {
            $website = $this->Website->findById($website_id);
            $account = $this->Account->findByWebsiteId($website_id);
            $domain_id = $website['Website']['domain_primary'];
        } else {
            $account = NULL;
            $website = NULL;
            $domain_id = NULL;
        }

        // Mark pages to be removed
        $needs_attention_notice = 0;
        $needs_attention_warning = 0;
        $needs_attention_immediate = 0;

        /*
        for ($i = 0; $i < $count; $i++) {
            $pages[$i]['Page']['attention_level'] = $this->page_needs_attention($pages[$i], $count, $account, $domain_id);

            switch ($pages[$i]['Page']['attention_level']) {
            case ATTENTION_LEVEL_NOTICE:
                $needs_attention_notice++;
                break;
            case ATTENTION_LEVEL_WARNING:
                $needs_attention_warning++;
                break;
            case ATTENTION_LEVEL_IMMEDIATE:
                $needs_attention_immediate++;
                break;
            }

        } */

        echo json_encode($pages);
    }

    public function website_log($website_id) {
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $this->Page->bindModel(array("hasOne" => array("User" =>
                                    array('className' => 'User',
                                    'conditions' => "Page.moderator_user_id = User.id",
                                    'foreignKey' => false))));

        $pages = $this->Page->find("all", array("conditions" => array("status <>" => PAGE_STATUS_PENDING,
                                            "website_id" => $website_id),
                            "order" => "moderator_modified DESC"));

        $this->set("pages", $pages);
    }

    private function needs_attention($website, $total_stats) {
        $small_site = 50;
        $message = 0;
        $level = 0;

        $y_return_rate = $website['Website']['yrr'];

        // Check return rate
        if ($website['Website']['yincoming'] &&
            $y_return_rate < $website['Account']['rate']) {
            $message |= ATTENTION_RETURN_RATE;
            $level = max($level, ATTENTION_LEVEL_WARNING);
        }

        // Check if not enough landing page impressions given the rolling landing page CTR
        if ($y_return_rate < $website['Account']['rate']) {
            // Total clicks we need for SLA
            $clicks_needed = $website['Account']['rate'] * $website['Website']['yincoming'];

            // Widget return is responsible for the first click
            $w_clicks_needed = $website['Website']['yincoming'];

            // LP is responsible for the extra clicks
            $lp_clicks_needed = $clicks_needed - $w_clicks_needed;

            // Approx clicks due to widgets
            $w_clicks_recv = $website['Website']['y_w_imp'] * $website['Website']['y_w_ctr'];

            // Approx clicks due to LP
            $lp_clicks_recv = $website['Website']['y_lp_imp'] * $website['Website']['y_lp_ctr'];

            // See if we need to decrement the number of LP clicks needed because W is making up for it
            $w_clicks_surplus = $w_clicks_recv - $w_clicks_needed;
            if ($w_clicks_surplus > 0) {
                $lp_clicks_needed -= $w_clicks_surplus;
            }

            // See if we need to decrement the number of W clicks needed because LP is making up for it
            $lp_clicks_surplus = $lp_clicks_recv - $lp_clicks_needed;
            if ($lp_clicks_surplus > 0) {
                $w_clicks_needed -= $lp_clicks_surplus;
            }

            // See if we have enough W impressions
            if ($w_clicks_needed > $w_clicks_recv &&
                ($message & ATTENTION_W_PERFORMANCE) == 0) {
                    $message |= ATTENTION_ENOUGH_WIDGET_IMPRESSIONS;
                    $level = max($level, ATTENTION_LEVEL_WARNING);
            }

            // See if we have enough LP impressions
            if ($lp_clicks_needed > $lp_clicks_recv &&
                ($message & ATTENTION_LP_PERFORMANCE) == 0) {
                $message |= ATTENTION_ENOUGH_LANDING_PAGE_IMPRESSIONS;
                $level = max($level, ATTENTION_LEVEL_WARNING);
            }

        }

        // Update total stats
        if ($total_stats['r_lp_imp'] && $total_stats['r_lp_ctr']) {
            $total_stats['r_lp_click_rate'] = $total_stats['r_lp_ctr'] / $total_stats['r_lp_imp'];
        }

        if ($total_stats['r_w_imp'] && $total_stats['r_w_ctr']) {
            $total_stats['r_w_click_rate'] = $total_stats['r_w_ctr'] / $total_stats['r_w_imp'];
        }

        // Check if LP CTR is low
        if (($message & ATTENTION_ENOUGH_LANDING_PAGE_IMPRESSIONS) == 0 &&
            $website['Website']['yincoming'] &&
            $website['Website']['y_lp_imp'] > 200 &&
            $website['Website']['y_lp_ctr'] <
            ($total_stats['r_lp_click_rate'] * .66)) {
            $message |= ATTENTION_LP_PERFORMANCE;
            $level = max($level, ATTENTION_LEVEL_NOTICE);
        }

        // Check if W CTR is low
        if (($message & ATTENTION_ENOUGH_WIDGET_IMPRESSIONS) == 0 &&
            $website['Website']['yincoming'] &&
            $website['Website']['y_w_imp'] > 1000 &&
            $website['Website']['y_w_ctr'] <
            ($total_stats['r_w_click_rate'] * .66)) {
            $message |= ATTENTION_W_PERFORMANCE;
            $level = max($level, ATTENTION_LEVEL_NOTICE);
        }

        // Downgrade any small site
        if ($website['Website']['yincoming'] < $small_site &&
            $level == ATTENTION_LEVEL_WARNING) {
            $level = ATTENTION_LEVEL_NOTICE;
        }

        // See if there are pages pending moderation
        if ($website['Website']['page_pending_moderation']) {
            $message |= ATTENTION_PENDING_MODERATION;
            if ($website['Website']['yincoming'] < $small_site) {
                $level = max($level, ATTENTION_LEVEL_WARNING);
            } else {
                $level = max($level, ATTENTION_LEVEL_IMMEDIATE);
            }
        }

        if (!$website['Website']['page_active'] &&
            $website['Website']['page_pending']) {
            $message |= ATTENTION_PENDING_PAGES;
            $level = max($level, ATTENTION_LEVEL_IMMEDIATE);
        }

        //      echo $website['Website']['name'].": ".($total_stats['r_lp_click_rate'] * .75)." - ".$website['Website']['y_r_lp_ctr']."<br>";

        $out['message'] = $message;
        $out['level'] = $level;
        return $out;
    }

    function page_search() {
        $this->layout = 'backend2';
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
    }

    function page_performers($limit = 10, $domain = 0, $category = 0) {
        set_time_limit(60*5);

        $this->validate_admin(ADMIN_DOMAIN);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $conditions = array("num_display >" => $this->Setting->get('WIDGET_SIGNIFICANCE_IMPRESSION_THRESHOLD'),
                            "visible" => true);

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        if ($domain) {
            $bit = $oHub->idToBit($domain);
            $conditions = array("domain_bitfield & {$bit}",
                                "num_display >" => $this->Setting->get('WIDGET_SIGNIFICANCE_IMPRESSION_THRESHOLD'),
                                "visible" => true
                                );
        } else {
            $conditions = array("num_display >" => $this->Setting->get('WIDGET_SIGNIFICANCE_IMPRESSION_THRESHOLD'),
                                "visible" => true);

        }


        /* Get Top Performers */
        $analytics = $this->WidgetAnalytic->find("all", array("conditions" =>   $conditions,
                                                                    "order" => "(num_ctr / num_display) DESC",
                                                                    "group" => "page_id",
                                                                    "limit" => $limit
                                                                    )
                                                     );
        $pages_top = $this->populate_pages($analytics);

        /* Get Bottom Performers */
        $analytics = $this->WidgetAnalytic->find("all", array("conditions" =>   $conditions,
                                                                    "order" => "(num_ctr / num_display) ASC",
                                                                    "group" => "page_id",
                                                                    "limit" => $limit
                                                                    )
                                                     );
        $pages_bottom = $this->populate_pages($analytics);

        $pages[] = $pages_top;
        $pages[] = $pages_bottom;

        $this->set("limit", $limit);
        $this->set("pages_group", $pages);
        $this->set("domain_component", $oHub);
        $this->set("hub", $domain);
        $this->set("category", $category);
    }

    private function populate_pages($analytics) {
        $count = 0;
        $pages = array();
        foreach ($analytics as $analytic) {
            $page = $this->Page->findById($analytic['WidgetAnalytic']['page_id']);
            $website = $this->Website->findById($page['Page']['website_id']);
            $user = $this->User->findById($page['Page']['moderator_user_id']);
            $pages[$count]['Page'] = $page['Page'];
            $pages[$count]['WidgetAnalytic'] = $analytic['WidgetAnalytic'];
            $pages[$count]['User'] = $user['User'];
            $pages[$count]['Website'] = $website['Website'];
            $pages[$count]['Page']['created'] = $this->Date->get_age($pages[$count]['Page']['created']);

            $count++;
        }

        return $pages;
    }

    function pages($website_id = null) {
        global $Pages;
        set_time_limit(60*10);
        ini_set('memory_limit', '1024M');

        $this->validate_admin(ADMIN_DOMAIN);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $conditions = array("Page.status" => PAGE_STATUS_APPROVED,
                            "Page.visible" => true);
        if ($website_id) {
            $conditions["website_id"] = $website_id;
        }

        /* Get all the pages */
        $this->Page->bindModel(array("hasOne" => array("User" =>
                                    array('className' => 'User',
                                    'conditions' => "Page.moderator_user_id = User.id",
                                    'foreignKey' => false))));
        $pages = $this->Page->find("all", array("conditions" => $conditions));

        // Get all their stats loaded
        $pages = $Pages->load_page_stats($pages);

        $count = count($pages);

        // Switch created to number of days old
        for ($i = 0; $i < $count; $i++) {
            $pages[$i]['Page']['created'] = $this->Date->get_age($pages[$i]['Page']['created']);

        }

        // Rank pages by LP CTR
        uasort($pages, "management_lp_ctr_rate");
        $i = 0;
        foreach ($pages as $id => $page) {
            $pages[$id]['Page']['lp_rank'] = $i++;

        }

        // Rank pages by W CTR
        uasort($pages, "management_w_ctr_rate");
        $i = 0;
        foreach ($pages as $id => $page) {
            $pages[$id]['Page']['w_rank'] = $i++;

        }

        // Get account info
        if ($website_id) {
            $website = $this->Website->findById($website_id);
            $account = $this->Account->findByWebsiteId($website_id);
            $domain_id = $website['Website']['domain_primary'];
        } else {
            $account = NULL;
            $website = NULL;
            $domain_id = NULL;
        }

        // Mark pages to be removed
        $needs_attention_notice = 0;
        $needs_attention_warning = 0;
        $needs_attention_immediate = 0;
        $oImageAsset = new \CI\Asset\Image();

        for ($i = 0; $i < $count; $i++) {
            $pages[$i]['Page']['attention_level'] = $this->page_needs_attention($pages[$i], $count, $account, $domain_id);
            switch ($pages[$i]['Page']['attention_level']) {
            case ATTENTION_LEVEL_NOTICE:
                $needs_attention_notice++;
                break;
            case ATTENTION_LEVEL_WARNING:
                $needs_attention_warning++;
                break;
            case ATTENTION_LEVEL_IMMEDIATE:
                $needs_attention_immediate++;
                break;
            }

            $pages[$i]['Page']['image_url'] = $oImageAsset->getUrl(
                array(
                    'page_id' => $pages[$i]['Page']['id'],
                    'type' => \CI\Asset\Image::URL_CROP_RELATIVE,
                    'image' => $pages[$i]['Page']['image'],
                    'extra_parameters' => array(
                        't' => strtotime($pages[$i]['Page']['moderator_modified'])
                    ),
                    'width' => 140,
                    'height' => 80
                )
            );
        }

        // $website = $this->Website->findById($website_id);

        $impressions_stats = $this->Page->get_lifetime_impressions($website_id);
        $this->set("impressions_stats", $impressions_stats);
        $this->set("pages", $pages);
        $this->set("website_id", $website_id);
        $this->set("website", $website);
        $this->set("needs_attention_notice", $needs_attention_notice);
        $this->set("needs_attention_warning", $needs_attention_warning);
        $this->set("needs_attention_immediate", $needs_attention_immediate);

    }

    private function page_needs_attention($page, $count, $account, $domain_id) {
        $poor_widget = 0;
        $poor_lp = 0;

        // Make sure it's had some run time
        if ($page['Page']['created'] < MANAGEMENT_WIDGET_ROLLING_DAYS ||
            $page['Page']['created'] < MANAGEMENT_LANDING_PAGE_ROLLING_DAYS) {
            return 0;
        }

        // Get threshold. Divide credit number by 10 since it comes in Database form
        if ($account && $this->Setting->tunable('LANDING_PAGE_PENALIZE', $domain_id)) {
            $lp_penalize_threshold = ($this->Setting->tunable('LANDING_PAGE_PENALIZE_THRESHOLD', $domain_id)) / 10;
        } else {
            $lp_penalize_threshold = -1;
        }

        // Check the LP performance
        if ($lp_penalize_threshold > $account['Account']['credits'] &&
            $page['Page']['lp_impressions'] &&
            $page['Page']['lp_ctr'] &&
            !$page['Page']['lp_rolling_ctr']) {
            // Page has been removed from circulation on LP
            $poor_lp = 1;
        }

        // Get threshold. Divide credit number by 10 since it comes in Database form
        if ($account && $this->Setting->tunable('WIDGET_PENALIZE', $domain_id)) {
            $w_penalize_threshold = ($this->Setting->tunable('WIDGET_PENALIZE_THRESHOLD', $domain_id)) / 10;
        } else {
            $w_penalize_threshold = -1;
        }

        if ($w_penalize_threshold > $account['Account']['credits'] &&
            $page['Page']['widget_impressions'] &&
            $page['Page']['widget_ctr'] &&
            !$page['Page']['widget_rolling_ctr']) {
            // Page has been removed from circulation on Widget
            $poor_widget = 1;
        }

        if ($poor_widget && $poor_lp) {
            return ATTENTION_LEVEL_IMMEDIATE;
        } else if ($poor_widget || $poor_lp) {
            return ATTENTION_LEVEL_WARNING;
        }


        if ($page['Page']['lp_rank'] > (0.7 * $count) &&
            $page['Page']['w_rank'] > (0.7 * $count)) {
            return ATTENTION_LEVEL_WARNING;
        }

        return 0;
    }

    function landing_page($domain = null, $status = -1) {
        $this->layout = 'backend2';
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $conditions = array("category" => ANALYTIC_LANDING_PAGE_LAYOUT);
        if ($domain) {
            $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
            $conditions['domain_bitfield'] = $oHub->idToBit($domain);
        }
        if ($status != -1) {
            $conditions['visible'] = $status;
        }
        $analytics = $this->Analytic->find("all", array("conditions" => $conditions));

        $this->set("analytics", $analytics);
        $this->set("analytic_status", $status);
    }

    function landing_page_engine($domain = null) {
        $this->layout = 'backend2';
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $conditions = array("category" => ANALYTIC_LANDING_PAGE_ENGINE);

        if ($domain) {
            $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
            $conditions['domain_bitfield'] = $oHub->idToBit($domain);
        }
        $analytics = $this->Analytic->find("all", array("conditions" => $conditions));

        $this->set("analytics", $analytics);
    }

    function export_report_csv(){
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        set_time_limit(60*60);

        $this->layout = 'ajax';
        if ($_POST['domains'] == "") {
            //set default domain to crowdignite, just so we don't generate errors when trying to run a report for no domains
            $_POST['domains'] = 0;
        }
        $this->report();
    }

    function report() {
        if ($this->layout !== 'ajax') {
            $this->layout = 'backend2';
        }

        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        set_time_limit(60*60);
        ini_set('memory_limit', '512M');

        // looking for the first 10 websites to fill the chosen ($websites_for_chosen)
        if(isset($_POST["ReportByWebsites"]["website_chosen"]) and is_array($_POST["ReportByWebsites"]["website_chosen"]) and count($_POST["ReportByWebsites"]["website_chosen"]) > 0){
            // website ids to look for to no include in the chosen because them are already selected
            $website_ids = $_POST["ReportByWebsites"]["website_chosen"];

            $website_ids_string = "";
            foreach ($website_ids as $id) {
                $website_ids_string .= intval($id).",";
            }
            $website_ids_string = substr($website_ids_string,0,-1);
        } else {
            $website_ids = array();
            $website_ids_string = null;
        }

        // looking for 10 websites that are not the selected
        $params = array();
        $params['fields'] = array('Website.id', 'Website.name');

        if (!is_null($website_ids_string)) {
            $params['conditions'] = array(
                "Website.id not in ($website_ids_string)" /* doesn't want to work: "Website.id !=" => $website_ids*/,
            );
        }
        $params['limit'] = 10;

        $websites_for_chosen = $this->Website->find('list', $params);
        // Looking for the selected websites
        if(count($website_ids) > 0){
            $website_ids = $_POST["ReportByWebsites"]["website_chosen"];

            $selected_websites_for_chosen = $this->Website->find('list', array(
                'fields' => array('Website.id', 'Website.name'), //array of field names
                'conditions' => Array(
                    "Website.id" => $website_ids,
                )
            ));

            // merging selected websites with the 10 not selected websites.
            foreach ($selected_websites_for_chosen as $id => $website) {
                if (!isset($websites_for_chosen[$id])) {
                    $websites_for_chosen[$id] = $website;
                }
            }

        } else {
            $selected_websites_for_chosen = array();
        }

        // Depending the report_type, will be the report: ...
        if (isset($_POST["filter_type"]) and $_POST["filter_type"] == "byHub") {
            //reportin by Hub.
            if (isset($_POST['date_start'])) {
                $date_start = $this->Date->day_start($_POST['date_start']);
                $date_end = $this->Date->day_end($_POST['date_end']);

                $_POST['domains'] = empty($_POST['domains']) ? '0' : $_POST['domains'];
                $domains = explode(",", $_POST['domains']);

                // Show website details
                //undefined index warning for websites crashes the export function
                if (isset($_POST['websites']) && $_POST['websites'] == 1) {
                    $daily_breakdown = isset($_POST["daily_breakdown"]);
                    $this->report_websites($domains, $date_start, $date_end, $daily_breakdown);
                } else {
                    $this->set('websites', array());
                }


                $this->report_by_hubs($domains, $date_start, $date_end);

                $this->set("date_start", date("m-d-Y", strtotime($date_start)));
                $this->set("date_end", date("m-d-Y", strtotime($date_end)));
                $this->set("domain_ids", $domains);
            } else {
                $this->set("date_start", "");
                $this->set("date_end", "");
            }
        } else if (isset($_POST["filter_type"]) and $_POST["filter_type"] == "byWebsite") {
            //reporting by Website.
            if (isset($_POST['date_start'])) {
                $date_start = $this->Date->day_start($_POST['date_start']);
                $date_end = $this->Date->day_end($_POST['date_end']);

                $daily_breakdown = isset($_POST["daily_breakdown"]);
                $this->report_by_websites($_POST["ReportByWebsites"]["website_chosen"], $date_start, $date_end, $daily_breakdown);

                $this->set("date_start", date("m-d-Y", strtotime($date_start)));
                $this->set("date_end", date("m-d-Y", strtotime($date_end)));
                $this->set("domain_ids", null);
            } else {
                $this->set("date_start", "");
                $this->set("date_end", "");
            }
        }

        // re-sending form data to re-fill the form
        $data = $_POST;
        if (isset($data['domains'])){
            $data['domains'] = explode(",", $data['domains']);
        }else{
            $data['domains'] = array();
        }
        $this->set("data", $data);
        $this->set("websites_for_chosen", $websites_for_chosen);

        $this->loadModel('ReportSetting');
        $user = $this->Session->read('User');
        $reports = $this->ReportSetting->find(
            'list',
            array(
                'fields'     => array('id', 'name'),
                'conditions' => array('user_id' => $user['id']),
            )
        );

        $this->set("report_list_names", $reports);
    }

    function load_report() {
        $this->validate_admin(ADMIN_FULL);
        $this->autoRender = false;

        if (!isset($_POST['id'])) {
            return false;
        }

        $this->loadModel('ReportSetting');

        $id   = (int) $_POST['id'];
        $user = $this->Session->read('User');
        $report = $this->ReportSetting->find(
            'first',
            array(
                'fields' => array(
                    'id',
                    'name',
                    'value',
                ),
                'conditions' => array(
                    'id' => $id,
                    'user_id' => $user['id']
                ),
            )
        );
        if (!empty($report['ReportSetting']['value'])) {
            $report = json_decode($report['ReportSetting']['value'], true);
            if (!empty($report['ReportByWebsites']['website_chosen'])) {
                $websites = $this->Website->find(
                    'list',
                    array(
                        'fields' => array(
                            'id',
                            'name',
                        ),
                        'conditions' => array(
                            'id' => $report['ReportByWebsites']['website_chosen'],
                        )
                    )
                );
                if (!empty($websites)) {
                    $report['ReportByWebsites']['website_chosen'] = $websites;
                }
            }
            $return = $report;
        } else {
            $return = false;
        }

        echo json_encode($return);
    }

    function report_name_list() {
        $this->validate_admin(ADMIN_FULL);
        $this->autoRender = false;

        $user = $this->Session->read('User');

        $this->loadModel('ReportSetting');

        $reports = $this->ReportSetting->find(
            'list',
            array(
                'fields'     => array('id', 'name'),
                'conditions' => array('user_id' => $user['id']),
            )
        );

        echo json_encode($reports);
    }

    function delete_report() {
        $this->validate_admin(ADMIN_FULL);
        $this->autoRender = false;

        $user     = $this->Session->read('User');
        $response = array();

        if (isset($_POST['id'])) {
            $id = (int) $_POST['id'];
            $this->loadModel('ReportSetting');
            $conditions = array(
                'id'      => $id,
                'user_id' => $user['id'],
            );
            if (!$this->ReportSetting->deleteAll($conditions)) {
                $response = array('error' => 'Error trying to delete the report settings');
            }
        } else {
            $response = array('error' => 'Report id not defined');
        }

        echo json_encode($response);
    }

    function save_report() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
        $this->autoRender = false;

        $result = false;

        set_time_limit(60*60);

        $report_name = isset($_POST['report_name']) ? strtolower($_POST['report_name']) : '';
        $report_id = isset($_POST['report_id']) ? $_POST['report_id'] : -1;

        if (isset($_POST['filter_type'])) {
            $report_factory = new CI\Report\Setting\Factory();
            $report_settings = $report_factory->createReportSetting($_POST['filter_type']);
            unset($report_factory);

            $report_settings->populate($_POST);
            $value = $report_settings->toString();

            $this->loadModel('ReportSetting');

            $user = $this->Session->read('User');

            $report = array(
                'ReportSetting' => array(
                    'user_id' => (int) $user['id'],
                    'name'    => $report_name,
                    'value'   => $value,
                    'created' => date('d-m-Y'),
                )
            );

            if ($report_id != -1) {
                $report['ReportSetting']['id'] = $report_id;
            }

            if ($this->ReportSetting->save($report)) {
                $result = array('id' => $this->ReportSetting->id);
            } else {
                $result = array('error' => 'Error trying to save the configuration');
            }
        } else {
            $result = array('error' => 'Type of report not defined');
        }

        echo json_encode(
            $result
        );
    }

    protected function report_websites($domains, $date_start, $date_end, $daily_breakdown = false) {
        $websites = $this->Website->find(
            'list',
            array(
                'fields' => array('id', 'name'),
                'conditions' => array(
                    'domain_primary' => $domains,
                    'visible'        => 1,
                    'status'         => array(
                        WEBSITE_STATUS_ACTIVE,
                        WEBSITE_STATUS_INACTIVE,
                        WEBSITE_STATUS_NEW,
                        WEBSITE_STATUS_TRANSFER,
                    ),
                ),
            )
        );

        $this->report_by_websites(array_keys($websites), $date_start, $date_end, $daily_breakdown);
    }

    protected function report_by_websites($websites = null, $date_start = null, $date_end = null, $daily_breakdown = false) {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $stats = $this->Stats->getByWebsites($websites, $date_start, $date_end);

        $websites = $this->Website->find('all', array(
            "conditions" => array(
                'id'      => $websites,
                'visible' => 1,
            ),
        ));

        $website_stats = array();
        $empty_stats   = array_fill_keys(array('impressions', 'clicks', 'incoming', 'outgoing', 'credits'), 0);

        if ($daily_breakdown) {
            foreach ($stats as $stat) {
                $stat['stats']    = isset($stat['stats']) ? $stat['stats'] : array();
                $stat['websites'] = isset($stat['websites']) ? $stat['websites'] : array();
                $stat[0]          = isset($stat[0]) ? $stat[0] : array();
                $stat             = array_merge($stat[0], $stat['stats'], $stat['websites']);

                $website_id = $stat['website_id'];
                $date = date('M d', strtotime($stat['date']));
                if (!isset($website_stats[$date][$website_id])) {
                    $website_stats[$date][$website_id] = $empty_stats;
                }
                $website_stats[$date][$website_id]['impressions'] += (int) $stat['widget_impressions'];
                $website_stats[$date][$website_id]['clicks']      += (int) $stat['widget_traffic_from'];
                $website_stats[$date][$website_id]['incoming']    += (int) $stat['traffic_from'];
                $website_stats[$date][$website_id]['outgoing']    += (int) $stat['traffic_to'];
                // we only store the last credits
                $website_stats[$date][$website_id]['credits']     = (float) $stat['credits'];
            }
            $daily_websites = array();
            foreach ($website_stats as $date => $stats) {
                foreach ($websites as $website) {
                    $id = $website['Website']['id'];

                     if (!isset($stats[$id])) {
                        $stats[$id] = $empty_stats;
                    }

                    $website['Account']['incoming'] = $stats[$id]['incoming'];
                    $website['Account']['outgoing'] = $stats[$id]['outgoing'];
                    $website['Account']['credits']  = $stats[$id]['credits'];
                    $website['Widget']['incoming']  = $stats[$id]['clicks'];
                    $website['Widget']['display']   = $stats[$id]['impressions'];
                    $daily_websites[$date][] = $website;
                }
            }

            $websites = $daily_websites;
        } else {
            $accounts = $this->Account->find('all', array(
                'fields' => array('website_id', 'incoming', 'outgoing'),
                'conditions' => array(
                    'id' => Set::classicExtract($websites, '{n}.Website.account_id'),
                ),
            ));

            foreach ($stats as $stat) {
                $stat['stats']    = isset($stat['stats']) ? $stat['stats'] : array();
                $stat['websites'] = isset($stat['websites']) ? $stat['websites'] : array();
                $stat[0]          = isset($stat[0]) ? $stat[0] : array();
                $stat             = array_merge($stat[0], $stat['stats'], $stat['websites']);

                $website_id = $stat['website_id'];
                if (!isset($website_stats[$website_id])) {
                    $website_stats[$website_id] = $empty_stats;
                }
                $website_stats[$website_id]['impressions'] += (int) $stat['widget_impressions'];
                $website_stats[$website_id]['clicks']      += (int) $stat['widget_traffic_from'];
                $website_stats[$website_id]['incoming']    += (int) $stat['traffic_from'];
                $website_stats[$website_id]['outgoing']    += (int) $stat['traffic_to'];
                // we only store the last credits in the dates
                $website_stats[$website_id]['credits']     = (float) $stat['credits'];
            }
            for ($i = 0, $total = count($websites); $i < $total; $i++) {
                $id = $websites[$i]['Website']['id'];
                $account = Set::extract($accounts, "/Account[website_id={$id}]");

                if (!isset($website_stats[$id])) {
                    $website_stats[$id] = $empty_stats;
                }

                $websites[$i]['Account']['incoming'] = $website_stats[$id]['incoming'];
                $websites[$i]['Account']['outgoing'] = $website_stats[$id]['outgoing'];
                $websites[$i]['Account']['credits']  = $website_stats[$id]['credits'];
                $websites[$i]['Widget']['incoming']  = $website_stats[$id]['clicks'];
                $websites[$i]['Widget']['display']   = $website_stats[$id]['impressions'];
                $websites[$i]['Total']['incoming']   = empty($account[0]['Account']['incoming']) ? 0 : $account[0]['Account']['incoming'];
                $websites[$i]['Total']['outgoing']   = empty($account[0]['Account']['outgoing']) ? 0 : $account[0]['Account']['outgoing'];
            }
        }

        $this->set("websites", $websites);
    }

    protected function report_by_hubs($domains, $date_start, $date_end)
    {
        $credits = array();
        $stats   = $this->Stats->getByHubs($domains, $date_start, $date_end);
        $widget_clicks = $widget_impressions = $incoming = $outgoing = $tpm = 0.0;
        foreach ($stats as $stat) {
            $stat['stats'] = isset($stat['stats']) ? $stat['stats'] : array();
            $stat[0]       = isset($stat[0]) ? $stat[0] : array();
            $stat          = array_merge($stat[0], $stat['stats']);

            $widget_clicks         += (int) $stat['widget_traffic_from'];
            $widget_impressions    += (int) $stat['widget_impressions'];
            $incoming              += (int) $stat['traffic_from'];
            $outgoing              += (int) $stat['traffic_to'];
            $credits[$stat['hub']] = (float) $stat['credits'];
        }

        $this->set("widget_clicks", $widget_clicks);
        $this->set("credits", array_sum($credits));
        $this->set("widget_impressions", $widget_impressions);
        //had to add validation for 0 here, the notice this function generates when impressions == 0 breaks the export
        $this->set("widget_ctr", $widget_impressions != 0 ? $widget_clicks / $widget_impressions * 100 : 0);
        //had to add validation for 0 here, the notice this function generates when incoming == 0 breaks the export
        $this->set("return_rate", $incoming != 0 ? $outgoing / $incoming * 100 : 0);
        $this->set("tpm", $widget_impressions == 0 ? 0 : 1000 * ($outgoing / $widget_impressions));
    }

    function widget_analytics($website_id, $link_type = -1) {
        set_time_limit(60);

        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $website_in = $this->Website->findById($website_id);

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $analytics = $this->WidgetAnalytic->get_by_website($website_id, $oHub->idToBit($website_in['Website']['domain_primary']), $link_type);

        $count = count($analytics);

        for ($i = 0; $i < $count; $i++) {
            $page = $this->Page->findById($analytics[$i]['WidgetAnalytic']['page_id']);
            $website = $this->Website->findById($page['Page']['website_id']);

            $key = $this->get_analytic_key($analytics[$i]['WidgetAnalytic']['type'], $analytics[$i]['WidgetAnalytic']['key']);

            $analytics[$i]['Page']    = $page['Page'];
            $analytics[$i]['Website'] = $website['Website'];
            $analytics[$i]['Key']     = $key;
        }

        $this->set("analytics", $analytics);
        $this->set("website", $website_in);
    }

    function landing_page_analytics($intersect_id, $domain_id, $link_type = LINK_TYPE_ALL) {
        global $LandingPageEngine;

        set_time_limit(60*5);

        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        // Get all the current links for a website
        $links = array();
        $featured_links = array();

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $domain_bit = $oHub->idToBit($domain_id);
        $intersect = $this->Intersects->get_intersect_by_id($intersect_id);

        $extra_fields = array("weight AS weight_ctr", "weight_vw AS weight_ctp");
        $analytics = $this->LandingPageAnalytic->find_by_intersect($intersect, $domain_bit, $link_type, $extra_fields);

        $count = count($analytics);
        for ($i = 0; $i < $count; $i++) {
            $page = $this->Page->findById($analytics[$i]['LandingPageAnalytic']['page_id']);
            $website = $this->Website->findById($page['Page']['website_id']);

            $key = $this->get_analytic_key($analytics[$i]['LandingPageAnalytic']['type'], $analytics[$i]['LandingPageAnalytic']['key']);

            $analytics[$i]['LandingPageAnalytic']['ctr'] = $LandingPageEngine->calculate_ctr($analytics[$i]);
            $analytics[$i]['Page'] = $page['Page'];
            $analytics[$i]['Website'] = $website['Website'];
            $analytics[$i]['Key'] = $key;
        }

        // Get categories for this domain
        $categories = $this->Category->domain($domain_id);

        $this->set("analytics", $analytics);
        $this->set("intersect_id", $intersect_id);
        $this->set("domain_component", $oHub);
        $this->set("hub", $domain_id);
        $this->set("intersect", $this->Intersects);
        $this->set("categories", $categories);
    }

    private function get_analytic_key($type, $key_in) {
        switch ($type) {
            case LINK_TYPE_BASIC:
                $key = NULL;
                break;
            case LINK_TYPE_CONTEXTUAL:
            case LINK_TYPE_SIMILAR:
                $key = $this->Page->findById($key_in);
                break;
            case LINK_TYPE_SUBCATEGORY:
            case LINK_TYPE_TAG:
                $key = $this->Tag->findById($key_in);
                break;
            default:
                plat_assert(0, $type);
        }

        return $key;
    }

    function widget_analytics_website($website_id) {

        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $website_in = $this->Website->findById($website_id);

        $analytics = $this->RequestAction("/widget_analytics/find_all_for_website/".$website_id);

        foreach ($analytics as $analytic) {

            $index = $analytic['WidgetAnalytic']['shown_website_id'];

            if (empty($out_pages[$index])) {
                $website = $this->Website->findById($analytic['WidgetAnalytic']['shown_website_id']);
                $out_pages[$index]['Website'] = $website['Website'];

                $out_pages[$index]['num_display'] = 0;
                $out_pages[$index]['num_ctr'] = 0;
            }
            $out_pages[$index]['num_display'] += $analytic['WidgetAnalytic']['num_display'];
            $out_pages[$index]['num_ctr'] += $analytic['WidgetAnalytic']['num_ctr'];

        }

        $this->set("analytics", $out_pages);
        $this->set("website", $website_in);
    }

    function widget_pages_analytics($website_id, $widget_id) {
        set_time_limit(60);

        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $website_in = $this->Website->findById($website_id);
        $analytics  = $this->WidgetAnalytic->get_pages_by_website($website_id, $widget_id);

        $this->set("analytics", $analytics);
        $this->set("website", $website_in);
    }

    function moderation($click_stats = 0) {
        global $Pages;

        set_time_limit(60*60);
        ini_set('memory_limit', '1024M');

        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $users = $this->User->moderators();

        $count = count($users);

        for ($i = 0; $i < $count; $i++) {
            /* Get pages */
            $pages = $this->Page->find("all",
                array("conditions" => array("moderator_user_id" => $users[$i]['User']['id'],
                    "moderator_modified >=" => $this->Date->days_ago(31)
                    ),
                    "order" => "moderator_modified DESC"
                    ));
            $users[$i]['Pages'] = $pages;

            /* Get age of moderation */
            $ages = array("Today" => 0,
                "Yesterday" => 0,
                "3day" => 0,
                "7day" => 0,
                "30day" => 0
                );
            foreach ($pages as $page) {
                $age = $this->Date->age($page['Page']['moderator_modified']);

                if ($age == 0) {
                    $ages['Today']++;
                }
                if ($age == 1) {
                    $ages['Yesterday']++;
                }
                if ($age <= 3) {
                    $ages['3day']++;
                }
                if ($age <= 7) {
                    $ages['7day']++;
                }
                if ($age <= 30) {
                    $ages['30day']++;
                }

                if ($age <= MAX_ROLLING_STATS_DAYS) {
                    $page_stats[] = $page;
                }
            }
            $users[$i]['Page_Age'] = $ages;

            if ($click_stats) {
                /* Get Stats */
                $pages = $Pages->load_page_stats($pages);
                $w_ctr = 0;
                $w_imp = 0;
                $lp_ctr = 0;
                $lp_imp = 0;
                foreach ($pages as $page) {
                    plat_assert($page['Page']['id']);

                    $age = $this->Date->age($page['Page']['moderator_modified']);

                    // Widget Stats
                    //$days = min($age, MANAGEMENT_WIDGET_ROLLING_DAYS);
                    $days = MANAGEMENT_WIDGET_ROLLING_DAYS;
                    $stats = $this->RequestAction("/history_widget_analytics/stats_days/".$page['Page']['id']."/0/".$days);
                    foreach ($stats as $stat) {
                        $w_ctr += $stat['WidgetAnalytic']['num_ctr'];
                        $w_imp += $stat['WidgetAnalytic']['num_display'];
                    }

                    // LP Stats
                    //$days = min($age, MANAGEMENT_LANDING_PAGE_ROLLING_DAYS);
                    $days = MANAGEMENT_LANDING_PAGE_ROLLING_DAYS;
                    $stats = $this->RequestAction("/history_landing_page_analytics/stats_days_landing_page/".$page['Page']['id']."/".$days);
                    $lp_ctr += $stats['num_ctr'];
                    $lp_imp += $stats['num_display'];
                }

                $users[$i]['Stats']['w_ctr'] = $w_imp ? ($w_ctr / $w_imp) : 0;
                $users[$i]['Stats']['lp_ctr'] = $lp_imp ? ($lp_ctr / $lp_imp) : 0;
            } else {
                $users[$i]['Stats']['w_ctr'] = "-";
                $users[$i]['Stats']['lp_ctr'] = "-";
            }
        }

        $this->set("click_stats", $click_stats);
        $this->set("users", $users);
    }

    function compete() {
        $number_top = 20;

        $website_conditions = array("status" => WEBSITE_STATUS_ACTIVE);

        $websites = $this->Website->find("all", array("conditions" => $website_conditions));

        $count = count($websites);
        $yesterday = $this->Date->yesterday();

        for ($i = 0; $i < $count; $i++) {
            // Find out if still active or not
            $yesterday_stats = $this->RequestAction("/history_credits/stats_day/".$websites[$i]['Website']['account_id']."/".$yesterday);

            $websites[$i]['Website']['yin'] = $yesterday_stats['incoming'];
        }

        uasort($websites, "management_yin");
        $count = min(count($websites), $number_top);

        $websites = array_splice($websites, 0, $count);

        for ($i = 0; $i < $count; $i++) {
            $url = stripslashes($websites[$i]['Website']['url']);
            $uv = $this->CompeteStore->get($url);
            if ($uv === false) {
                $uv = $this->Compete->get_uv($url);
                $this->CompeteStore->set($url, $uv);
            }
            $websites[$i]['Website']['uv'] = $uv;
        }

        $this->set("websites", $websites);
    }

    function inventory($domain_id = DOMAIN_ID_ALL, $category = 0) {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $this->set("domain_component", $oHub);
        $this->set("domain", $domain_id);
        $this->set("category", $category);
    }

    function home() {
        if ($this->is_full_admin()) {
            $this->redirect("/admin");
        } else {
            $this->Session->activate();
            $user = $this->Session->read('User');
            $user = $this->User->findById($user['id']);
            $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
            $bits = $oHub->getAllBits($user['User']['domain_bitfield']);
            $hub_id = $oHub->bitToId($bits[0]);
            $aHub = $oHub->getById($hub_id);
            $this->redirect("/admin/websites/report#". $oHub->getFriendlyUrlName($aHub['name']));
        }
    }

    function refers() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $refers = $this->Account->find("all", array("conditions" => array("refer_id >" => 0,
                                                                            "refer_transfer_rate >" => 0)));

        $yesterday = $this->Date->yesterday();
        $count = count($refers);
        for ($i = 0; $i < $count; $i++) {
            $website = $this->Website->findById($refers[$i]['Account']['website_id']);
            $yesterday_stats = $this->RequestAction("/history_credits/stats_day/".$refers[$i]['Account']['id']."/".$yesterday);
            $refers[$i]['Account']['yincoming'] = $yesterday_stats['incoming'];
            $refers[$i]['Website'] = $website['Website'];

            $website_referer = $this->Website->findByAccountId($refers[$i]['Account']['refer_id']);
            $refers[$i]['Website_referer'] = $website_referer['Website'];
        }

        $this->set("refers", $refers);
    }

    private function account_index($account_id, $accounts) {
        if (isset($accounts[$account_id])) {
            return $accounts[$account_id];
        }

        return 0;
    }

    function memcachedinfo() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
    }

    function memcachedinfo_delete() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $this->layout = null;
        $this->autoRender = false;
        if( !empty($_POST['key']) ) {
            $key = $_POST['key'];
            $delete = $this->CakeMemcache->delete($key);
            return $delete;
        }
    }
    function memcachedinfo_get() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $this->layout = null;
        $this->autoRender = false;
        if( !empty($_POST['key']) ) {
            $key = $_POST['key'];
            $value = $this->CakeMemcache->get($key);
            return $value;
        }
    }
    function memcachedinfo_set() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $this->layout = null;
        $this->autoRender = false;
        if( !empty($_POST['key']) && !empty($_POST['value'])  ) {
            $value = $this->CakeMemcache->set($_POST['key'],$_POST['value'], $_POST['expire']);
            return $value;
        } else {
            return 0;
        }
    }

    function cache() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
    }

    function validate_admin($type, $domain_id = DOMAIN_ID_ALL) {
        $is_admin = false;

        $this->Session->activate();
        $user = $this->Session->read('User');

        $is_curator = $this->User->isCurator($user['id'], $user['admin']);
        $is_admin_user = $this->User->isAdmin($user['id'], $user['admin']);

        if ($type == ADMIN_FULL) {
            $admin_domain_bits = $user['domain_bitfield'];

            if (($is_admin_user || $is_curator) && $admin_domain_bits == -1) {
                $is_admin = true;
            }
        } else if ($type == ADMIN_DOMAIN) {
            if ($is_admin_user || $is_curator) {
                $is_admin = true;
            }
        }

        if (!$is_admin){
            $this->saveUrl($_SERVER['REQUEST_URI'], $this->Session, $user);
            $this->redirect("/login");
            exit();
        }

        return $is_admin;
    }

    private function is_full_admin() {
        $this->Session->activate();
        $user = $this->Session->read('User');
        $user = $this->User->findById($user['id']);

        $is_admin = $this->User->isAdmin($user['User']['id'], $user['User']['admin']);
        $admin_domain_bits = $user['User']['domain_bitfield'];

        if ($is_admin && $admin_domain_bits == -1) {
            return 1;
        }

        return 0;
    }

    private function is_domain_admin($domain_id) {
        $this->Session->activate();
        $user = $this->Session->read('User');
        $user = $this->User->findById($user['id']);
        $admin_domain_bits = $user['User']['domain_bitfield'];

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        if ($admin_domain_bits & $oHub->idToBit($domain_id)) {
            return 1;
        }

        return 0;
    }

    function users() {
        $this->layout = 'backend2';
        $this->validate_admin(ADMIN_DOMAIN);
        $this->MetricLog->log(LOG_TYPE_USER_SEARCH);

        if(!empty($_POST['username'])){
            $Users = $this->User->findAll("username LIKE '%".$_POST['username']."%'");
        }else{
            $Users = $this->User->find('all',
                array('fields' => array('User.id', 'User.domain_bitfield', 'User.username', 'User.email', 'User.admin', 'User.last_login'),)
            );
        }
        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $this->set("domain_component", $oHub);
        $this->set('Users', $Users);
        $this->set('user_admin', User::ADMIN);
        $this->set('user_curator', User::CURATOR);
        $this->set('user_super_admin', User::SUPER_ADMIN);
        $this->set('user_publisher', User::PUBLISHER);

        $this->set('type_user_publisher', User::TYPE_PUBLISHER);
        $this->set('type_user_admin', User::TYPE_ADMIN);
        $this->set('type_user_curator', User::TYPE_CURATOR);
        $this->set('type_user_super_admin', User::TYPE_SUPER_ADMIN);
    }

    function user_edit_profile($user_id){
        $this->validate_admin(ADMIN_FULL);
        global $all_domains;

        $User = $this->User->findById($user_id);

        if($this->data){
            if($this->data['User']['admin']) {
                if($this->User->isAdmin($user_id, $User['User']['admin'] )) {
                    unset($this->data['User']['admin']);
                } else {
                    $this->data['User']['admin'] = $User['User']['admin'] | User::ADMIN;
                }
            } else if ($this->data['User']['curator']) {
                $this->data['User']['admin'] = User::CURATOR;
            } else{
                $this->data['User']['admin'] = User::PUBLISHER;
            }

            $this->MetricLog->log(LOG_TYPE_USER_UPDATE);

            if($this->data['fullAdmin']){
                $this->data['User']['domain_bitfield'] = -1;
            }else{
                $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
                $this->data['User']['domain_bitfield'] = $oHub->getBitsDomainArray($this->data['User']);
            }

            $rc = $this->User->save($this->data);
            unset($this->data['User']['admin']);
            if($rc){
                $this->Session->activate();
                $this->Session->setFlash(__('User Profile has been modified', true));
            }
        } else {
            $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
        }

        $this->data['fullAdmin'] = $User['User']['domain_bitfield'] == -1 ? 1 : 0;
        $this->set("domains", $all_domains);
        $this->set('user_is_curator', $this->User->isCurator($User['User']['id'], $User['User']['admin']));
        $this->set('user_is_admin', $this->User->isAdmin($User['User']['id'], $User['User']['admin']));

        $this->set('User', $User);
    }

    function user_reset_passwd($user_id){
        $this->validate_admin(ADMIN_FULL);

        $User = $this->User->findById($user_id);

        if($this->data){
            $this->MetricLog->log(LOG_TYPE_RESET_PASSWORD);

            print_r($this->data);
            $rc = $this->User->save($this->data);
            if($rc){
                $mail_body = 'This is your new password: '.$this->data['User']['password']
                        .'<br>- '.SITE_NAME." Staff";
                $this->Mail->send_mail($User['User']['email'], EMAIL_ADMIN, 'Your password has been reset.', $mail_body);

                $this->Session->activate();
                $this->Session->setFlash(__('User Password has been reset', true));
                $this->redirect('/management/users');
            }
        } else {
            $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
        }

        $possible_chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $i = 0;
        $password = '';
        while( $i < 10){
            $char = substr($possible_chars, mt_rand(0, strlen($possible_chars)-1), 1);

            if(!strstr($password, $char)){
                $password .= $char;
                $i++;
            }
        }

        $this->set('newPasswd', $password);
        $this->set('User', $User);
    }

    function rebalance_queue($queue_view = 0) {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        if ($queue_view == 0) {
            $this->WidgetRebalance->bindModel(array("belongsTo" => array("Website" =>
                array('className' => 'Website',
                    'conditions' => '',
                    'order' => '',
                    'foreignKey' => 'website_id'))));

            $w_rebalances = $this->WidgetRebalance->find("all", array("conditions" => array("num_display >" => 0),
                "order" => "num_display DESC"
                ));

            $count = count($w_rebalances);
            for ($i = 0; $i < $count; $i++) {
                $account = $this->Account->findByWebsiteId($w_rebalances[$i]['WidgetRebalance']['website_id']);
                $w_rebalances[$i]['Account'] = $account['Account'];
            }

            $this->set("w_rebalances", $w_rebalances);
        } else {
            $lp_rebalances = $this->LandingPageRebalance->find("all", array("conditions" => array("num_display >" => 0),
                "order" => "num_display DESC"
                ));

            $this->set("lp_rebalances", $lp_rebalances);
        }

        $this->set("queue_view", $queue_view);
    }

    private function queue_info() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        App::import('Component', 'QueueKestrel');
        $this->Queue = new QueueKestrelComponent();

        $queue['outgoing_click'] = $this->Queue->size("outgoing_click");
        $queue['landing_page_stats_views'] = $this->Queue->size("landing_page_stats_views");
        $queue['widget_stats_views'] = $this->Queue->size("widget_stats_views");
        $queue['new_page'] = $this->Queue->size("new_page");
        $queue['landing_page_and_widgets_clicks'] = $this->Queue->size("landing_page_and_widgets_clicks");
        $queue['cpc_landing_page'] = $this->Queue->size("cpc_landing_page");

        return $queue;
    }

    public function subcategories() {
        if ($this->data) {
            $this->Tag->save($this->data);
        }

        $subs = $this->Tag->findAllByType(TAG_TYPE_SUBCATEGORY);

        $this->data = array();

        $this->set('subcategories', $subs);
        $this->set('categories', $this->Category->main());
    }

    public function tags() {
        set_time_limit(60*60);

        if ($this->data) {
            $this->Tag->save($this->data);
        }

        $tags = $this->Tag->all_tags('id, name, created');
        $page_tags = $this->PageTag->get_count_group_by_tag_id();

        $count = count($tags);
        for ($i = 0; $i < $count; $i++) {
            $tag_id = $tags[$i]['Tag']['id'];
            $page_count = isset($page_tags[$tag_id]) ? $page_tags[$tag_id] : 0;
            $tags[$i]['Tag']['page_count'] = $page_count;
        }

        $this->data = array();

        $this->set('tags', $tags);
    }

    public function queues() {
        $this->validate_admin(ADMIN_FULL);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

        $queue = $this->queue_info();

        $this->set("queues", $queue);
    }

}

function management_lp_ctr_rate($a, $b) {
    if ($a['Page']['lp_rolling_ctr'] == $b['Page']['lp_rolling_ctr']) {
        return 0;
    }

    return ($a['Page']['lp_rolling_ctr'] > $b['Page']['lp_rolling_ctr']) ? -1 : 1;
}

function management_w_ctr_rate($a, $b) {
    if ($a['Page']['widget_rolling_ctr'] == $b['Page']['widget_rolling_ctr']) {
        return 0;
    }
    return ($a['Page']['widget_rolling_ctr'] > $b['Page']['widget_rolling_ctr']) ? -1 : 1;
}

function management_yin($a, $b) {
    if ($a['Website']['yin'] == $b['Website']['yin']) {
        return 0;
    }
    return ($a['Website']['yin'] > $b['Website']['yin']) ? -1 : 1;
}

?>
