<?php
namespace CI;

class ArrayManipulator
{
    const ARRAY_ISSET = 1;
    const ARRAY_EMPTY = 2;

    protected $aArray = array();
    protected $nType  = self::ARRAY_ISSET;

    public function __construct($aArray = array())
    {
        $this->setArray($aArray);
    }

    /**
     * Set the array to be manipulated
     *
     * @param array $aArray The array to be manipulated
     *
     * @return  CI\ArrayManipulator
     */
    public function setArray($aArray)
    {
        $this->aArray = $aArray;

        return $this;
    }

    /**
     * Returnt the original array
     *
     * @return array
     */
    public function getArray()
    {
        return $this->aArray;
    }


    /**
     * Set the validation type to be used by the class,
     *
     * @param integer $nType The validation type to be used (ARRAY_ISSET | ARRAY_EMPTY)
     *
     * @return  CI\ArrayManipulator
     */
    public function setValidationType($nType = null)
    {
        if (null !== $nType) {
            $this->nType = $nType;
        }

        return $this;
    }

    /**
     * Get the value of the requested index from the array,
     * if is not empty or exists, in the other hand
     * return the default value
     *
     * @param mixed   $mIndex   The index to be check
     * @param mixed   $mDefault The default value to return
     * @param integer $nType    The validation type to use
     *
     * @return mixed The result
     */
    public function get($mIndex, $mDefault = null, $nType = null)
    {
        $this->setValidationType($nType);

        switch ($this->nType) {
            case self::ARRAY_ISSET:
                $mDefault = $this->getIsSet($mIndex, $mDefault);
                break;
            case self::ARRAY_EMPTY:
            default:
                $mDefault = $this->getNotEmpty($mIndex, $mDefault);
                break;
        }

        return $mDefault;
    }

    /**
     * Validate if the index is not empty and return the value,
     * if is empty return the default
     *
     * @param mixed $mIndex   The index to be checked
     * @param mixed $mDefault The default value to return
     *
     * @return mixed The result value
     */
    protected function getNotEmpty($mIndex, $mDefault = '')
    {
        if (!empty($this->aArray[$mIndex])) {
            $mDefault = $this->aArray[$mIndex];
        }

        return $mDefault;
    }

    /**
     * Validate if the index is set and return the value,
     * if not set return the default
     *
     * @param mixed $mIndex   The index to be checked
     * @param mixed $mDefault The default value to return
     *
     * @return mixed The result value
     */
    protected function getIsSet($mIndex, $mDefault = '')
    {
        if (isset($this->aArray[$mIndex])) {
            $mDefault = $this->aArray[$mIndex];
        }

        return $mDefault;
    }
}