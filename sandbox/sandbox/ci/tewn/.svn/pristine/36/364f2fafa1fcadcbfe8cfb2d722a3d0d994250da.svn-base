<?php
include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");
include_once (ROOT . DS . APP_DIR . DS . "controllers/history_controller.php");

class HistoryCreditsController extends HistoryController {

    var $name = 'HistoryCredits';
    var $uses = array("StatsAccount", "Account", "Website", "Stats");
    var $components = array('RequestHandler', 'History', 'Date', 'Timer');

    var $cache_on = 1;
    var $debug = 0;

    protected $ChartAccounts = null;
    protected $ChartCache = null;

    private function _initChartAccounts()
    {
        if (is_null($this->ChartAccounts)) {
            App::import('Helper', 'Convert');
            $this->ChartAccounts = new CI\Chart\Account();
            $this->ChartAccounts->addModel('account', $this->Account);
            $this->ChartAccounts->addModel('website', $this->Website);
            $this->ChartAccounts->addModel('stats_account', $this->StatsAccount);
            $this->ChartAccounts->addComponent('convert', new ConvertHelper());
        }
    }

    private function _initChartCache()
    {
        if (is_null($this->ChartCache)) {
            $this->ChartCache = new CI\Chart\Cache\Account($this->Account);
        }
    }

    function update() {
        $this->autoRender = false;
        echo 'Not need to take a snapshot of Accounts anymore. \\o/';
    }

    function chart_get_cache_all($point) {
        $this->_initChartCache();
        return $this->ChartCache->getAllStatsFromDate($point);
    }

    function chart_set_cache_all($point, $data) {
        $this->_initChartCache();
        return $this->ChartCache->setAllStatsFromDate($point, $data);
    }

    function chart_set_cache_domain($point, $data, $domain_id) {
        $this->_initChartCache();
        return $this->ChartCache->setDomainStatsFromDate($point, $data, $domain_id);
    }

    function chart_get_cache_domain($point, $domain_id) {
        $this->_initChartCache();
        return $this->ChartCache->getDomainStatsFromDate($point, $domain_id);
    }

    function chart_process_website($history, $website_id, $request, $point, $time_unit, $account) {
        $this->_initChartAccounts();
        return $this->ChartAccounts->processWebsite($history, $website_id, $request, $point, $time_unit, $account);
    }

    function chart_process_all_increment($history, $stats, $point, $account) {
        $this->_initChartAccounts();
        return $this->ChartAccounts->incrementAllStats($history, $stats, $point, $account);
    }

    function chart_process_domain_increment($history, $stats, $point, $account, $domain_id) {
        $this->_initChartAccounts();
        return $this->ChartAccounts->incrementDomainStats($history, $stats, $point, $account, $domain_id);
    }

    function chart_process_all_aggregate($history, $website_ids, $day) {
        return $history;
    }

    function chart_process_domain_aggregate($history, $website_ids, $day) {
        return $history;
    }

    function chart_initialize_stats() {
        $this->_initChartAccounts();
        return $this->ChartAccounts->initializeStats();
    }

    function chart_initialize_cumulative_stats() {
        $this->_initChartAccounts();
        return $this->ChartAccounts->initializeCumulativeStats();
    }

    function chart_line_initialize() {
        $this->_initChartAccounts();
        return $this->ChartAccounts->initializeLineData();
    }

    function chart_line_data($line, $stats, $website_id, $request, $domain_id = false) {
        $this->_initChartAccounts();
        return $this->ChartAccounts->processLineData($line, $stats, $website_id, $request, $domain_id);
    }

    function chart_lines($out, $line, $website_id, $request, $domain_id, $time_unit) {
        $this->_initChartAccounts();
        return $this->ChartAccounts->processLines($out, $line, $website_id, $request, $domain_id, $time_unit);
    }

    public function clear_cache($initial_date = null)
    {
        $this->autoRender = false;
        if (empty($initial_date)) {
            $initial_date = $this->Date->yesterday();
        }
        $websites = $this->Website->find(
            'list',
            array(
                'fields' => 'id, account_id',
                'conditions' => array(
                    'visible' => true
                ),
            )
        );

        $this->_initChartCache();
        $this->_initChartAccounts();

        $oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $domains = $oHub->getAllIds();

        foreach ($websites as $website_id => $account_id) {
            $this->ChartCache->removeStatsFromDate($initial_date, $account_id);
            $this->ChartAccounts->removeChartAccountFromCache($account_id, $initial_date, TIME_UNIT_DAY);
        }

        $start_time = strtotime($initial_date);
        $end_time = strtotime("midnight today");
        $num_days = $this->Date->get_num_days_time($start_time, $end_time);
        for ($i = 0; $i < $num_days; $i++) {
            $date = $this->Date->date_add($initial_date, $i);
            $this->ChartCache->removeAllStatsFromDate($date);

            foreach ($domains as $domain_id) {
                $this->ChartCache->removeDomainStatsFromDate($date, $domain_id);
            }
        }
    }

    public function clear_yesterday_stats($account_id)
    {
        $this->autoRender = false;
        $date = $this->Date->yesterday();
        $this->_initChartCache();
        $this->ChartCache->removeStatsFromDate($date, $account_id);
        return 'Cleared yesterday stats';
    }

    function return_rate_day($website_id = null, $date = null) {
        /* Get websites */
        if ($website_id) {
            $websites = $this->Website->findAllById($website_id);
        } else {
            $websites = $this->Website->find(
                "all",
                array(
                    "fields" => array("account_id"),
                    "conditions" => array(
                        "visible" => true,
                        "status"  => array(
                            WEBSITE_STATUS_ACTIVE,
                            WEBSITE_STATUS_TRANSFER
                        ),
                    ),
                )
            );
        }

        if (is_null($date)) {
            $date = $this->Date->yesterday();
        }

        /* Initialize stats */
        $start_date = $this->Date->day_start($date);
        $end_date   = $this->Date->day_end($date);

        $total_stats = $this->aggregate_stats_range($websites, $start_date, $end_date);

        if ($total_stats['incoming'] == 0) {
            return 0;
        }

        return ($total_stats['outgoing'] / $total_stats['incoming']) * 100;
    }

    function stats_day($account_id, $date = null) {
        if (is_null($date)) {
            $date = $this->Date->yesterday();
        }

        if ($this->cache_on) {
            $this->_initChartCache();
            $stats = $this->ChartCache->getStatsFromDate($date, $account_id);
            if ($stats) {
                return $stats;
            }
        }

        $start_date = $this->Date->day_start($date);
        $end_date   = $this->Date->day_end($date);

        $stats = $this->stats_range($account_id, $start_date, $end_date);

        if ($this->cache_on) {
            $this->ChartCache->setStatsFromDate($date, $account_id, $stats);
        }

        return $stats;
    }

    function aggregate_stats_range($websites, $date_start, $date_end) {
        // Get Website Stats
        $website_stats = array(
            'outgoing' => 0,
            'incoming' => 0,
        );

        $start_date = $this->Date->format_time($date_start);
        $end_date   = $this->Date->format_time($date_end);

        $accountStats = new CI\Stats\Account();
        $accountStats->setModel($this->StatsAccount);
        $accountStats->setDateRange($start_date, $end_date);

        $accounts_ids = Set::extract('/Website/account_id', $websites);
        $accountStats->setAccountsIds($accounts_ids);
        $stats = $accountStats->getData();

        $website_stats['incoming'] = $stats['incoming'];
        $website_stats['outgoing'] = $stats['outgoing'];

        return $website_stats;
    }

    function stats_range($account_id, $datetime_start, $datetime_end)
    {
        $datetime_start = $this->Date->format_time($datetime_start);
        $datetime_end   = $this->Date->format_time($datetime_end);

        $accountStats = new CI\Stats\Account();
        return $accountStats
            ->setModel($this->StatsAccount)
            ->setDateRange($datetime_start, $datetime_end)
            ->setAccountId($account_id)
            ->getData();
    }

    public function precache() {
        /* Timers & Limits */
        $this->autoRender = false;
        $this->Timer->start(TIMER_HISTORY_CREDITS_PRECACHE);
        set_time_limit(TIME_LIMIT_HISTORY_CREDITS_PRECACHE);
        ini_set('memory_limit', MEMORY_LIMIT_HISTORY_CREDITS_PRECACHE.'M');

        $websites = $this->Website->find(
            'list',
            array(
                'fields' => 'id, account_id',
                'conditions' => array(
                    'visible' => true,
                ),
            )
        );
        $yesterday = $this->Date->yesterday_start();

        $script_total = count($websites);
        $script_count = 0;
        $this->Timer->progress_set(0);
        $this->Timer->running_set();

        $eol = (php_sapi_name() === 'cli') ? PHP_EOL : '<br/>';
        echo "Precaching Accounts...{$eol}";
        foreach ($websites as $website_id => $account_id) {
            $this->stats_day($account_id, $yesterday);

            $script_count++;
            $this->Timer->progress_set($script_count, $script_total);
            $this->Timer->running_set();

            echo '.';
            if ($script_count % 70 === 0) {
                $percent = ' ' . round($script_count / $script_total * 100, 2) . '%';
                echo "{$percent}{$eol}";
            }
        }

        /* Save off timer */
        $data = $this->Timer->set_memory_limit();
        $this->Timer->stop_save($data);
        echo " 100%{$eol}";
        echo 'Precache finished';
    }

    /* Returns json object with the stats for a website after the specified date */
    public function website_stats_by_date($website_id, $start_timestamp, $end_timestamp = 0)
    {
        $this->autoRender = false;
        Configure::write('debug', 0);

        $datetime_start = $this->Date->format_timestamp_time($start_timestamp);
        $datetime_end = (0 == $end_timestamp) ? $this->Date->yesterday_end() : $this->Date->format_timestamp_time($end_timestamp);

        $account_id = $this->Account->field('id', array('website_id' => $website_id));
        $stats = $this->stats_range($account_id, $datetime_start, $datetime_end);
        $stats['gen_return_rate'] = 0;

        $website = $this->Stats->get_shown_website_widget_stats($website_id, $datetime_start, $datetime_end);
        $website['traffic'] = isset($website['traffic']) ? $website['traffic'] : 0;
        $stats['incoming']  = isset($stats['incoming']) ? $stats['incoming'] : 0;

        $this->loadModel('StatsArticle');
        $oArticle      = new \CI\Stats\Article();
        $article_stats = $oArticle->setModel($this->StatsArticle)
                                  ->setWebsiteId($website_id)
                                  ->setDateRange($datetime_start, $datetime_end)
                                  ->getData();

        $website['traffic'] += $article_stats['traffic'];
        $stats['incoming']  += $article_stats['impressions'];
        $stats['gen_return_rate'] = \CI\Formulas::getGeneratedReturnRate($website['traffic'], $stats['incoming'], true);

        $stats_db = $this->Stats->getByWebsites(
            $website_id,
            \Carbon\Carbon::now()->startOfDay(),
            \Carbon\Carbon::now()->endOfDay()
        );

        $stats['current_credits'] = 0;

        if (!empty($stats_db)) {
            $stats['current_credits'] = round($stats_db[0][0]['credits'], 1);
        }

        return json_encode($stats);
    }

    // this methods were left because are abstract on history_controller
    function base_point($base_start, $datetime_start, $id) {
    }

    function point($datetime_start, $datetime_end, $id) {
    }

    function points_aggregate($points) {
    }

    function stats_init($stats) {
    }

    function stats_non_zero($stats) {
    }

    function stats_set($stats, $data) {
    }

    function stats_add($stats, $data) {
    }

    function stats_delta($stats, $base) {
    }

    function stats_validate($stats, $info) {
    }

    public function stats_cache_get($id, $date) {
    }

    public function stats_cache_set($id, $date, $stats) {
    }
}

?>

