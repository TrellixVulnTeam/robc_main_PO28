<?php
/**
 * CPC File
 *
 * PHP Version 5.3
 *
 * @author   Francisco Gonzalez <francisco.gonzalez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://www.crowdignite.com
 */

namespace CI\CPC;

/**
 * CPC Class
 *
 * PHP Version 5.3
 *
 * @author   Francisco Gonzalez <francisco.gonzalez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://www.crowdignite.com
 */
class Observer
{
    const CPC_CAMPAIGN_EVENT_ADD           = 1;
    const CPC_CAMPAIGN_EVENT_CHANGE_STATUS = 2;
    const CPC_CAMPAIGN_EVENT_EDIT          = 3;

    protected $oAnalytic;

    public function __construct()
    {
        $this->oAnalytic = new Analytic();
    }

    /**
     * Trigger an event for the CPC campaigns
     *
     * @param  integer $nEventType Event to trigger
     * @param  array   $aParams    Params to pass to the event
     *
     * @return void
     */
    public function trigger($nEventType, $aParams)
    {
        $oParams   = new \CI\ArrayManipulator($aParams);

        switch ($nEventType) {
            case self::CPC_CAMPAIGN_EVENT_ADD:
                $this->add($oParams);
                break;
            case self::CPC_CAMPAIGN_EVENT_CHANGE_STATUS:
                $this->changeStatus($oParams);
                break;
            case self::CPC_CAMPAIGN_EVENT_EDIT:
                $this->edit($oParams);
                break;
            default:
                throw new Exception(Exception::MISSING_EVENT);
        }

        return true;
    }

    /**
     * Execute when is the add function, here should be added
     * all the calls required
     *
     * @param \CI\ArrayManipulator $oParams Params to be used
     */
    protected function add(\CI\ArrayManipulator $oParams)
    {
        $this->oAnalytic->create(
            $oParams->get('website_id', 0),
            $oParams->get('pages', array())
        );
        $this->oAnalytic->turnOn(
            $oParams->get('pages', array())
        );

        $oStats = new \CI\CPC\Stats();
        $oStats->courtesy($oParams);
    }

    /**
     * Execute when is the changeStatus function, here should be added
     * all the calls required
     *
     * @param \CI\ArrayManipulator $oParams Params to be used
     */
    protected function changeStatus(\CI\ArrayManipulator $oParams)
    {
        $this->oAnalytic->updateByStatus(
            $oParams->get('status', null),
            $oParams->get('campaign_id', null)
        );
    }

    /**
     * Execute when is the edit function, here should be added
     * all the calls required
     *
     * @param \CI\ArrayManipulator $oParams Params to be used
     */
    protected function edit(\CI\ArrayManipulator $oParams)
    {
        $this->oAnalytic->turnOff(
            $oParams->get('website_id', 0),
            $oParams->get('pages_to_remove', array())
        );
        $this->oAnalytic->create(
            $oParams->get('website_id', 0),
            $oParams->get('pages', array())
        );
        $this->oAnalytic->turnOn(
            $oParams->get('pages', array())
        );

        $oStats = new \CI\CPC\Stats();
        $oStats->courtesy($oParams);
    }
}