<?php

namespace CI\Search;
/*
 * Sphinx component
 *
 * We will use mysql client to connect to a realtime index
 * on sphinx
 *
 */
class Sphinx
{
    private $_oMysqlClient = null;
    private $_oStopWordFilter = null;
    private $_sSphinxServerName = null;


    public function __construct($sphinxServerName)
    {
        $this->setSphinxServerName($sphinxServerName);
    }

    /**
     * @param null $sphinxServerName
     */
    public function setSphinxServerName($sphinxServerName)
    {
        $this->_sSphinxServerName = $sphinxServerName;
    }

    /**
     * @return null
     */
    public function getSphinxServerName()
    {
        return $this->_sSphinxServerName;
    }

    /**
     * @param null $mysqlClient
     */
    public function setMysqlClient($mysqlClient)
    {
        $this->_oMysqlClient = $mysqlClient;
    }

    /**
     * @return null
     */
    public function getMysqlClient()
    {
        return $this->_oMysqlClient;
    }


    function startup(&$controller)
    {

    }

    function getStopWordFilter()
    {
        if ($this->_oStopWordFilter === null) {
            $this->_oStopWordFilter = new \CI\Filter\RemoveMysqlStopWord();
        }
        return $this->_oStopWordFilter;
    }

    function connect($tryAgain = true)
    {

        if ($this->_oMysqlClient !== null) {
            // we are already connected
            return true;
        }

        // get the server for connection
        $this->setMysqlClient(new \mysqli($this->getSphinxServerName(), "", "", "", 9306));

        if ($this->getMysqlClient()->connect_errno) {
            error_log(
                "Sphinx Connection Error (".$this->getSphinxServerName()."): " .
                $this->getMysqlClient()->connect_error
            );
            if ($tryAgain) {
                // Give a second chance to connect
                $this->setMysqlClient(new \mysqli($this->getSphinxServerName(), "", "", "", 9306));
                if ($this->getMysqlClient()->connect_errno) {
                    error_log(
                        "Sphinx Connection Error Last Try (".$this->getSphinxServerName()."): " .
                        $this->getMysqlClient()->connect_error
                    );
                    $this->setMysqlClient(null);
                }
            } else {
                $this->setMysqlClient(null);
            }
        }

        return $this->getMysqlClient() !== null;
    }
    function addPage(
        $id, $title, $description, $website_id, $domain_bitfield, $category, $demographic_sex,
        $content_rating, $text = null
    ) {
        if (!$this->connect()) {
            return;
        }

        $sQuery = "REPLACE INTO contextual VALUES(%d, '%s', '%s', %d, %d, %d, %d, %d, %d, '%s', '%s')";
        $sQuery = sprintf(
            $sQuery, $id,
            addslashes($this->getStopWordFilter()->filter($title)),
            addslashes($this->getStopWordFilter()->filter($description)), $domain_bitfield, $website_id, $category,
            $demographic_sex, 0, $content_rating, addslashes($title), addslashes($description)
        );
        return $this->getMysqlClient()->query($sQuery);
    }

    function getLastResponse()
    {
        echo $this->getMysqlClient() == null ? 'Not connected to server' : $this->getMysqlClient()->error, "<br/>\n";
    }

    function removePage($id)
    {
        if (!$this->connect()) {
            return false;
        }

        $query = sprintf("DELETE FROM contextual WHERE id = %d", $id);
        return $this->getMysqlClient()->query($query);
    }

    function query(
        $text, $domain_primary, $website_id, $category, $demographic_sex, $content_rating,
        $limit = 10, $allow_websites = array()
    ) {

        if (!$this->connect()) {
            return;
        }

        /* @HACK - Sphinx won't allow bitwise operations in the WHERE clause, so I am using a temporary field here */
        $sQuery  = "SELECT *, domain_id & %d as domain_match, WEIGHT() as weight FROM contextual WHERE domain_match > 0 AND %s LIMIT %d";
        // OPTION ranker=matchany";
        $aWhere = array();

        $text = preg_replace("/([^a-z0-9]+)/", " ", html_entity_decode(strtolower(trim($text))));
        $text = $this->getStopWordFilter()->filter($text);
        $aTextSplit = explode(" ", $text);
        if (empty($aTextSplit)) {
            return null;
        }

        $aWhere[] = 'MATCH(\'' . implode('|', $aTextSplit) . '\')';
        $aWhere[] = 'category = ' . $category;

        if (empty($allow_websites)) {
            $aWhere[] = 'website_id <> ' . $website_id;
        } else {
            $aWhere[] = 'website_id IN (' . implode(',', $allow_websites) . ')';
        }

        // Content Rating
        $aFilter = array();
        switch ($content_rating) {
            case WEBSITE_CONTENT_MENS:
                $aFilter[] = WEBSITE_CONTENT_MENS;
                break;
            case WEBSITE_CONTENT_R:
                $aFilter[] = WEBSITE_CONTENT_R;
                // Intentionally falling through
            case WEBSITE_CONTENT_PG13:
                $aFilter[] = WEBSITE_CONTENT_PG13;
                // Intentionally falling through
            case WEBSITE_CONTENT_G:
                $aFilter[] = WEBSITE_CONTENT_G;
                break;
        }
        $aWhere[] = 'content_rating IN (' . implode(',', $aFilter) . ')';

        $sQuery = sprintf($sQuery, $domain_primary, implode(' AND ', $aWhere), $limit);

        //echo $text, '::: ', $query, "<br>\n";

        $result = $this->getMysqlClient()->query($sQuery);
        $response = array();
        if ($result) {
            while ($row = $result->fetch_object()) {
                $response[] = $row;
            }
        }
        return $response;
    }

}
?>