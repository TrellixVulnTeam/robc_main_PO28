<?php

namespace CI\Test\Filter\String;
use CI\Filter\String\Slug;

/**
 * @group filter
 * @group filter_string
 */
class SlugTest extends \PHPUnit_Framework_TestCase
{
    private $oFilter;

    public function setUp()
    {
        $this->oFilter = new Slug();
    }

    /**
     * Tests a basic functionality of oFiltering a string
     *
     * @dataProvider getString
     */
    public function testAfterFilterShouldReturnSlug($sString)
    {
        $sExpected = 'pamelas_x_ray';


        $this->assertEquals(
            $sExpected,
            $this->oFilter->filter($sString),
            'Strings hashed are not equal'
        );

        $this->assertFalse(
            $this->oFilter->isRawOutput(),
            'Raw Output is not false'
        );
    }

    /**
     * Tests if a string is converted to a raw binary
     *
     * @dataProvider getString
     */
    public function testRawData($sString)
    {
        $sExpected = 'pamelas_x_ray';

        $this->oFilter->setRawOutput(true);
        $this->assertEquals(
            $sExpected,
            $this->oFilter->filter($sString),
            'Strings hashed are not equal'
        );
        $this->assertTrue(
            $this->oFilter->isRawOutput(),
            'Raw Output is not true'
        );
    }

    /**
     * Tests if process function throws the \CI\String\Exception because
     * the $sValue is not a string
     *
     * @expectedException \CI\String\Exception
     * @expectedExceptionCode \CI\String\Exception::NOT_VALID
     * @dataProvider getInvalidType
     */
    public function testInvalidTypeException($sValue)
    {
        $this->oFilter->filter($sValue);
    }

    public function getInvalidType( )
    {
        return array(
            array(99999),
            array(new \stdClass()),
            array(array()),
            array(true),
        );
    }

    public function getString()
    {
        return array(
            array('Pamela\'s X-Ray')
        );
    }

    public function tearDown()
    {
        unset($this->oFilter);
    }
}