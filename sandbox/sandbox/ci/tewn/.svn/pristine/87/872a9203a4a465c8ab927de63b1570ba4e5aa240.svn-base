<?php

include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

class DashboardController extends AppController
{
	var $name = 'Dashboard';
	var $helpers = array('Html', 'Ajax', 'Javascript', 'Convert');
	var $uses = array('User', 'Log', 'Account', 'Website', 'Widget', 'Page', 'LandingPageStyle', 'MetricLog');
	var $components = array('RequestHandler', 'Mail', 'Date');

	function beforeFilter() {
		// Pages controller
		App::import('Controller', 'Pages');
		global $Pages;
		$Pages = new PagesController;
		$Pages->constructClasses();


		// Get user
		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		if ($user) {
			$accounts = $this->Account->findAllByUserId($user['User']['id']);

			foreach($accounts as $account) {
				if (!$account['Account']['paid']) {
					$this->set("paid", 0);
					break;
				} else {
					$this->set("paid", 1);
				}
			}

			$this->set("is_admin", $this->User->isAdmin($user['User']['id'], $user['User']['admin']));
		} else {
			$this->saveUrl($_SERVER['REQUEST_URI'], $this->Session);
			$this->redirect("/login");
		}

		$this->layout = DOMAIN.'/default';
	}

	function index() {
		Configure::write('debug', 1);
		$this->layout = 'backend2';
		// Get user
		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		if (empty($user)) {
			$this->saveUrl($_SERVER['REQUEST_URI'], $this->Session);
			$this->redirect("/login");
		}

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		// Get accounts
		$accounts = $this->Account->findAllByUserId($user['User']['id']);

		// Get websites
		$websites = $this->Website->findAllByUserId($user['User']['id']);
		$count = count($websites);
		for ($i = 0; $i < $count; $i++) {
			$website_id = $websites[$i]['Website']['id'];
			$websites[$i]['Website']['active_count'] = $this->Page->count_by_website_id($website_id, PAGE_STATUS_APPROVED);
			$websites[$i]['Website']['pending_count'] = $this->Page->count_by_website_id($website_id, PAGE_STATUS_PENDING_MODERATION);
		}

		App::import('Component', 'Dictionary');
		$Dictionary = new DictionaryComponent();

		$this->set("categories", $Dictionary->get_dictionary(DictionaryComponent::TYPE_CATEGORY));
		$this->set("user", $user);
		$this->set("accounts", $accounts);
		$this->set("websites", $websites);
	}

	function widgets($widget_id = 0) {
		$this->layout = 'backend2';
		// Get user
		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		if (!$user) {
			echo "User credentials error";
		}
		plat_assert($user);

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		// Get accounts
		$accounts = $this->Account->findAllByUserId($user['User']['id']);

		// Get websites
		$websites = $this->Website->findAllByUserId($user['User']['id']);

		// Get widgets
//		$widgets = $this->Widget->get_by_websites($websites);
		$widgets = $this->get_widgets_by_websites($websites);

		// Update website click through rate
		$website_count = count($websites);
		for ($i = 0; $i < $website_count; $i++) {
			$rate = -1;
			foreach($accounts as $account) {
				if ($account['Account']['website_id'] == $websites[$i]['Website']['id']) {
					if ($account['Account']['incoming']) {
						$rate = $account['Account']['outgoing'] / $account['Account']['incoming'];
					} else {
						$rate = 0;
					}
					$rate *= 100;
					break;
				}
			}
			plat_assert($rate != -1);
			$websites[$i]['Website']['return_rate'] = intval($rate);
		}

		$this->set("account", $accounts);
		$this->set("websites", $websites);
		$this->set("widgets", $widgets);
		$this->set("user", $user);

		$this->set("show_code", $widget_id);
	}

	function account() {
		Configure::write('debug', 1);
		$this->layout = 'backend2';

		// Get user
		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		plat_assert($user);

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		// Get accounts
		$accounts = $this->Account->findAllByUserId($user['User']['id']);

		// Get websites
		$websites = $this->Website->findAllByUserId($user['User']['id']);

		// Account status is the best possible number
		$status = ACCOUNT_STATUS_MAX;
		foreach ($accounts as $account) {
			if ($status > $account['Account']['status']) {
				$status = $account['Account']['status'];
			}
		}

		$this->set("user", $user);
		$this->set("accounts", $accounts);
		$this->set("account_status", $status);
		$this->set("websites", $websites);
	}

	function credits() {
		$this->layout = 'backend2';
		Configure::write('debug', 1);

		// Get user
		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		plat_assert($user);

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		// Get accounts
		$accounts = $this->Account->findAllByUserId($user['User']['id']);

		// Get websites
		$websites = $this->Website->findAllByUserId($user['User']['id']);

		$this->set("return_rate", DEFAULT_RETURN_RATE);
		$this->set("user", $user);
		$this->set("accounts", $accounts);
		$this->set("websites", $websites);
		$this->set("refer_bonus", DEFAULT_REFER_TRANSFER_RATE);
	}

	private function get_widgets_by_websites($websites) {
		// Build website_id array
		$website_id_array = array();
		foreach($websites as $website) {
			array_push($website_id_array, $website['Website']['id']);
		}

		$conditions = array("visible" => true,
				    "status" => array(WIDGET_STATUS_ACTIVE, WIDGET_STATUS_INACTIVE),
				    "website_id" => $website_id_array);

		$widgets = $this->Widget->find("all", array("conditions" => $conditions));
		//plat_assert($widgets);

		return $widgets;
	}

	function pages() {
		$this->layout = 'backend2';
		global $Pages;

		// Get user
		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		if (!$user) {
			$this->saveUrl($_SERVER['REQUEST_URI'], $this->Session);
			$this->redirect("/login");
			exit();
		}

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		// Get websites
		$websites = $this->Website->findAllByUserId($user['User']['id']);

		// Get pages
		$count = count($websites);
		for ($i = 0; $i < $count; $i++) {
			// Get all active pages
			$pages = $this->Page->find("all", array("conditions" =>
													array("website_id" => $websites[$i]['Website']['id'],
														  "status" => PAGE_STATUS_APPROVED)));

			$pages = $Pages->load_page_stats($pages, 0);

			// Pending Page count
			$pending_moderation_pages = $this->Page->find("count", array("conditions" => array("status" => PAGE_STATUS_PENDING_MODERATION,
													   "website_id" => $websites[$i]['Website']['id'])));
			// Active Page count
			$active_pages = count($pages);

			// Save off for later
			$websites[$i]['Website']['pages'] = $pages;
			$websites[$i]['Website']['active_pages'] = $active_pages;
			$websites[$i]['Website']['pending_moderation_pages'] = $pending_moderation_pages;
		}

		// Setup view
		$this->set("websites", $websites);
		$this->set("user", $user);
	}

	function help() {
        $this->layout = 'backend2';
        // Get user

		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		if (!$user) {
			$this->saveUrl($_SERVER['REQUEST_URI'], $this->Session);
			$this->redirect("/login");
			exit();
		}

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		// Setup view
		$this->set("user", $user);
	}

	function refers() {
		// Get user
		$this->layout = 'backend2';
		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		if (!$user) {
			echo "User credentials error";
		}
		plat_assert($user);

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		$accounts = $this->Account->findAllByUserId($user['User']['id']);

		$refers = $this->Account->get_by_refer($accounts);
		$yesterday = $this->Date->yesterday();
		$count = count($refers);
		for ($i = 0; $i < $count; $i++) {
			$website = $this->Website->findById($refers[$i]['Account']['website_id']);

			if (!$this->Website->is_active($website)) {
				unset($refers[$i]);
				continue;
			}

			$yesterday_stats = $this->RequestAction("/history_credits/stats_day/".$refers[$i]['Account']['id']."/".$yesterday);
			$refers[$i]['Account']['yincoming'] = $yesterday_stats['incoming'];
			$refers[$i]['Website'] = $website['Website'];
		}

		$this->set("refers", $refers);
		$this->set("account_id", $accounts[0]['Account']['id']);
		$this->set("refer_bonus", DEFAULT_REFER_TRANSFER_RATE);
	}

	function websites($widget_id = 0) {
		$this->layout = 'backend2';
		// Get user
		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);
		if (!$user) {
			echo "User credentials error";
		}
		plat_assert($user);

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		// Get accounts
		$accounts = $this->Account->findAllByUserId($user['User']['id']);

		// Get websites
		$websites = $this->Website->findAllByUserId($user['User']['id']);

		// Get widgets
//		$widgets = $this->Widget->get_by_websites($websites);
		$widgets = $this->get_widgets_by_websites($websites);

		// Update website click through rate
		$website_count = count($websites);
		$account_total_clicks = 0;

		for ($i = 0; $i < $website_count; $i++) {
			$rate = -1;
			foreach($accounts as $account) {
				if ($account['Account']['website_id'] == $websites[$i]['Website']['id']) {
					if ($account['Account']['incoming']) {
						$account_total_clicks += $account['Account']['incoming'];
						$rate = $account['Account']['outgoing'] / $account['Account']['incoming'];
					} else {
						$rate = 0;
					}
					$rate *= 100;
					break;
				}
			}
			plat_assert($rate != -1);
			$websites[$i]['Website']['return_rate'] = intval($rate);
		}

		$this->set('account_total_clicks', $account_total_clicks);
		$this->set("account", $accounts);
		$this->set("websites", $websites);
		$this->set("widgets", $widgets);
		$this->set("user", $user);

		$this->set("show_code", $widget_id);
	}

	function design($website_id = NULL) {
		if ($website_id) {
			$websites = $this->Website->findAllById($website_id);
		} else {
			$user = $this->Session->read('User');
			$websites = $this->Website->findAllByUserId($user['id']);
		}

		$this->MetricLog->log(LOG_TYPE_PAGE_VIEW);

		if ($this->data) {

			$rc = $this->LandingPageStyle->save($this->data);
			if ($rc) {
				// Save the landing page style id
				if (empty($this->data['LandingPageStyle']['id'])) {
					$id = $this->LandingPageStyle->getLastInsertId();
				} else {
					$id = $this->data['LandingPageStyle']['id'];
				}

				$this->Website->id = $this->data['LandingPageStyle']['website_id'];
				$this->Website->saveField("landing_page_style_id", $id);

				$this->Session->activate();
				$this->Session->setFlash(__('Design Saved', true));
				$this->redirect("/dashboard/design/".$this->data['LandingPageStyle']['website_id'], null, true);
			}

		} elseif ($website_id) {
			$this->data = $this->LandingPageStyle->findByWebsiteId($website_id);
		}

		$this->set("websites", $websites);
	}
}

?>