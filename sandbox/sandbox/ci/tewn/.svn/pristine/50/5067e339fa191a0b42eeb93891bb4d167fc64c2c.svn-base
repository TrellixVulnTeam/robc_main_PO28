<?php
/**
 * Image size validator File
 *
 * PHP Version 5.3
 *
 * @author   Francisco Gonzalez <francisco.gonzalez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://www.crowdignite.com
 */

namespace CI\Validator\Image;

/**
 * Image size validator Class
 *
 * PHP Version 5.3
 *
 * @author   Francisco Gonzalez <francisco.gonzalez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://www.crowdignite.com
 */
class Size extends \CI\Validator\Rule
{
    const BIGGER_THAN        = 0;
    const BIGGER_EQUAL_THAN  = 1;
    const SMALLER_THAN       = 2;
    const SMALLER_EQUAL_THAN = 3;

    const ERROR_BIGGER_THAN        = 'invalidBiggerThan';
    const ERROR_BIGGER_EQUAL_THAN  = 'invalidBiggerEqualThan';
    const ERROR_SMALLER_THAN       = 'invalidSmallerThan';
    const ERROR_SMALLER_EQUAL_THAN = 'invalidSmallerEqualThan';

    protected $aMessageTemplates = array(
        self::ERROR_BIGGER_THAN        => 'The image should be bigger than %value%',
        self::ERROR_BIGGER_EQUAL_THAN  => 'The image should be bigger or equal than %value%',
        self::ERROR_SMALLER_THAN       => 'The image should be smaller than %value%',
        self::ERROR_SMALLER_EQUAL_THAN => 'The image should be smaller or equal than %value%',
    );


    protected $aSize = array();
    protected $nType;

    public function __construct($nWidth, $nHeight, $nType = self::BIGGER_THAN)
    {
        $this->aSize = array(
            'width'  => $nWidth,
            'height' => $nHeight
        );

        $bIsValidType = in_array(
            $nType,
            array(
                self::BIGGER_THAN,
                self::BIGGER_EQUAL_THAN,
                self::SMALLER_THAN,
                self::SMALLER_EQUAL_THAN,
            )
        );

        if (!$bIsValidType) {
            throw new Exception(Exception::INVALID_VALIDATION_TYPE);
        }

        $this->nType = $nType;
    }

    public function isValid($mValue)
    {
        if (!isset($mValue['width']) || !isset($mValue['height'])) {
            throw new Exception(Exception::MISSING_IMAGE_VALUE_SIZES);
        }

        $bReturn = true;

        $sDefaultErrror = "%sx%s, the image size is: %sx%s";
        switch ($this->nType) {
            case self::BIGGER_THAN:
                if (!($mValue['width'] > $this->aSize['width'] && $mValue['height'] > $this->aSize['height'])) {
                    $this->error(
                        self::ERROR_BIGGER_THAN,
                        sprintf(
                            $sDefaultErrror,
                            $this->aSize['width'],
                            $this->aSize['height'],
                            $mValue['width'],
                            $mValue['height']
                        )
                    );
                    $bReturn = false;
                }
                break;
            case self::BIGGER_EQUAL_THAN:
                if (!($mValue['width'] >= $this->aSize['width'] && $mValue['height'] >= $this->aSize['height'])) {
                    $this->error(
                        self::ERROR_BIGGER_EQUAL_THAN,
                        sprintf(
                            $sDefaultErrror,
                            $this->aSize['width'],
                            $this->aSize['height'],
                            $mValue['width'],
                            $mValue['height']
                        )
                    );
                    $bReturn = false;
                }
                break;
            case self::SMALLER_THAN:
                if (!($mValue['width'] < $this->aSize['width'] && $mValue['height'] < $this->aSize['height'])) {
                    $this->error(
                        self::ERROR_SMALLER_THAN,
                        sprintf(
                            $sDefaultErrror,
                            $this->aSize['width'],
                            $this->aSize['height'],
                            $mValue['width'],
                            $mValue['height']
                        )
                    );
                    $bReturn = false;
                }
                break;
            case self::SMALLER_EQUAL_THAN:
                if (!($mValue['width'] <= $this->aSize['width'] && $mValue['height'] <= $this->aSize['height'])) {
                    $this->error(
                        self::ERROR_SMALLER_EQUAL_THAN,
                        sprintf(
                            $sDefaultErrror,
                            $this->aSize['width'],
                            $this->aSize['height'],
                            $mValue['width'],
                            $mValue['height']
                        )
                    );
                    $bReturn = false;
                }
                break;
        }

        return $bReturn;
    }
}