<?php

class MetricLog extends AppModel
{
    const FILTER_ALL  = 0;
    const FILTER_BD   = 1;
    const FILTER_TECH = 2;

    static public $aFilters = array(
        self::FILTER_TECH => 'Tech',
        self::FILTER_BD   => 'BD',
        self::FILTER_ALL  => '-',
    );

    public $name = 'MetricLog';

    public function get_ip() {
        $server = new CI\Http\Server();
        $ip = $server->getClientIp();
        return empty($ip) ? "127.0.0.1" : $ip;
    }

    public function get_user() {
        if (isset($_COOKIE['username'])) {
            return $_COOKIE['username'];
        } else {
            return "-";
        }
    }

    public function log($type, $website_id = 0, $page_id = 0, $data = 0) {
        $ip = $this->get_ip();
        $username = $this->get_user();

        if (isset($_SERVER['REQUEST_URI'])) {
            $url = addslashes($_SERVER['REQUEST_URI']);
        } else {
            $url = addslashes($_SERVER['argv'][1]);
        }

        if (isset($_SERVER['HTTP_REFERER'])) {
            $refer = addslashes($_SERVER['HTTP_REFERER']);
        } else {
            $refer = "-";
        }

        $save_data = array(
            'MetricLog' => array(
                'url'        => $url,
                'ip'         => $ip,
                'refer'      => $refer,
                'created'    => DboSource::expression('NOW()'),
                'username'   => $username,
                'website_id' => $website_id,
                'page_id'    => $page_id,
                'data'       => $data,
                'type'       => $type,
            )
        );

        $this->create();
        $this->save($save_data);
    }

    public function get_websites($type, $datetime_start,$datetime_end = 0, $username = 0, $website_id = 0, $page_id = 0) {
        $logs = $this->get($type, $datetime_start, $datetime_end, $username, $website_id, $page_id);

        if (!$logs) {
            return array();
        }

        foreach ($logs as $log) {
            $website_ids[] = $log['MetricLog']['website_id'];
        }

        $Website = ClassRegistry::init("Website");

        $websites = $Website->find("all", array("conditions" => array("id" => $website_ids)));

        return $websites;
    }

    public function get($type, $datetime_start, $datetime_end = 0, $username = 0, $website_id = 0, $page_id = 0) {
        $conditions = array(
            'type' => $type,
            'created >=' => $datetime_start,
            );

        if ($datetime_end) {
            $conditions['created <'] = $datetime_end;
        }

        if ($username) {
            $conditions['username'] = $username;
        }

        if ($website_id) {
            $conditions['website_id'] = $website_id;
        }

        if ($page_id) {
            $conditions['page_id'] = $page_id;
        }

        $params = array("conditions" => $conditions);

        $logs = $this->find("all", $params);

        return $logs;
    }

    public function get_history($current_page, $limit)
    {
        $history = array(
            'data'  => array(),
            'count' => 0,
        );
        $conditions = array(
            'type' => array(
                6, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20,
                21, 22, 23, 24, 25, 31, 33, 34, 35, 36, 39
            ),
        );
        $history['data'] = $this->find(
            'all',
            array(
                'limit'      => $limit,
                'page'       => $current_page,
                'order'      => 'id DESC',
                'conditions' => $conditions,
            )
        );
        $history['count'] = $this->find('count', array('conditions' => $conditions));
        return $history;
    }
}
?>