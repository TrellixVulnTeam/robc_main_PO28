<?php

include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");
include_once (ROOT . DS . APP_DIR . DS . "controllers/engine_controller.php");

/*
 * The normal operation flow is have the Engine do all the
 * calculations on what relevant content is out there and set that
 * information in a quickly consumable way for the widgets & homepage.
 */

class PageEngineController extends EngineController {

	var $name = 'PageEngine';

	var $uses = array('Page', 'Setting');
	var $components = array('Trace', 'Timer', 'Domain', 'Date', 'Rule', 'Chartbeat', 'Mail', 'CakeMemcache');
	var $layout = "none";
	var $debug = 1;

	function timer_start() {
		$this->Timer->start(TIMER_OUTGOING_CLICK_PERSIST);
		set_time_limit(TIME_LIMIT_OUTGOING_CLICK_PERSIST);
		ini_set('memory_limit', MEMORY_LIMIT_OUTGOING_CLICK_PERSIST.'M');
	}

	function timer_stop() {
		$data = $this->Timer->set_memory_limit();
		$this->Timer->stop_save($data);
	}

	function batch_data($pages, $page_id) {
		if (empty($pages[$page_id])) {
			$pages[$page_id] = 0;
		}
		$pages[$page_id]++;

		return $pages;
	}

	function save_item($page_id, $count) {
		$this->Page->outgoing_click($page_id, $count);
	}

	function update_click_counts() {
		$this->layout = "none";
		Configure::write('queue_kestrel', 0);
		$this->process_queues("outgoing_click");
	}

	function new_update_click_counts($timers = 1) {
		$this->autoRender = false;

		$key = 'page_engine_new_update_click_counts';

		App::import('Component', 'Watchdog');
		$watchdog = new WatchdogComponent();

		if ($watchdog->is_alive($key)) {
			echo 'The script ', $key, ' is still alive.', PHP_EOL;
			exit;
		}
		$this->process_queues("outgoing_click", $timers, 'page_engine_new_update_click_counts');
	}

	/**
	 * To send a notification (by email) if the traffic drops down in number of visits by 30%.
	 *
	 * @param int $percent To change the percent to compare the drop.
	 */
	public function check_if_traffic_drops_in_visits_by($percent = 30){
		$this->autoRender = false;
		$drop_in_visits_percent = 0;

		// Getting the percent or a false if there is not a drop in number of visits.
		try {
			$drop_in_visits_percent = $this->Chartbeat->percent_of_drop_in_visits();
		} catch(Exception $e) {
			// if we couldn't get
			// drop visits return
			return;
		}

		// do we need to send a notification?
		if ($drop_in_visits_percent >= $percent) {
			$last_drop = $this->CakeMemcache->get('chartbeat_last_drop_in_number_of_visits');

			if (!$last_drop) {
				/* Sending a notification to the EMAIL_BUG defined in global_defines if this is the first time we detected a drop down in numbers */

				debug_message("[".$this->Date->now()."] Crowd Ignite traffic is down $drop_in_visits_percent. Sending email notification...");

				$mail_body = "Crowd Ignite traffic is down <strong>$drop_in_visits_percent</strong>% at <strong>".date('r',time())."</strong>.<br />
				<br />
				See the traffic status:<br />
				<br />
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href='http://chartbeat.com/dashboard/?url=crowdignite.com&k=fc4f446a221696f7c421f4318bfd888f'>http://chartbeat.com/dashboard/?url=crowdignite.com&k=fc4f446a221696f7c421f4318bfd888f</a><br />
				<br />
				&nbsp;Thanks,<br />
				&nbsp;&nbsp;Crowd Ignite<br />
				";

				$this->Mail->send_mail(EMAIL_BUG, EMAIL_ADMIN, "[Crowd Ignite Alert] Traffic Alert", $mail_body);
			} else {
				debug_message("[".$this->Date->now()."] Crowd Ignite traffic is still down by $drop_in_visits_percent percent...");
			}

			$last_drop[time()] = $drop_in_visits_percent;
			$this->CakeMemcache->set('chartbeat_last_drop_in_number_of_visits', $last_drop, false /*$expires*/);

			if ($last_drop = $this->CakeMemcache->get('chartbeat_last_drop_in_number_of_visits')) {
				$last_drop[time()] = $drop_in_visits_percent;
			}
		} else {
			$last_drop = $this->CakeMemcache->get('chartbeat_last_drop_in_number_of_visits');

			// if ($last_drop) we will have to notify that the last drop down in number has finished.
			if ($last_drop) {
				debug_message("[".$this->Date->now()."] There wasn't a drop down in numbers. Coming back to normal...");

				if (count($last_drop) > 1) {
					// it was less than five minutes (time time set to run the cron job)
					$down_time_string = "less than 5 minutes.";
				} else {
					$first = each($last_drop);
					$down_time_string = $this->Date->human_timing($first['key']);
				}

				$mail_body = "Crowd Ignite traffic is back to normal at <strong>".date('r',time())."</strong>.<br />
				It was down by: $down_time_string.<br />
				<br />
				See the traffic status:<br />
				<br />
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href='http://chartbeat.com/dashboard/?url=crowdignite.com&k=fc4f446a221696f7c421f4318bfd888f'>http://chartbeat.com/dashboard/?url=crowdignite.com&k=fc4f446a221696f7c421f4318bfd888f</a><br />
				<br />
				&nbsp;Thanks,<br />
				&nbsp;&nbsp;Crowd Ignite<br />";

				$this->Mail->send_mail(EMAIL_BUG, EMAIL_ADMIN, "[Crowd Ignite Alert] Traffic Alert", $mail_body);
				$this->CakeMemcache->delete('chartbeat_last_drop_in_number_of_visits');
			} else {
				debug_message("There wasn't a drop down in numbers.");
			}
		}
	}
}
?>
