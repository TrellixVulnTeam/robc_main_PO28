<?php

namespace CI\Api;

class Response
{
    const ERROR       = 'error';
    const OK          = 'ok';
    const TYPE_JSON   = 'json';
    const TYPE_ARRAY  = 'array';

    protected $sMessage;
    protected $sStatus;
    protected $aData;
    protected $sTypeAnswer;

    public function __construct($sMessage = 'default')
    {
        $this->sMessage = $sMessage;
        $this->sStatus = self::ERROR;
        $this->aData   = array();
        $this->sTypeAnswer = self::TYPE_JSON;
    }

    public function get()
    {
        $sMsg = 'Error on: ' . $this->sMessage;
        $sErrorsOrData = 'errors';

        if ($this->sStatus == self::OK) {
            $sMsg = $this->sMessage . ' done';
            $sErrorsOrData = 'data';

        }

        $aAnswer = array(
            'status' => $this->sStatus,
            'msg' => $sMsg,
            $sErrorsOrData => $this->aData
        );

        if (self::TYPE_JSON == $this->sTypeAnswer) {
            $aAnswer = json_encode($aAnswer);
        }

        return $aAnswer;
    }

    public function setMessage($sMessage)
    {
        $this->sMessage = $sMessage;
        return $this;
    }

    public function addError($sName, $sMsg)
    {
        if ($this->sStatus == self::OK) {
            $this->sStatus = self::ERROR;
            $this->aData = array();
        }

        $this->aData[] = array(
            'name' => $sName,
            'msg' => $sMsg
        );

        return $this;
    }

    public function addErrors(array $aErrors)
    {
        foreach ($aErrors as $sName => $sMsg) {
            $this->addError($sName, $sMsg);
        }

        return $this;
    }

    public function addData($sName, $sMsg)
    {
        if ($this->sStatus == self::ERROR) {
            $this->sStatus = self::OK;
            $this->aData = array();
        }

        $this->aData[$sName] = $sMsg;

        return $this;
    }
}