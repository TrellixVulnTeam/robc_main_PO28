<?php

namespace Test\Component;
use \CI\Component\LandingPage;

/**
 * @group Component
 */
class LandingPageTest extends \PHPUnit_Framework_TestCase
{
    public function testOutgoingLinkWithIDOnly()
    {
        define('LANDING_PAGE', 'www.crowdignite.com');
        $oComponent = new LandingPage();
        $aPage = array('id' => 1);
        $nIntersectId = 5;

        $sExpected = 'http://www.crowdignite.com/link/1/5/0/0';
        $this->assertEquals($sExpected, $oComponent->getOutgoingLink($aPage, $nIntersectId));
    }

    public function testOutgoingLinkWithTitleUrlOnly()
    {
        define('LANDING_PAGE', 'www.crowdignite.com');
        $oComponent = new LandingPage();
        $aPage = array('id' => 1, 'title_url' => 'link_to_a_page');
        $nIntersectId = 5;

        $sExpected = 'http://www.crowdignite.com/link/link_to_a_page/5/0/0';
        $this->assertEquals($sExpected, $oComponent->getOutgoingLink($aPage, $nIntersectId));
    }

    public function testOutgoingLinkWithAnalytics()
    {
        define('LANDING_PAGE', 'www.crowdignite.com');
        $oComponent = new LandingPage();
        $aPage = array(
            'id' => 1,
            'title_url' => 'link_to_a_page',
            'analytic_id' => 123456,
            'widget_analytic_id' => 456789,
        );
        $nIntersectId = 5;

        $sExpected = 'http://www.crowdignite.com/link/link_to_a_page/5/123456/456789/0/0';
        $this->assertEquals($sExpected, $oComponent->getOutgoingLink($aPage, $nIntersectId));
    }

    public function testCompleteOutgoingLink()
    {
        define('LANDING_PAGE', 'www.crowdignite.com');
        $oComponent = new LandingPage();
        $aPage = array(
            'id' => 1,
            'title_url' => 'link_to_a_page',
            'analytic_id' => 123456,
            'widget_analytic_id' => 456789,
            'paid_link' => true,
            'campaign_id' => 35,
        );
        $nIntersectId = 5;

        $sExpected = 'http://www.crowdignite.com/link/link_to_a_page/5/123456/456789/1/35';
        $this->assertEquals($sExpected, $oComponent->getOutgoingLink($aPage, $nIntersectId));
    }

    public function testOutgoingLinkFromThirdPartyLink()
    {
        define('LANDING_PAGE', 'www.crowdignite.com');
        $oComponent = new LandingPage();
        $aPage = array(
            'id' => 1,
            'title_url' => 'link_to_a_page',
            'analytic_id' => 123456,
            'widget_analytic_id' => 456789,
            'paid_link' => true,
            'campaign_id' => 35,
            'third_party_link' => true,
            'link' => 'http://www.testthirdparty.com',
        );
        $nIntersectId = 5;

        $sExpected = 'http://www.testthirdparty.com';
        $this->assertEquals($sExpected, $oComponent->getOutgoingLink($aPage, $nIntersectId));
    }

    public function testGetRandomSeed()
    {
        define('DEFAULT_LANDING_PAGE_RANDOM_SEEDS', 1);
        $oCache = new LandingPageCacheMock();
        $oComponent = new LandingPage();
        $nIntersectId = 5;
        $nDomainId = 0;

        $oComponent->setCache($oCache);
        $nExpected = $oComponent->getRandomSeed($nIntersectId, $nDomainId);
        $this->assertEquals($nExpected, $oComponent->getRandomSeed($nIntersectId, $nDomainId));

        $nDomainId = 1;
        $this->assertNotEquals($nExpected, $oComponent->getRandomSeed($nIntersectId, $nDomainId));
    }

    public function testQueueData()
    {
        $oComponent = new LandingPage();
        $nIntersectId = 5;
        $nDomainBit = 1;
        $aPages = array(
            array(
                'Page' => array(
                    'id' => 1,
                    'website_id' => 4,
                    'analytic_id' => 123456,
                    'type' => 1,
                    'key' => 456789,
                ),
            ),
        );

        $nTime = time();
        $aExpected = array(
            'int'   => 5,
            'dom'   => 1,
            'date'  => $nTime,
            'stats' => array(
                array(
                    'i' => 1,
                    'w' => 4,
                    't' => 1,
                    'k' => 456789,
                ),
            ),
            'info' => array(
                'general_pages' => array(
                    0 => array(
                        'Page' => array(
                            'id' => 1,
                            'analytic_id' => 123456,
                        ),
                    ),
                ),
            ),
        );

        $aResult = $oComponent->queueData($aPages, $nIntersectId, $nDomainBit);
        $aResult['date'] = $nTime;

        $this->assertEquals($aExpected, $aResult);
    }

    public function testIsSpider()
    {
        $_SERVER = array();
        $oComponent = new LandingPage();
        $this->assertEquals(true, $oComponent->isSpider());
    }

    public function testIsIEBrowser()
    {
        $_SERVER = array();
        $oComponent = new LandingPage();
        $this->assertEquals(false, $oComponent->isIEBrowser());
    }

    public function testGetUtmUrl()
    {
        $oComponent = new LandingPage();
        $sUrl = 'http://www.testurl.com/';
        $aWebsite = array('disable_utm' => false, 'custom_utm' => '');
        $sExpected = $sUrl . '?utm_source=crowdignite.com&utm_medium=referral&utm_campaign=crowdignite.com';
        $this->assertEquals($sExpected, $oComponent->getUtmUrl($sUrl, $aWebsite));
    }

    public function testGetUtmUrlDisableUtm()
    {
        $oComponent = new LandingPage();
        $sUrl = 'http://www.testurl.com/';
        $aWebsite = array('disable_utm' => true, 'custom_utm' => '');
        $sExpected = $sUrl;
        $this->assertEquals($sExpected, $oComponent->getUtmUrl($sUrl, $aWebsite));
    }

    public function testGetUtmUrlWithCustomUtm()
    {
        $oComponent = new LandingPage();
        $sUrl = 'http://www.testurl.com/';
        $aWebsite = array('disable_utm' => false, 'custom_utm' => 'utm_source=www.test.com');
        $sExpected = $sUrl . '?utm_source=www.test.com';
        $this->assertEquals($sExpected, $oComponent->getUtmUrl($sUrl, $aWebsite));
    }

    public function testGetContentRaitingDefault()
    {
        $nExpected       = 0;
        $oComponent      = new LandingPage();
        $nCurrentRaiting = null;
        $aWebsite        = null;
        $aClickedWebsite = null;
        $nResult         = $oComponent->getContentRating($nCurrentRaiting, $aWebsite, $aClickedWebsite);

        $this->assertEquals($nExpected, $nResult);
    }

    public function testGetContentRaitingCurrent()
    {
        $nExpected       = 2;
        $oComponent      = new LandingPage();
        $nCurrentRaiting = 2;
        $aWebsite        = null;
        $aClickedWebsite = null;
        $nResult         = $oComponent->getContentRating($nCurrentRaiting, $aWebsite, $aClickedWebsite);

        $this->assertEquals($nExpected, $nResult);
    }

    public function testGetContentRaitingFromWebsite()
    {
        $nExpected       = 2;
        $oComponent      = new LandingPage();
        $nCurrentRaiting = 0;
        $aWebsite        = array('content_rating' => 2);
        $aClickedWebsite = array('content_rating' => 1);
        $nResult         = $oComponent->getContentRating($nCurrentRaiting, $aWebsite, $aClickedWebsite);

        $this->assertEquals($nExpected, $nResult);
    }

    public function testGetContentRaitingFromClickedWebsite()
    {
        $nExpected       = 1;
        $oComponent      = new LandingPage();
        $nCurrentRaiting = 0;
        $aWebsite        = null;
        $aClickedWebsite = array('content_rating' => 1);
        $nResult         = $oComponent->getContentRating($nCurrentRaiting, $aWebsite, $aClickedWebsite);

        $this->assertEquals($nExpected, $nResult);
    }
}

class LandingPageCacheMock
{
    protected $data = array();

    public function get($sKey)
    {
        return $this->data[$sKey];
    }

    public function set($sKey, $mData)
    {
        $this->data[$sKey] = $mData;
    }
}