<?
include_once ("controllers/history_controller.php");

class HistorySocialController extends HistoryController
{
	var $name = 'HistorySocial';
	var $uses = array('SocialPage', 'HistorySocial', 'Page', 'Setting');
	var $components = array("Date", "Timer");

	var $cache_on = 0;
	var $debug = 0;

	function beforeFilter() {
		$this->layout = 'none';
	}

	function stats_website_time($website_id, $datetime_start, $datetime_end) {
		$pages = $this->Page->get_running($website_id);

		$total['likes_fb'] = 0;
		$total['shares_fb'] = 0;
		$total['comments_fb'] = 0;

		foreach ($pages as $page) {
			echo "Page: ".$page['Page']['url']."\n";

			$stats = $this->stats_range($page['Page']['id'], $datetime_start, $datetime_end);

			if ($stats['likes_fb'] || $stats['shares_fb'] || $stats['comments_fb']) {
				print_r($stats);
			}

			$total['likes_fb'] += $stats['likes_fb'];
			$total['shares_fb'] += $stats['shares_fb'];
			$total['comments_fb'] += $stats['comments_fb'];
		}

		return $total;
	}

	function test() {
		set_time_limit(60*60);
		ini_set('memory_limit', '512M');

		$datetime_start = "2012-09-14 12:00";
		$datetime_end = "2012-09-17 5:00";

		$stats = $this->stats_website_time(4, $datetime_start, $datetime_end);
		print_r($stats);
	}

	function update() {
		$this->Timer->start(TIMER_SOCIAL_UPDATE);
		set_time_limit(TIME_LIMIT_SOCIAL_UPDATE);
		ini_set('memory_limit', MEMORY_LIMIT_SOCIAL_UPDATE.'M');

		$this->data = array();
		$count = 0;

		$cutoff = $this->Date->day_start($this->Date->days_ago($this->Setting->get('SOCIAL_TRAFFIC_HISTORY')));
		$social_pages = $this->SocialPage->get(0 /* page_id */, $cutoff);

		$script_count = 0;
		$script_total = count($social_pages);
		$this->Timer->progress_set(0);
		$this->Timer->running_set();

		foreach ($social_pages as $social_page) {
			$this->data[$count]['HistorySocial']['page_id'] = $social_page['SocialPage']['page_id'];
			$this->data[$count]['HistorySocial']['likes_fb'] = $social_page['SocialPage']['likes_fb'];
			$this->data[$count]['HistorySocial']['shares_fb'] = $social_page['SocialPage']['shares_fb'];
			$this->data[$count]['HistorySocial']['comments_fb'] = $social_page['SocialPage']['comments_fb'];
			$count++;

			// Do batches
			if ($count == 1000) {
				$rc = $this->HistorySocial->saveAll($this->data);
				plat_assert($rc);

				$this->data = array();
				$this->SocialPage->create();
				$count = 0;
			}

			$script_count++;
			$this->Timer->progress_set($script_count, $script_total);
			$this->Timer->running_set();
		}

		// Save the last batch
		$rc = $this->HistorySocial->saveAll($this->data);
		plat_assert($rc);

		$data = $this->Timer->set_memory_limit();
		$this->Timer->stop_save($data);
	}

	/* Abstract Methods */
	function stats_day($page_id, $date = NULL) {
		return $this->_stats_day($page_id, $date);
	}

	function stats_cache_get($page_website, $date) {
		return 0;
	}

	function stats_cache_set($page_website, $date, $stats) {
		return 0;
	}

	function base_point($base_start, $datetime_start, $id) {
		$point = $this->HistorySocial->base_point($base_start, $datetime_start, $id);

		return $point;
	}

	function base_points($base_start, $datetime_start, $id, $points) {
		return $this->base_point($base_start, $datetime_start, $id);
	}

	function point($datetime_start, $datetime_end, $id) {
		$point = $this->HistorySocial->point($datetime_start, $datetime_end, $id);

		return $point;
	}

	function points($datetime_start, $datetime_end, $id) {
		return $this->point($datetime_start, $datetime_end, $id);
	}

	function point_current($id) {
		$point = $this->SocialPage->point($id);

		return $point;
	}

	function points_current($id) {
		return $this->SocialPage->point($id);
	}

	function point_integrate($id, $point) {
		return $id;
	}

	function points_aggregate($points) {
		return $points;
	}

	function stats_init($stats) {
		$stats['likes_fb'] = 0;
		$stats['shares_fb'] = 0;
		$stats['comments_fb'] = 0;

		return $stats;
	}

	function stats_non_zero($stats) {
		if ($stats['likes_fb'] || $stats['shares_fb'] || $stats['comments_fb']) {
			return 1;
		} else {
			return 0;
		}
	}

	function stats_set($stats, $data) {
		$stats['likes_fb'] = $data['likes_fb'];
		$stats['shares_fb'] = $data['shares_fb'];
		$stats['comments_fb'] = $data['comments_fb'];

		return $stats;
	}

	function stats_add($stats, $data) {
		$stats['likes_fb'] += $data['likes_fb'];
		$stats['shares_fb'] += $data['shares_fb'];
		$stats['comments_fb'] += $data['comments_fb'];

		return $stats;
	}

	function stats_delta($stats, $base) {
		$stats['likes_fb'] = $stats['likes_fb'] - $base['likes_fb'];
		$stats['shares_fb'] = $stats['shares_fb'] - $base['shares_fb'];
		$stats['comments_fb'] = $stats['comments_fb'] - $base['comments_fb'];

		return $stats;
	}

	function stats_validate($stats, $info) {
		$data = array();
		$data[] = print_r($stats, 1);
		$data[] = print_r($info, 1);

		plat_assert(isset($stats['likes_fb']), $data);
		plat_assert(isset($stats['shares_fb']), $data);
		plat_assert(isset($stats['comments_fb']), $data);
	}

}
/* */

?>
