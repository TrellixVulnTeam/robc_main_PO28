<?php
include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

abstract class HistoryController extends AppController {

	abstract protected function base_point($base_start, $datetime_start, $id);
	abstract protected function point($datetime_start, $datetime_end, $id);
	abstract protected function points_aggregate($points);
	abstract protected function stats_set($stats, $data);
	abstract protected function stats_non_zero($data);
	abstract protected function stats_init($stats);
	abstract protected function stats_add($stats, $data);
	abstract protected function stats_delta($stats, $base);
	abstract protected function stats_validate($stats, $info);
	abstract protected function stats_cache_get($id, $date);
	abstract protected function stats_cache_set($id, $date, $stats);

	function _stats_day($id, $date = null) {
		plat_assert($id);

		if (!$date) {
			$date = $this->Date->yesterday();
		}

		$date = $this->Date->format($date);

		// Check the cache
		if ($this->cache_on && $this->date_cacheable($date)) {
			$cache_stats = $this->stats_cache_get($id, $date);

			if (1 && $cache_stats) {
				return $cache_stats;
			}
		}

		$datetime_start = $this->Date->day_start($date);
		$datetime_end = $this->Date->day_end($date);
		$stats = $this->stats_range($id, $datetime_start, $datetime_end);

		// Set the cache
		if ($this->date_cacheable($date) && $this->cache_on) {
			$this->stats_cache_set($id, $date, $stats);
		}

		return $stats;
	}

	function stats_hour($id, $datetime) {
		plat_assert($id);

		$datetime_start = $this->Date->hour_start($datetime);
		$datetime_end = $this->Date->hour_end($datetime);

		$stats = $this->stats_range($id, $datetime_start, $datetime_end);

		return $stats;
	}

	function stats_time($id, $point, $time_unit) {
		switch ($time_unit) {
			case TIME_UNIT_HOUR:
				return $this->stats_hour($id, $point);
			case TIME_UNIT_DAY:
				return $this->_stats_day($id, $point);
				break;
			default:
				plat_assert(0);
		}
	}

	function point_range($id, $datetime_start, $datetime_end) {
		if ($this->Date->is_today($datetime_end)) {
			$this->debug("point_range: ".$id." today\n");
			$point = $this->point_current($id);
		} else {
			$this->debug("point_range: ".$id." ".$datetime_start." - ".$datetime_end."\n");
			$point = $this->point($datetime_start, $datetime_end, $id);
		}

		return $point;
	}

	function points_range($id, $datetime_start, $datetime_end) {
		if ($this->Date->is_today($datetime_end)) {
			$this->debug("points_range: ".$id." today\n");
			$points = $this->points_current($id);
		} else {
			$this->debug("points_range: ".$id." ".$datetime_start." - ".$datetime_end."\n");
			$points = $this->points($datetime_start, $datetime_end, $id);
		}

		return $points;
	}

	function stats_range($id, $datetime_start, $datetime_end) {
		$base_start = $this->Date->day_start($this->Date->date_subtract($datetime_start, 1));

		// Get day's points and stats
		$points = $this->points_range($id, $datetime_start, $datetime_end);
		$stats = $this->points_aggregate($points);

		$this->debug("Days points and stats: ".print_r(array($points, $stats), true));

		if (!$points || !$this->stats_non_zero($stats)) {
			return $this->stats_init($stats);
		}

		// Gets base points and stats
		$base_points = $this->base_points($base_start, $datetime_start, $id, $points);
		$base_stats = $this->points_aggregate($base_points);

		$this->debug("Base points and stats: ".print_r(array($base_points, $base_stats), true));

		if (!$base_points || !$this->stats_non_zero($base_stats)) {
			$base_points = $this->stats_init($base_points);
		}

		// Validate days and base stats
		$params = array(
			"id" => $id,
			"datetime_start" => $datetime_start,
			"datetime_end" => $datetime_end
		);

		$this->stats_validate($stats, $params);
		$this->stats_validate($base_stats, $params);

		/* Find the difference */
		$stats = $this->stats_delta($stats, $base_stats);

		// Validate again
		$this->stats_validate($stats, $params);

		return $stats;
	}

	public function date_cacheable($date) {
		if ($this->Date->age($date) > 0) {
			return 1;
		} else {
			return 0;
		}
	}

	/* Charting */
	public function chart() {
		set_time_limit(60*30);
		ini_set('memory_limit', '2048M');

		if ($this->RequestHandler->isAjax()) {
			Configure::write("debug", $this->debug);
			$this->RequestHandler->renderAs($this, 'ajax');
		}

		$this->layout = "";

		$start_time = $_GET['start_time'];
		$end_time = $_GET['end_time'];
		if (empty($_GET['time_unit'])) {
			$time_unit = TIME_UNIT_DAY;
		} else {
			$time_unit = $_GET['time_unit'];
		}

		$last_day = $this->Date->format_timestamp($end_time);
		$first_day = $this->Date->format_timestamp($start_time);

		if ($time_unit < TIME_UNIT_DAY) {
			$end_time = strtotime($this->Date->day_end($last_day));
		}

		$start_time = strtotime($first_day);	// This cleans it up


		// The first day we have records for.
		// Hack alert
		if ($first_day < "2010-04-17 00:00:00") {
			$first_day = "2010-04-17 00:00:00";
		}

		if (0) {
			echo "Time Unit: ".$time_unit."<br>\n";
			echo "Start Time: ".$start_time."<br>\n";
			echo "End Time: ".$end_time."<br>\n";
			echo "First Day: ".$first_day."<br>\n";
			echo "Last Day: ".$last_day."<br>\n";
		}

		$num_points = $this->Date->num_points_timestamp($start_time, $end_time, $time_unit);

		$request = $this->chart_request();

		$website_ids = $this->chart_websites($request);

		$cached_all_point = 0;
		$cached_domain_point = array();

		$history_domain = array();
		$history_all = array();

		/************** Check Cache ************/
		if ($this->cache_on) {
			// All
			if ($request['is_all']) {
				$history_all = array();
				for ($i = 0; $i < $num_points; $i++) {
					// We got the extra day so not to count today
					$point = $this->Date->point_add($first_day, $i, $time_unit);

					$cache = $this->chart_get_cache_all($point);
					if ($cache) {
						$history_all[$point] = $cache;
					} else {
						break;
					}
				}
				$cached_all_point = $i;
			}

			// Domain
			if ($request['is_domains']) {
				$history_domain = array();
				foreach ($request['domains'] as $domain_id) {
					$cached_domain_point[$domain_id] = -1;

					for ($i = 0; $i < $num_points; $i++) {
						$point = $this->Date->point_add($first_day, $i, $time_unit);
						$cache = $this->chart_get_cache_domain($point, $domain_id);
						if ($cache) {
							$history_domain[$point][$domain_id] = $cache;
						} else {
							break;
						}
						$cached_domain_point[$domain_id] = $i+1;
					}
				}
			}
		}

		/************** Pull Data ************/
		$cached_min_point = $this->chart_min_cache_point($cached_all_point, $cached_domain_point, $request);
		if ($cached_min_point < $num_points) {
			$history = array();

			$this->Website->bindModel(
				array(
					'hasOne' => array('Account'),
				)
			);

			$websites = $this->Website->find(
				'all',
				array(
					'fields' => array(
						'Website.id',
						'Website.domain_primary',
						'Account.paid',
                        'Account.id',
					),
					'conditions' => array(
						'Website.id' => $website_ids,
					),
				)
			);

			foreach ($websites as $website) {
				$website_id = $website['Website']['id'];
				$account = array('Account' => $website['Account']);
				$website = array('Website' => $website['Website']);
				$domain_id = $website['Website']['domain_primary'];

				$domain_websites[$domain_id][] = $website_id;

				for($i = $cached_min_point; $i < $num_points; $i++) {
					$point = $this->Date->point_add($first_day, $i, $time_unit);

					// Initialize
					if (empty($history[$point][$website_id])) {
						$history[$point][$website_id] = $this->chart_initialize_stats($website_id);
					}
					if (empty($history_domain[$point][$domain_id])) {
						$history_domain[$point][$domain_id] = $this->chart_initialize_cumulative_stats();
					}
					if (empty($history_all[$point])) {
						$history_all[$point] = $this->chart_initialize_cumulative_stats();
					}

					$history = $this->chart_process_website($history, $website_id, $request, $point, $time_unit, $account);
					$history_domain = $this->chart_process_domain_increment($history_domain, $history[$point][$website_id], $point, $account, $domain_id);
					$history_all = $this->chart_process_all_increment($history_all, $history[$point][$website_id], $point, $account);
				}
			}
		}

		// Aggregate pieces for Domains
		if ($request['is_domains']) {
			for ($i = $cached_min_point; $i < $num_points; $i++) {
				$point = $this->Date->point_add($first_day, $i, $time_unit);

				foreach ($domain_websites as $domain_id => $websites) {
					if (isset($cached_domain_point[$domain_id]) && $cached_domain_point[$domain_id] < $i) {
						$history_domain = $this->chart_process_domain_aggregate($history_domain, $website_ids, $point, $domain_id, $time_unit);
					}
				}
			}
		}

		// Aggregate pieces for All
		if ($request['is_all']) {
			for ($i = $cached_all_point; $i < $num_points; $i++) {
				$point = $this->Date->point_add($first_day, $i, $time_unit);

				$history_all = $this->chart_process_all_aggregate($history_all, $website_ids, $point, $time_unit);
			}
		}

		/************** Create Lines ************/
		// Create Lines Websites
		if ($request['is_websites']) {
			$out = array();
			foreach ($website_ids as $website_id) {
				$line = $this->chart_line_initialize($request);
				foreach ($history as $point => $stats) {
					$line = $this->chart_line_data($line, $stats, $website_id, $request);
				}

				$out = $this->chart_lines($out, $line, $website_id, $request, false, $time_unit);
			}
		}

		// Create Lines Domains
		if ($request['is_domains']) {
			$out = array();
			foreach ($request['domains'] as $domain_id) {
				$line = $this->chart_line_initialize($request);

				foreach ($history_domain as $point => $stats) {
					$line = $this->chart_line_data($line, $stats, false, $request, $domain_id);
				}

				$out = $this->chart_lines($out, $line, false, $request, $domain_id, $time_unit);

				// Set cache
				if ($this->cache_on) {
					for ($i = $cached_min_point; $i < $num_points; $i++) {
						$point = $this->Date->point_add($first_day, $i, $time_unit);

						if ($this->chart_cacheable($point, $time_unit)) {
							$this->chart_set_cache_domain($point, $history_domain[$point][$domain_id], $domain_id);
						}
					}
				}


			}
		}

		// Create Lines All
		if ($request['is_all']) {
			$out = array();
			$line = $this->chart_line_initialize($request);
			foreach ($history_all as $point => $stats) {
				$line = $this->chart_line_data($line, $stats, false, $request);
			}

			$out = $this->chart_lines($out, $line, false, $request, false, $time_unit);

			// Set cache
			if ($this->cache_on) {
				for ($i = $cached_all_point; $i < $num_points; $i++) {
					$point = $this->Date->point_add($first_day, $i, $time_unit);

					if ($this->chart_cacheable($point, $time_unit)) {
						$this->chart_set_cache_all($point, $history_all[$point]);
					}
				}
			}
		}

		print_r(json_encode($out));
	}

	function chart_min_cache_point($cached_all_point, $cached_domain_point, $request) {
		$min_point = PHP_INT_MAX;

		if ($request['is_domains']) {
			foreach ($request['domains'] as $domain_id) {
				if (isset($cached_domain_point[$domain_id])) {
					$min_point = min($cached_domain_point[$domain_id], $min_point);
					if ($min_point < 0) {
					    $min_point = 0;
					}
				}
			}

			if ($min_point == PHP_INT_MAX) {
				$min_point = 0;
			}
		}

		if ($request['is_all']) {
			$min_point = min($min_point, $cached_all_point);
		}

		if ($request['is_websites']) {
			// No caching on this today
			$min_point = 0;
		}

		return $min_point;
	}

	function chart_cacheable($point, $time_unit) {
		// Anything not today is good
		if (!$this->Date->is_today($point)) {
			return 1;
		}

		if ($time_unit == TIME_UNIT_DAY) {
			return 0;
		}

		switch ($time_unit) {
			case TIME_UNIT_DAY:
			return 0;
			break;
			case TIME_UNIT_HOUR:
			return $this->Date->is_current_hour($point);
			break;
			default:
			plat_assert(0);
		}
	}

	function chart_request() {
		$is_domains = 0;
		$is_websites = 0;

		$websites = $_GET['websites'];

		if (isset($_GET['domains'])) {
			$domains = $_GET['domains'];
		} else {
			$domains = NULL;
		}

		if (0) {
			$websites = "all";
			$websites = "4,432";
		}

		if (empty($_GET['types'])) {
			plat_assert(0);
		} else {
			$types = explode(",", $_GET['types']);
		}

		if ($websites == "all") {
			$all_websites = 1;
		} else {
			$all_websites = 0;
		}

		if (null !== $domains && ($domains == DOMAIN_ID_CROWD_IGNITE || strlen($domains) > 0)) {
			$domains = explode(",", $domains);
			$is_domains = 1;
		}

		if ($websites != "all" && $websites) {
			$is_websites = 1;
		}

		$request['is_all'] = $all_websites;
		$request['is_domains'] = $is_domains;
		$request['is_websites'] = $is_websites;

		$request['types'] = $types;
		$request['all'] = $all_websites;
		$request['domains'] = $domains;
		$request['websites'] = $websites;

		return $request;
	}

	function chart_websites($request) {
		$websites = array();

		if ($request['all'] || $request['domains']) {
			return $this->chart_websites_group($request);
		} else {
			if ($request['websites']) {
				$websites = explode(",", $request['websites']);
			}
		}
		return $websites;
	}

	function chart_websites_group($request) {
		$conditions = array(
			"visible" => true,
			"status" => array(
				WEBSITE_STATUS_ACTIVE,
				WEBSITE_STATUS_INACTIVE,
				WEBSITE_STATUS_NEW,
				WEBSITE_STATUS_TRANSFER)
			);

		if ($request['domains']) {
			$conditions['domain_primary'] = $request['domains'];
		}

		$tmp_websites = $this->Website->find("all", array("conditions" => $conditions));
		$websites = array();
		foreach($tmp_websites as $tmp_website) {
			$websites[] = $tmp_website['Website']['id'];
		}

		return $websites;
	}

	function chart_interval($time_unit) {
		switch ($time_unit) {
			case TIME_UNIT_HOUR:
			return 1 * 60 * 60;
			break;
			case TIME_UNIT_DAY:
			return 24 * 60 * 60;
			break;
			default:
			plat_assert(0);
		}
	}

	function get_ctr($numerator, $denominator) {
		if ($denominator) {
			$ctr = $numerator / $denominator;
			$ctr *= 100;
		} else {
			$ctr = 0;
		}

		$ctr = $this->format_number($ctr);

		return $ctr;
	}

	function format_number($number) {
		return round($number, 2);
	}

	function debug($string) {
		if ($this->debug) {
			echo $string;
		}
	}
}

?>
