<?php

namespace Test\Api;
use CI\Api\Response;

/**
 * @group Api
 * @group Response
 */

class ResponseTest extends \PHPUnit_Framework_TestCase
{
    protected $oResponse;

    public function setUp()
    {
        $this->oResponse = new \CI\Api\Response();
    }

    public function testDefaultAnswer()
    {
        $sExpected = json_encode(
            array(
                'status' => 'error',
                'msg' => 'Error on: default',
                'errors' => array()
            )
        );

        $sResponse = $this->oResponse->get();

        $this->assertEquals($sExpected, $sResponse);
    }

    public function testSetOnlyOneError()
    {
        $sExpected = json_encode(
            array(
                'status' => 'error',
                'msg' => 'Error on: adding something',
                'errors' => array(
                    array(
                        'name' => 'img',
                        'msg' => 'does not exists'
                    )
                )
            )
        );

        $this->oResponse->setMessage('adding something');
        $this->oResponse->addError('img', 'does not exists');
        $sResponse = $this->oResponse->get();

        $this->assertEquals($sExpected, $sResponse);
    }

    public function testSetManyErrors()
    {
        $sExpected = json_encode(
            array(
                'status' => 'error',
                'msg' => 'Error on: adding something',
                'errors' => array(
                    array(
                        'name' => 'img',
                        'msg' => 'does not exists'
                    ),
                    array(
                        'name' => 'text',
                        'msg' => 'empty text'
                    )
                )
            )
        );

        $this->oResponse->setMessage('adding something');
        $this->oResponse->addError('img', 'does not exists');
        $this->oResponse->addError('text', 'empty text');
        $sResponse = $this->oResponse->get();

        $this->assertEquals($sExpected, $sResponse);
    }

    public function testOkAnsweWithOneData()
    {
        $sExpected = json_encode(
            array(
                'status' => 'ok',
                'msg' => 'Adding text done',
                'data' => array(
                    'text' => 'Done'
                )
            )
        );
        $this->oResponse->setMessage('Adding text');
        $this->oResponse->addData('text', 'Done');
        $sResponse = $this->oResponse->get();

        $this->assertEquals($sExpected, $sResponse);
    }

    public function testOkAnsweWithManyData()
    {
        $sExpected = json_encode(
            array(
                'status' => 'ok',
                'msg' => 'Adding text done',
                'data' => array(
                    'id' => 'Done',
                    'name' => 'Correct'

                )
            )
        );
        $this->oResponse->setMessage('Adding text');
        $this->oResponse->addData('id', 'Done');
        $this->oResponse->addData('name', 'Correct');
        $sResponse = $this->oResponse->get();

        $this->assertEquals($sExpected, $sResponse);
    }

    public function testaddErrorAndAfteraddData()
    {
        $sExpected = json_encode(
            array(
                'status' => 'ok',
                'msg' => 'Change from Error to Ok done',
                'data' => array(
                    'id'=> 'Done'
                )
            )
        );

        $this->oResponse->setMessage('Change from Error to Ok');
        $this->oResponse->addError('img', 'incorrect path');
        $this->oResponse->addData('id', 'Done');

        $sResponse = $this->oResponse->get();
        $this->assertEquals($sExpected, $sResponse);
    }

    public function testaddDataAndAfteraddError()
    {
        $sExpected = json_encode(
            array(
                'status' => 'error',
                'msg' => 'Error on: Change from Ok to Error',
                'errors' => array(
                    array(
                        'name' => 'img',
                        'msg' => 'incorrect path'
                    )
                )
            )
        );

        $this->oResponse->setMessage('Change from Ok to Error');
        $this->oResponse->addData('id', 'Done');
        $this->oResponse->addError('img', 'incorrect path');

        $sResponse = $this->oResponse->get();
        $this->assertEquals($sExpected, $sResponse);
    }

    public function testAddErrorsWithOnlyOneElement()
    {
        $sExpected = json_encode(
            array(
                'status' => 'error',
                'msg' => 'Error on: adding something',
                'errors' => array(
                    array(
                        'name' => 'img',
                        'msg' => 'does not exists'
                    )
                )
            )
        );

        $this->oResponse->setMessage('adding something');
        $this->oResponse->addErrors(
            array(
                'img' => 'does not exists'
            )
        );
        $sResponse = $this->oResponse->get();
        $this->assertEquals($sExpected, $sResponse);
    }

    public function testAddErrorsWithManyElements()
    {
        $sExpected = json_encode(
            array(
                'status' => 'error',
                'msg' => 'Error on: adding something',
                'errors' => array(
                    array(
                        'name' => 'img',
                        'msg' => 'does not exists'
                    ),
                    array(
                        'name' => 'text',
                        'msg' => 'empty text'
                    )
                )
            )
        );

        $this->oResponse->setMessage('adding something');
        $this->oResponse->addErrors(
            array(
                'img' => 'does not exists',
                'text' => 'empty text'
            )
        );
        $sResponse = $this->oResponse->get();
        $this->assertEquals($sExpected, $sResponse);
    }
}