<?php

/**
 * Common Operations on Vowpal Wabbit
 *
 * PHP Version 5.3
 *
 * @category CI
 * @package  CI\VowpalWabbit\Parser
 * @author   Julio Rodriguez <julio.rodriguez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 */

namespace CI\VowpalWabbit\Parser;
use CI\Date;

require_once LIBRARY_DIR . 'logger/interface.php';
require_once LIBRARY_DIR . 'logger.php';
require_once LIBRARY_DIR . 'logger/storage/file.php';

/**
 * Common Operations on Vowpal Wabbit
 *
 * PHP Version 5.3
 *
 * @category CI
 * @package  CI\VowpalWabbit\Parser
 * @author   Julio Rodriguez <julio.rodriguez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 */

abstract class Common
{
    const DONE_PATH                  = 'done/';
    const WIDGET_ERROR_LOG_PATH      = '/app/log/vw_widget-error_log';
    const LANDIN_PAGE_ERROR_LOG_PATH = '/app/log/vw_landing-page-error_log';
    const FAILED_PATH                = 'failed/';

    const TYPE_LOGGER_ERROR          = 1;
    const TYPE_LOGGER_FAILED         = 2;

    protected $sMountLogs;
    protected $sPath;
    protected $aKeys;
    protected $sDate;
    protected $sServerPattern;
    protected $sPrefixName;
    protected $sErrorLogPath;
    protected $sDateFile;

    private $_oErrorLogger;

    public function __construct()
    {
        if (empty($this->sMountLogs)) {
            $this->sMountLogs = '/app/data/';
        }

        if (empty($this->sPath)) {
            $this->sPath = '/app/data/vwinput/';
        }

    }

    public function setMountLogs($sMountLogs)
    {
        $this->sMountLogs = $this->sMountLogs . $sMountLogs;
    }

    public function getLogger($nType = self::TYPE_LOGGER_ERROR)
    {

        if (!isset($this->_oErrorLogger[$nType])) {

            if ($nType == self::TYPE_LOGGER_FAILED ) {
                $sPath = $this->sMountLogs . self::FAILED_PATH . $this->sPrefixName . $this->sDateFile;
            } else {
                $sPath = $this->sErrorLogPath;
            }

            $oLoggerStorageFile= new \Logger_Storage_File(
                array(
                    'filepath' => $sPath
                )
            );

            $this->_oErrorLogger[$nType] = new \Logger($oLoggerStorageFile);
        }

        return $this->_oErrorLogger[$nType];
    }

    /**
     * Add one hour at the date
     *
     * @param string $sDate date will be add one  hour
     *
     * @return string with the date + 1 hour
     */
    protected function increment30Minutes($sDate)
    {
        $sReturn = str_replace('_', ' ', $sDate);
        $oDate = new Date();
        $oDate->setFormat('Ymd.Hi');
        $sReturn = $oDate->incrementOrDecrementMinutes($sReturn, +30);
        return $sReturn;
    }

    /**
     * Function to know is one timestamp is in on the time frime (positive)
     *
     * @param integer $nTimeStamp date to be comparate
     * @param integer $nSeconds   senconds after the date we want compare
     *
     * @return boolena true if the date is in time frame, false on otherside
     */
    public function isInTimeFrame($nTimeStamp, $nSeconds)
    {
        $bReturn = false;
        $sStartDate = str_replace('_', ' ', $this->sDate);
        $nStartDate = strtotime($sStartDate);
        $nDiference = $nTimeStamp - $nStartDate;

        if ($nDiference >= 0 and $nDiference <= $nSeconds) {
            $bReturn = true;
        }

        return $bReturn;
    }

    /**
     * Method to get the list of directories
     *
     * @return list of dirs
     */
    public function getDirLogs()
    {
        $aReturn = array();
        $aDirs = scandir($this->sMountLogs);

        foreach ($aDirs as $nIndex => $sDir) {
            if (preg_match($this->sServerPattern, $sDir) === 1) {
                $aReturn[] = $sDir;
            }
        }

        if (empty($aReturn)) {
            $sExtraInfo = PHP_EOL . 'sMountLogs = [' . $this->sMountLogs . '] ';
            $sExtraInfo .= PHP_EOL . 'aDirs = [' . print_r($aDirs, true) . '] ';
            $sExtraInfo .= PHP_EOL . 'hostname = [' . php_uname('n') . '] ';

            throw new \CI\File\Exception(\CI\File\Exception::DIRS_NOT_FOUND, $sExtraInfo);
        }

        return $aReturn;
    }

    public function getAllLogs($sDate)
    {
        $sPhysicalFiles = array();
        $aDirs = $this->getDirLogs();

        foreach ($aDirs as $key => $sDir) {
            $sPhysicalFiles[] = $this->sMountLogs . $sDir . '/vwlogs/' . $this->sPrefixName . $sDate;
        }

        return $sPhysicalFiles;
    }

    /**
     * Sanitaze the string
     *
     * @param string $sValue value to be sanitaze
     *
     * @return string a sanitaze string.
     */
    public function sanitaze($sValue)
    {
        return trim($sValue);
    }

    protected function moveDoneFiles($sDate)
    {
        $aFiles = $this->getAllLogs($sDate);

        foreach ($aFiles as $sFilePath) {
            $aPathInfo = pathinfo($sFilePath);
            $sDonePath = $aPathInfo['dirname'] . '/' . self::DONE_PATH . $aPathInfo['basename'];
            rename($sFilePath, $sDonePath);
        }
    }
}
