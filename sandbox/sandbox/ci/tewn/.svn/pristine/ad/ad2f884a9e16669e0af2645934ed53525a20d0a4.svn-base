<?php

namespace CI\Test\Filter\String;
use CI\Filter\String\WordsNumber;

/**
 * @group filter
 * @group filter_string
 */
class FilterStringWordsNumberTest extends \PHPUnit_Framework_TestCase
{
    private $oWordsNumber;

    public function setUp()
    {
        $this->oWordsNumber = new WordsNumber();
    }

    /**
     * Tests if a string is WordsNumberd given it's Words
     *
     * @dataProvider getWordsNumber
     */
    public function testWordsNumber($nWords)
    {
        $sString = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy';

        $this->oWordsNumber->setWords($nWords);
        $sResult = $this->oWordsNumber->filter($sString);

        $this->assertEquals($nWords, str_word_count($sResult));
    }

    /**
     * @expectedException \CI\String\Exception
     * @expectedExceptionCode \CI\String\Exception::NOT_VALID
     */
    public function testInvalidFilterValue()
    {
        // The filter function only accept a string like parameter, should
        // throw the exception.
        $this->oWordsNumber->setWords(15)->filter(999999);
    }

    /**
     * Tests if throw a \CI\String\Exception when the Words is not set.
     *
     * @expectedException \CI\String\Exception
     * @expectedExceptionCode \CI\String\Exception::INVALID_WORDS_NUMBER
     */
    public function testWordsIsNotSet()
    {
        $this->oWordsNumber->filter('Lorem ipsum dolor sit amet, consectetuer adipiscing elit');
    }

    /**
     * Tests if throw a \CI\String\Exception when the Words is not greater than
     * zero.
     *
     * @expectedException \CI\String\Exception
     * @expectedExceptionCode \CI\String\Exception::INVALID_WORDS_NUMBER
     * @dataProvider getInvalidWords
     */
    public function testInvalidWords($nWords)
    {
        $this->oWordsNumber->setWords($nWords)->filter('Lorem ipsum dolor sit amet, consectetuer adipiscing elit');
    }

    public function getWordsNumber()
    {
        return array(
            array(5),
            array(3),
            array(11),
        );
    }

    public function getInvalidWords()
    {
        return array(
            array(0),
            array(-1),
            array("Lorem")
        );
    }

    public function tearDown()
    {
        unset($this->oWordsNumber);
    }
}