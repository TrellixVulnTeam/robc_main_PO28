<?php
include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");
include_once (ROOT . DS . APP_DIR . DS . "controllers/history_controller.php");

class HistoryPagesController extends AppController
{
	var $name = 'HistoryPages';
	var $uses = array("Page", "Website", 'Setting', 'StatsPage');
	var $components = array('RequestHandler', 'Date', 'Timer');

	var $cache_on = 1;
	var $debug = 0;

	/*
	 * Save the current snapshot
	 */
	function update() {
        $this->autoRender = false;
        echo "Please Fletcher... remove me... please... im the cron /history_pages/update";
        exit;
	}

	public function precache() {
		$this->autoRender = false;

		$this->Timer->start(TIMER_HISTORY_PAGES_PRECACHE);
		set_time_limit(TIME_LIMIT_HISTORY_PAGES_PRECACHE);
		ini_set('memory_limit', MEMORY_LIMIT_HISTORY_PAGES_PRECACHE.'M');

		debug_message('Start Precaching');

		$websites = $this->Website->find('all', array(
			'conditions' => array(
				"visible" => 1,
				"status" => WEBSITE_STATUS_ACTIVE
			),
			'fields' => array('id', 'name')
		));

		debug_memory('Processing '.count($websites).' Websites');

		$script_count = 0;
		$script_total = count($websites);
		$this->Timer->progress_set(0);
		$this->Timer->running_set();

		$oDate = new CI\Date();
		$rank_traffic_period      = $oDate->getDaysAgo($this->Setting->get('RANK_TRAFFIC_PERIOD'));
		$rank_traffic_history     = $oDate->getDaysAgo($this->Setting->get('RANK_TRAFFIC_HISTORY'));
		$rank_minimum_impressions = $this->Setting->get('RANK_MINIMUM_IMPRESSIONS');

		$chunk_size = 5000;
		debug_message('Start processing '.count($websites).' websites in chunks of '.$chunk_size);
		foreach ($websites as $website) {
			$chunk = 0;
			echo 'Processing Website '.$website['Website']['id'].': ';
			do {
				$pages = $this->Page->find('list', array(
					'fields' => array('id'),
					'order' => 'id',
					'limit' => $chunk_size,
					'offset' => ($chunk * $chunk_size) + 1,
					'conditions' => array(
						"website_id" => $website['Website']['id'],
						'OR' => array(
							'AND' => array(
								'status' => PAGE_STATUS_PENDING,
								'impressions >=' => $rank_minimum_impressions,
							),
							'status' => PAGE_STATUS_APPROVED
						),
						"visible" => TRUE
					),
				));
				$chunk++;
				if (empty($pages)) {
					break;
				}
				$pages = array_keys($pages);

				$this->_precaching_points($pages, $rank_traffic_period);
				$this->_precaching_points($pages, $rank_traffic_history);
				echo '*';
			} while (count($pages) == $chunk_size);
			debug_memory(' Done');

			$script_count++;
			$this->Timer->progress_set($script_count, $script_total);
			$this->Timer->running_set();
		}
		debug_message('Done');

		/* Save off timer */
		$data = $this->Timer->set_memory_limit();
		$this->Timer->stop_save($data);
	}

	private function _precaching_points($pages, $start_date)
	{
		$oDate = new CI\Date();
		$yesterday = $oDate->yesterday();
		$oKeyGen = new CI\Memcached\KeyGen('', 'history_controller_stats_range');

		$params = array(
			'fields' => array('page_id, IFNULL(SUM(impressions), 0) AS impressions'),
			'conditions' => array(
				'page_id'    => $pages,
				'created >=' => strtotime($start_date),
				'created <=' => strtotime($oDate->yesterday()),
			),
			'group' => 'page_id',
		);

		$points = $this->StatsPage->find('all', $params);
		if ($points) {
			foreach ($points as $point) {
				$cache_key = $oKeyGen->setValues(
					array($point['StatsPage']['page_id'], $start_date, $yesterday)
				)->generate();
				$this->StatsPage->memcached_set_json($cache_key, $point[0]['impressions']);
			}
		}
	}

	function stats_days($page_id, $num_days) {
		$oDate      = new CI\Date();
		$start_date = $oDate->getDaysAgo($num_days);
		$end_date   = $oDate->yesterday();
		return $this->stats_range($page_id, $start_date, $end_date);
	}

	public function stats_day($page_id, $date = null)
	{
		if (empty($date)) {
			$oDate = new CI\Date();
			$date = $oDate->yesterday();
		}

		$oKeyGen   = new \CI\Memcached\KeyGen(array($page_id, $date), 'history_pages_stats_day');
		$cache_key = $oKeyGen->generate();

		$stats = array();
		if ($this->cache_on) {
			$stats = $this->StatsPage->memcached_get_json($cache_key);
		}

		if (empty($stats)) {
			$oStatsPage = new CI\Stats\Page();
			$stats = $oStatsPage
				->setModel($this->StatsPage)
				->setPageId($page_id)
				->setDate($date)
				->getData();
			if ($this->cache_on) {
				$this->StatsPage->memcached_set_json($cache_key, $stats);
			}
		}
		return $stats;
	}

	// just to have old compatibility
	public function _stats_day($page_id, $date = null)
	{
		return $this->stats_day($page_id, $date);
	}

	function stats_page_time($page_id, $start_timestamp, $end_timestamp = 0) {
		$oDate = new CI\Date();
		$datetime_start = $oDate->oFormat->timestampToDatetime($start_timestamp);
		$datetime_end = $oDate->yesterdayEnd();
		if ($end_timestamp > 0) {
			$datetime_end = $oDate->oFormat->timestampToDatetime($end_timestamp);
		}

		$total_stats = $this->stats_range($page_id, $datetime_start, $datetime_end);

		if ($this->RequestHandler->isAjax()) {
			$this->autoRender = false;
			Configure::write('debug', 0);
			return json_encode($total_stats);
		}
		return $total_stats;
	}

	function stats_range($page_id, $datetime_start, $datetime_end)
	{
		$oDate      = new CI\Date();
		$start_date = $oDate->oFormat->dateStart($datetime_start);
		$end_date   = $oDate->oFormat->dateEnd($datetime_end);
		$oKeyGen    = new CI\Memcached\KeyGen(
			array($page_id, $datetime_start, $datetime_end),
			'history_pages_stats_range'
		);
		$cache_key  = $oKeyGen->generate();

		$stats = array();
		if ($this->cache_on) {
			$stats = $this->StatsPage->memcached_get_json($cache_key);
		}

		if (empty($stats)) {
			$oStatsPage = new CI\Stats\Page();
			$stats = $oStatsPage
				->setModel($this->StatsPage)
				->setPageId($page_id)
				->setDateRange($start_date, $end_date)
				->getData();
			if ($this->cache_on) {
				$this->StatsPage->memcached_set_json($cache_key, $stats, 86400 /*24 hours*/);
			}
		}
		return $stats;
	}

	/* Return the last 20 days of traffic of a page in csv for sparkline jquery plugin. AZ292 */
	function page_stats_chart($page_id = null) {

		Configure::write('debug', 0);
		$this->autoRender = false;

		$oDate = new CI\Date();
		$datetime_start = $oDate->getDaysAgo(21);
		$datetime_end = $oDate->today();

		/* Get page's traffic by day */
		$points = $this->StatsPage->find(
			"all",
			array(
				"conditions" => array(
					"created >=" => strtotime($datetime_start),
					"created <=" => strtotime($datetime_end),
					"page_id" => $page_id
				),
				"fields" => array("created, IFNULL(SUM(impressions), 0) AS imp"),
				"order" => "created DESC",
				"group" => "created",
				"limit" => 20
			)
		);

		$io = array();
		$datetime_current = $datetime_start;
		if ($points) {
			// Go through all the dates in the range and fill in the value or zero
			while ($datetime_current < $datetime_end) {
				foreach ($points as $point) {
					$point_date = $oDate->oFormat->timestampToDate($point['StatsPage']['created']);
					$val = 0;
					if ($point_date == $datetime_current) {
						// Add count to the array
						$val =  $point['0']['imp']; // $point_date;
						break;
					}
				}
				$io[] = $val;
				// Add a day to the current date
				$datetime_current = $oDate->addDays($datetime_current, 1);
			}
		}
		return implode(",", $io);
	}
}

?>
