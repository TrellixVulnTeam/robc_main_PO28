<?php
/* SVN FILE: $Id$ */
/* HistoryWidgetsController Test cases generated on: 2010-04-18 10:38:32 : 1271605112*/
class HistoryWidgetsControllerTest extends CakeTestCase {
	var $HistoryWidgets = null;
	var $fixtures = array('app.history_widget', 'app.widget', 'app.website', 'app.account', 'app.stats_widget');

	function startTest() {
		App::import('Controller', 'HistoryWidgets');
		$this->HistoryWidgets = new HistoryWidgetsController();
		$this->HistoryWidgets->constructClasses();
		$this->HistoryWidgets->autoRender = false;
	}

	function testHistoryWidgetsControllerInstance() {
		$this->assertTrue(is_a($this->HistoryWidgets, 'HistoryWidgetsController'));
	}

	function testWebsiteStatsDay(){
		$expected = array(
			'display'			  => 0,
			'incoming'			  => 0,
			'display_basic' 	  => 0,
			'incoming_basic'      => 0,
			'display_contextual'  => 0,
			'incoming_contextual' => 0,
			'display_similar'     => 0,
			'incoming_similar'    => 0,
			'display_tag'         => 0,
			'incoming_tag'        => 0
		);
		$website_id = 1;
		$date = '2010-03-10 16:16:49';

		$results = $this->HistoryWidgets->website_stats_day($website_id, $date);

		$this->assertEqual($expected, $results);
	}

	function testAggregateStatsDay(){
		$expected = array(
			'display'			  => 0,
			'incoming'			  => 0,
			'display_basic' 	  => 0,
			'incoming_basic'      => 0,
			'display_contextual'  => 0,
			'incoming_contextual' => 0,
			'display_similar'     => 0,
			'incoming_similar'    => 0,
			'display_tag'         => 0,
			'incoming_tag'        => 0
		);
		$widgets = array(
			array(
				'Widget' => array(
					'id' => 1,
					'incoming' => 2,
					'display' => 3,
					'display_basic' => 2,
					'incoming_basic' => 1,
					'display_contextual' => 1,
					'incoming_contextual' => 1
				)
			),
			array(
				'Widget' => array(
					'id' => 2,
					'incoming' => 3,
					'display' => 4,
					'display_basic' => 2,
					'incoming_basic' => 2,
					'display_contextual' => 2,
					'incoming_contextual' => 1
				)
			),
			array(
				'Widget' => array(
					'id' => 3,
					'incoming' => 4,
					'display' => 5,
					'display_basic' => 3,
					'incoming_basic' => 2,
					'display_contextual' => 2,
					'incoming_contextual' => 2
				)
			)
		);
		$date_start = date('Y-m-d G:i:s', strtotime('yesterday midnight'));
		$date_end = date('Y-m-d G:i:s', strtotime('today noon'));

		$results = $this->HistoryWidgets->aggregate_stats_range($widgets, $date_start, $date_end);

		$this->assertEqual($expected, $results);
	}

	function testStatsDay(){
		$expected = array(
			'display'			  => 0,
			'incoming'			  => 0,
			'display_basic' 	  => 0,
			'incoming_basic'      => 0,
			'display_contextual'  => 0,
			'incoming_contextual' => 0,
			'display_similar'     => 0,
			'incoming_similar'    => 0,
			'display_tag'         => 0,
			'incoming_tag'        => 0
		);
		$widget_id = 1;
		$date = '2010-03-10 16:16:49';
		$results = $this->HistoryWidgets->stats_day($widget_id, $date);

		$this->assertEqual($results, $expected);
	}

	function testImpressionsSinceTime(){
		$expected = 0;
		$widget_id = 1;
		$time_start = date('Y-m-d G:i:s', strtotime('today noon'));

		$results = $this->HistoryWidgets->impressions_since_time($widget_id, $time_start);

		$this->assertEqual($expected, $results);
	}

	function testStatsRange(){
		$expected = array(
			'display'			  => 0,
			'incoming'			  => 0,
			'display_basic' 	  => 0,
			'incoming_basic'      => 0,
			'display_contextual'  => 0,
			'incoming_contextual' => 0,
			'display_similar'     => 0,
			'incoming_similar'    => 0,
			'display_tag'         => 0,
			'incoming_tag'        => 0
		);
		$widget_id = 1;
		$date_start = date('Y-m-d G:i:s', strtotime('yesterday midnight'));
		$date_end = date('Y-m-d G:i:s', strtotime('today noon'));

		$results = $this->HistoryWidgets->stats_range($widget_id, $date_start, $date_end);

		$this->assertEqual($expected, $results);
	}

	function endTest() {
		unset($this->HistoryWidgets);
	}
}
?>