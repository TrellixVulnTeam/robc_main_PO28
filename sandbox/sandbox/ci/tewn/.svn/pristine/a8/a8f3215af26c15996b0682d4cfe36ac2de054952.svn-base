<?php

namespace CI\Http;

class Curl
{
    const MAX_CURL_LOOP = 20;

    protected $oCurl        = null;
    protected $nCurlLoops   = 0;

    public function __construct($sUrl = null)
    {
        $this->oCurl = curl_init($sUrl);
        $this->setOpt(CURLOPT_RETURNTRANSFER, 1);
        return $this;
    }

    public function __destruct()
    {
        if (is_resource($this->oCurl)) {
            $this->close();
        }
    }

    public function setOpt($nOpt, $mValue)
    {
        return curl_setopt($this->oCurl, $nOpt, $mValue);
    }

    public function exec()
    {
        $return = curl_exec($this->oCurl);

        if ($return === false) {
            $sMessage = $this->error();
            throw new \CI\Http\Curl\Exception(\CI\Http\Curl\Exception::CURL_ERROR, $sMessage);
        }

        return $return;
    }

    public function errno()
    {
        return curl_errno($this->oCurl);
    }

    public function error()
    {
        return curl_error($this->oCurl);
    }

    public function close()
    {
        curl_close($this->oCurl);
    }

    public function getInfo($nOpt = 0)
    {
        return curl_getinfo($this->oCurl, $nOpt);
    }

    public function allowFollowLocationOpt()
    {
        return (!ini_get('open_basedir') && ini_get('safe_mode') != 'On');
    }

    public function followLocation($sUrl, $nMaxCurlLoop = self::MAX_CURL_LOOP)
    {
        $mCurlReponse = false;
        $bHeaders = !(strpos($sUrl, 'file:') === 0);

        if ($this->nCurlLoops++ >= $nMaxCurlLoop) {
            $this->nCurlLoops = 0;
        } else {
            $this->setOpt(CURLOPT_URL, $sUrl);
            $this->setOpt(CURLOPT_HEADER, 1);

            $mCurlReponse  = $this->exec();
            if ($bHeaders) {
                $nSeparator   = $this->getInfo(CURLINFO_HEADER_SIZE);
                $sHeader      = substr($mCurlReponse, 0, $nSeparator);
                $mCurlReponse = substr($mCurlReponse, $nSeparator);
            }

            $nResponseCode = $this->getInfo(CURLINFO_HTTP_CODE);

            if ($nResponseCode >= 300 && $nResponseCode < 400) {
                $aMatches = array();
                preg_match('/Location:(.*?)\n/i', $sHeader, $aMatches);
                $aUrl = parse_url(trim(array_pop($aMatches)));

                if (empty($aUrl)) {
                    $this->nCurlLoops = 0;
                } else {
                    $aLastUrl = parse_url($this->getInfo(CURLINFO_EFFECTIVE_URL));

                    if (!$aUrl['scheme']) {
                        $aUrl['scheme'] = $aLastUrl['scheme'];
                    }
                    if (!$aUrl['host']) {
                        $aUrl['host'] = $aLastUrl['host'];
                    }
                    if (!$aUrl['path']) {
                        $aUrl['path'] = $aLastUrl['path'];
                    }

                    $sNewUrl = sprintf(
                        '%s://%s%s%s',
                        $aUrl['scheme'],
                        $aUrl['host'],
                        $aUrl['path'],
                        (isset($aUrl['query']) ? '?' . $aUrl['query'] : '')
                    );

                    $mCurlReponse = $this->followLocation($sNewUrl);
                }
            } else {
                $this->nCurlLoops = 0;
            }
        }

        return $mCurlReponse;
    }
}