<?php
/* SVN FILE: $Id$ */
/* UsersController Test cases generated on: 2010-03-06 14:47:37 : 1267908457*/
class UsersControllerTest extends CakeTestCase {

	var $Users = null;
	var $fixtures = array(
		'app.user', 'app.page', 'app.website', 'app.log',
		'app.account','app.landing_page_analytic', 'app.widget_analytic',
		'app.widget', 'note', 'metric_log', 'social_page', 'history_social', 'app.tag', 'app.page_tag'
	);

	function startTest() {
		App::import('Controller', 'Users');
		$this->Users = new UsersController();
		$this->Users->constructClasses();
		$this->Users->Component->initialize($this->Users);
		$this->Users->autoRender = false;
	}

	function testUsersControllerInstance() {
		$this->assertTrue(is_a($this->Users, 'UsersController'));
	}

	function testUsersFlagWebsite(){
		$website_id = 1;
		$user_id = 1;

		$this->Users->data = array(
			'User' => array(
				'id' => 1,
				'username' => 'moilanen',
				'password' => 'asdf',
				'email' => 'moilanen@gmail.com',
				'admin' => 1,
				'premium' => 0,
				'last_login' => '2010-03-06 14:42:29',
				'created' => '2010-03-06 14:42:29',
				'visible' => 1,
				'domain_bitfield'=>1,
				'notes'=>'',
				'flagged_websites'=>'[3,2]'
	     	)
	     );
		ob_start();
		$this->Users->params = Router::parse('/users/flag_website/1/1');
    	$this->Users->beforeFilter();
    	$this->Users->Component->startup($this->Users);
    	$results = $this->Users->flag_website($website_id, $user_id);
    	ob_get_clean();

		$expected = '[3,2,1]';

		$this->assertTrue($results, $expected);
	}

	function testUserUnFlagWebsite(){
		$website_id = 1;
		$user_id = 1;

		$this->Users->data = array('User'=>array(
		'id' => 1,
		'username' => 'moilanen',
		'password' => 'asdf',
		'email' => 'moilanen@gmail.com',
		'admin' => 1,
		'premium' => 0,
		'last_login' => '2010-03-06 14:42:29',
		'created' => '2010-03-06 14:42:29',
		'visible' => 1,
		'domain_bitfield'=>1,
		'notes'=>'',
		'flagged_websites'=>'[3,2,1]'
	     ));
		ob_start();
		$this->Users->params = Router::parse('/users/unflag_website/1/1');
    	$this->Users->beforeFilter();
    	$this->Users->Component->startup($this->Users);
    	$results = $this->Users->unflag_website($website_id, $user_id);
		ob_get_clean();
		$expected = '[3,2]';

		$this->assertTrue($results, $expected);
	}

	function endTest() {
		unset($this->Users);
    	ClassRegistry::flush();
	}
}
?>