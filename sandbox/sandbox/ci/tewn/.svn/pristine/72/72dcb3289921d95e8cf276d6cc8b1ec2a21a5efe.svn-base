<?php

use CI\Memcached\Facade\Memcached as CICache;

include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

function page_match($p1, $p2) {
	if ($p1['Page']['id'] == $p2['Page']['id']) {
		return 0;
	} else {
		return 1;
	}
}

/*
 * Responsible for servering the correct links
 */
class LandingPageController extends AppController {

    CONST  VIEWED_PAGES                  = 'viewed_pages';
    CONST  VIEWED_OFFSET                 = 'viewed_offset';
    CONST  VIEWED_PAGES_ALL              = 'viewed_pages_all';
    CONST  VIEWED_PAGES_FREE             = 'viewed_pages_free';
    CONST  VIEWED_PAGES_PAID             = 'viewed_pages_paid';
    CONST  VIEWED_PAGES_PAID_THIRD_PARTY = 'viewed_pages_paid_third_party';

	var $name = 'LandingPage';
	var $uses = array('Page', 'Website', 'Widget', 'Account', 'WidgetAnalytic', 'Log', 'ContextualEngine', 'LandingPageStyle', 'LandingPageAnalytic', 'SimilarEngine', 'PageTag', 'Setting', 'PageSubcategory', 'Tag');
	var $components = array('CakeMemcache', 'RequestHandler', 'Intersects', 'Analytic', 'Array', 'Misc', 'Category', 'Intersects', 'BitSettings', 'WebsiteSettings');
	var $helpers = array("Html", "Ajax", "Form", "Convert", "Javascript", "Rss", "WordsNumber", "Session");
	var $pageTitle = DEFAULT_PAGE_TITLE;
	var $last_page = 0;
	var $filter_reason = "";
	var $image;
	var $cache_on = 1;
	var $filters_enabled = 1;  // Set to 0 for debug

	function beforeFilter() {
		if (DOMAIN_ID == DOMAIN_ID_CROWD_IGNITE || DOMAIN_ID == DOMAIN_ID_NEWS || DOMAIN_ID == DOMAIN_ID_ES) {
			$this->layout = DOMAIN.'/landingpage';
        } else {
            $this->layout = DOMAIN.'/default';
        }
        if (isset($_GET['debug'])) {
            error_reporting(E_ALL & ~E_DEPRECATED);
        }
    }

    public function branded_link($website_id = 0, $landing_page_style_id = 0) {
        $this->autoRender = false;
        $redirectUrl      = "/";

        if (false == $this->spider() && $website_id > 0) {
            $website = $this->Website->findById($website_id);
            $this->Account->outgoing_click($website['Website']['account_id']);
        }

        if ($landing_page_style_id > 0) {
            $branded = $this->LandingPageStyle->findById($landing_page_style_id);
            $redirectUrl = $branded["LandingPageStyle"]["logo_link"];
        }

        $this->redirect($redirectUrl);
    }

    protected function calculate_paid_links($domain_id, $paginate_page)
    {
        $cpc_percentage = $this->Setting->get('cpc_landing_page_percentage_of_paid_links_hub_' . $domain_id);

        $total_links = DEFAULT_LANDING_PAGE_GENERAL_LINKS;
        if ($paginate_page == 1) {
            $total_links += DEFAULT_LANDING_PAGE_FEATURED_LINKS;
        }

        return $cpc_percentage == 0 ? 0 : (int) ($cpc_percentage * $total_links / 100);
    }

    protected function merge_paid_links($pages, $paid_links)
    {
        $positions = array();
        $limit = count($pages);
        $slots = array();
        for ($i = 0, $t = count($paid_links); $i < $t; $i++) {
            $position = (int) mt_rand(0, $limit);
            $slots[] = $position;
        }
        sort($slots);
        foreach ($paid_links as $index => $paid_link) {
            $position = array_shift($slots) + $index;
            array_splice($pages, $position, 0, array($paid_link));
        }
        return $pages;
    }

    public function get_third_party_link($link, $clicked_page)
    {
        $page     = array();
        $content  = array();
        $factory  = new \CI\Content\Provider\Factory();
        $provider = $factory->build($link['third_party']);

        if (!empty($provider)) {
            try {
                $content = $provider->provide(
                    array(
                        'width'        => 300,
                        'height'       => 250,
                        'clicked_page' => $clicked_page,
                        'domain_id'    => DOMAIN_ID,
                    )
                );
            } catch (\Exception $oEx) {
                error_log(__METHOD__ . ' Provider: ' . get_class($provider) .' '. $oEx->getMessage());
            }
        }

        if (!empty($content)) {
            $page = array(
                'Page' => array_merge(
                    $content,
                    array(
                        'campaign_id'      => $link['campaign_id'],
                        'third_party_link' => true,
                        'cpc'              => $link['cpc_value'],
                        'value_link'       => (float) $link['cpc_value'],
                    )
                )
            );
        }

        $page_view = array(
            'Page' => array(
                'campaign_id'      => $link['campaign_id'],
                'third_party_link' => true,
            )
        );

        $this->save_view_page($page_view, $clicked_page);
        return $page;
    }

    public function get_paid_link($link, $page, $stats, $clicked_page)
    {
        // Get just the impressions and clicks
        $page['Page']['campaign_id'] = $link['campaign_id'];
        $page['Page']['cpc']         = $link['cpc_value'];
        $page['Page']['num_ctr']     = (int) $stats['clicks'];
        $page['Page']['num_display'] = (int) $stats['impressions'];
        $page['Page']['value_link']  = $this->calculate_link_value($page);
        $page['Page']['paid_link']   = true;
        $page['Page']['analytic_id'] = $link['lpa_id'];
        $page['Page']['type']        = $link['type_value'];
        $page['Page']['key']         = $link['key_value'];

        $this->save_view_page($page, $clicked_page);
        return $page;
    }

    protected function is_valid_page($page)
    {
        return !empty($page['Page']['id']);
    }

    protected function is_valid_third_party($page)
    {
        return (isset($page['Page']['third_party_link']) &&  true === $page['Page']['third_party_link']);
    }

    protected function is_valid_paid_link($page)
    {
        return (isset($page['Page']['paid_link']) &&  true === $page['Page']['paid_link']);
    }

    protected function is_valid_page_or_third_party($page)
    {
        $return = false;

        $return = $this->is_valid_page($page);

        if (!$return ) {
            $return = $this->is_valid_third_party($page);
        }

        return $return;
    }

    protected function calculate_cpc_offset($paid_links, $page_number)
    {
        $count = 0;
        $this->Session->activate();
        $offset = $this->Session->read(self::VIEWED_OFFSET);
        if (is_array($paid_links)) {
            $count = count($paid_links);
        }
        if (empty($offset) || $page_number == 1) {
            $offset = 0;
        }
        $offset += $count;
        $this->Session->write(self::VIEWED_OFFSET, $offset);
        return $offset;
    }

    protected function save_view_page($page, $clicked_page)
    {
        if (!$this->check_iteam_already_showed($page, $clicked_page) && $this->is_valid_page($clicked_page) && $this->is_valid_page_or_third_party($page)) {
            $this->Session->activate();
            $viewed_pages = $this->Session->read(self::VIEWED_PAGES);
            $type = self::VIEWED_PAGES_FREE;
            $page_or_campaign_id = $this->is_valid_page($page) ? $page['Page']['id'] : 0;

            if ($this->is_valid_third_party($page)) {
                $type = self::VIEWED_PAGES_PAID_THIRD_PARTY;
                $page_or_campaign_id = $page['Page']['campaign_id'];
            } else if ($this->is_valid_paid_link($page)) {
                $type = self::VIEWED_PAGES_PAID;
            }

            $clicked_page_id = $clicked_page['Page']['id'];

            if (empty($viewed_pages[$clicked_page_id][$type])) {
                $viewed_pages[$clicked_page_id][$type] = $page_or_campaign_id;
            } else {
                $viewed_pages[$clicked_page_id][$type] .= ',' . $page_or_campaign_id;
            }
            $this->Session->write(self::VIEWED_PAGES, $viewed_pages);
        }

    }

    protected function reset_viewed_pages($clicked_page)
    {
        $this->Session->activate();
        $viewed_pages = $this->Session->read(self::VIEWED_PAGES);
        $clicked_page_id = $clicked_page['Page']['id'];

        if (!empty($viewed_pages[$clicked_page_id])) {
            $viewed_pages[$clicked_page_id] = array();
            $this->Session->write(self::VIEWED_PAGES, $viewed_pages);
        }
    }

    protected function check_iteam_already_showed($page, $clicked_page)
    {
        $return = false;

        if ($this->is_valid_page_or_third_party($page)) {
            $pos = self::VIEWED_PAGES_ALL;

            if ($this->is_valid_third_party($page)) {
                $pos = self::VIEWED_PAGES_PAID_THIRD_PARTY;
                $page_or_campaign_id = $page['Page']['campaign_id'];
            } else {
                $page_or_campaign_id = $page['Page']['id'];
            }

            $ids = $this->get_already_viewed_pages($clicked_page, $pos);
            $return = in_array($page_or_campaign_id, $ids);
        }

        return $return;
    }

    protected function get_already_viewed_pages($clicked_page, $type = self::VIEWED_PAGES_ALL)
    {
        $return = array();

        if ($this->is_valid_page($clicked_page)) {
            $this->Session->activate();
            $viewed_pages    = $this->Session->read(self::VIEWED_PAGES);
            $clicked_page_id = $clicked_page['Page']['id'];

            switch ($type) {
                case self::VIEWED_PAGES_ALL:
                    if (!empty($viewed_pages[$clicked_page_id][self::VIEWED_PAGES_FREE])) {
                        $return = explode(',', $viewed_pages[$clicked_page_id][self::VIEWED_PAGES_FREE]);
                    }

                    if (!empty($viewed_pages[$clicked_page_id][self::VIEWED_PAGES_PAID])) {
                        $return = array_merge($return, explode(',', $viewed_pages[$clicked_page_id][self::VIEWED_PAGES_PAID]));
                    }

                    break;
                case self::VIEWED_PAGES_FREE:
                case self::VIEWED_PAGES_PAID:
                case self::VIEWED_PAGES_PAID_THIRD_PARTY:
                    if (!empty($viewed_pages[$clicked_page_id][$type])){
                        $return = explode(',', $viewed_pages[$clicked_page_id][$type]);
                    }
                    break;
            }
        }

        return $return;
    }

    public function get_paid_links($domain_id, $clicked_page, $paginate_page, $intersect)
    {
        $paid_links = array();
        $limit = $this->calculate_paid_links($domain_id, $paginate_page);
        if ($limit > 0) {
            $this->loadModel('CpcLandingPage');
            $this->loadModel('CPCCampaignPages');

            // check already viewed cpc links
            $viewed_paid = $this->get_already_viewed_pages($clicked_page, self::VIEWED_PAGES_PAID);
            $viewed_third_party = $this->get_already_viewed_pages($clicked_page, self::VIEWED_PAGES_PAID_THIRD_PARTY);

            // get the cpc links
            $pages = $this->CPCCampaignPages->get_campaign_pages(
                $domain_id,
                $intersect,
                $limit,
                $viewed_third_party,
                $viewed_paid
            );

            if (!empty($pages)) {
                $cpc_page_ids = Set::classicExtract($pages, '{n}.cpc.page_id');
                $campaign_ids = Set::classicExtract($pages, '{n}.cpc.campaign_id');

                $page_ids = array();
                foreach ($cpc_page_ids as $id) {
                    if ($id > 0) {
                        $page_ids[] = $id;
                    }
                }

                $pages_data  = array();
                $pages_stats = array();
                if (!empty($page_ids)) {
                    $pages_data  = $this->Page->find('all', array('conditions' => array('id' => $page_ids)));
                    $pages_stats = $this->CpcLandingPage->get_stats_by_page_id(
                        implode(',', $campaign_ids), implode(",", $page_ids)
                    );
                }

                // get the provider contents for third party links
                // and save as viewed
                foreach ($pages as $link) {
                    $page = array();
                    $link = $link['cpc'];
                    if (!empty($link['third_party']) && $link['page_id'] == 0) {
                        // this is a third party link lets get its content
                        $page = $this->get_third_party_link($link, $clicked_page);
                    } else {
                        // else get a normal paid link (page into a campaign)
                        $paid_key = "{$link['campaign_id']}-{$link['page_id']}";
                        $page_data = Set::extract('/Page[id='.$link['page_id'].']', $pages_data);
                        $page_stats = array('impressions' => 0, 'clicks' => 0);
                        if (isset($pages_stats[$paid_key])) {
                            $page_stats = $pages_stats[$paid_key];
                        }
                        $page = $this->get_paid_link($link, $page_data[0], $page_stats, $clicked_page);
                    }

                    // Add this paid link
                    if (!empty($page)) {
                        $paid_links[] = $page;
                    }
                }
            }
        }

        return $paid_links;
    }

    protected function calculate_link_value(array $page) {
        $link_value = 0;

        if (! is_numeric($page['Page']['num_display']) || ! is_numeric($page['Page']['num_ctr'])) {
            return $link_value;
        }

        //Avoid division by zero
        if (0 != $page['Page']['num_display']) {
            $link_value = $page['Page']['num_ctr'] / $page['Page']['num_display'];
        }

        return $link_value * $page['Page']['cpc'];
    }

    protected function get_analytic_pages($intersect, $domain_bit, $limit, $offset, &$rand_seed, $subcategory, $tags, $whitelist, $blacklist, $clicked_page, $paginate_page)
    {
        if ($limit == 0 ){
            return array();
        }

        $oHub         = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $domain_id    = $oHub->bitToId($domain_bit);
        $intersect_id = $this->Intersects->get_id_by_intersect($intersect);

        if (!$rand_seed) {
            $rand_seed = $this->get_seed($intersect_id, $domain_id);
        }

        /* Check cache */
        if ($this->cache_on) {
            $pages = $this->LandingPageAnalytic->cached_general_get($intersect_id, $domain_id, $paginate_page, $rand_seed, $subcategory, $tags, $whitelist, $blacklist, $clicked_page, $limit);
            if ($pages) {
                return $pages;
            }
        }

        $pages = array();
        if ($limit > 1) {
            $analytics = $this->LandingPageAnalytic->intersect_weight($intersect, $domain_bit, $limit, $offset, $rand_seed, $subcategory, $tags, $whitelist, $blacklist, $clicked_page);

            if (count($analytics) < $limit) {
                $this->last_page = 1;
            }

            if (count($analytics) == 0) {
                return array();
            }

            /* Convert the analytics into pages */
            foreach ($analytics as $analytic) {
                $id = $analytic['LandingPageAnalytic']['page_id'];
                $page_ids[] = $id;
                $page_analytic[$id] = $analytic['LandingPageAnalytic'];
            }

            $implode_page_ids = implode(',', $page_ids);
            $pages = $this->Page->query_read("CALL ci_ci_sp_select_pages_ordered('{$implode_page_ids}')");

            $count = count($pages);
            for ($i = 0; $i < $count; $i++) {
                $pages[$i]['Page']['analytic_id'] = $page_analytic[$pages[$i]['Page']['id']]['id'];
                $pages[$i]['Page']['type'] = $page_analytic[$pages[$i]['Page']['id']]['type'];
                $pages[$i]['Page']['key'] = $page_analytic[$pages[$i]['Page']['id']]['key'];
            }
        }

        /* Save in cache */
        if (!empty($pages) && $this->cache_on) {
            // Cache this
            $this->LandingPageAnalytic->cached_general_set($intersect_id, $domain_id, $paginate_page, $rand_seed, $pages, $subcategory, $tags, $whitelist, $blacklist, $clicked_page, $limit);
        }

        return $pages;
    }

    private function duplicate_traffic() {
        $send_traffic = array();
        $traffic_to   = json_decode($this->Setting->get('DRIVE_TRAFFIC'), true);

        if (empty($traffic_to)) {
            return $send_traffic;
        }

        foreach ($traffic_to as $key => $traffic) {
            if (! empty($traffic['type']) && $traffic['type'] == Setting::TYPE_TRAFFIC_LANDING && ! empty($traffic['url'])  && ! empty($traffic['percentage'])) {
                if (rand(1, 100) <= $traffic['percentage']) {
                    $site_url = str_replace("www.", "", SITE_URL);

                    if (DOMAIN_ID != DOMAIN_ID_NEWS && DOMAIN_ID != DOMAIN_ID_ES && DOMAIN_ID != DOMAIN_ID_CROWD_IGNITE) {
                        $site_url = 'crowdignite.' . $site_url;

                    }

                    $url = sprintf($traffic['url'], $site_url) . $_SERVER['REQUEST_URI'] . "&cascade=1&duplicate_t=" . microtime(true) . $key ;
                    $send_traffic[] = $url;
                }
            }
        }

        return $send_traffic;
    }

    public function index($widget_id = 0, $page_id = 0, $rand_seed = 0, $paginate_page = 1, $widget_analytic_id = 0) {
        App::Import('Helper', 'Text');
        $textHelper = new TextHelper();
        $this->set('textHelper', $textHelper);

        $debug_pages = '';
        $this->Session->activate();
        if ($paginate_page == 1) {
            $debug_pages = !empty($_GET['pids']) ? $_GET['pids'] : '';
            $this->Session->write('debug_pages', $debug_pages);
        } else {
            $debug_pages = $this->Session->read('debug_pages');
        }

        $this->Log->page_view();
        /* Pull from params */
        if (!$widget_id && !$page_id) {
            if (isset($this->params['widget_id'])) {
                $widget_id = $this->params['widget_id'];
            }
            $page_id = $this->params['link'];
        }

        $is_cascade =  !empty($this->params['url']['cascade']) && $this->params['url']['cascade'] == 1;

        if ($is_cascade) {
            $this->autoRender = false;
            header("Content-type: image/gif");
            echo base64_decode("R0lGODlhAQABAIAAAAAAAAAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==");
        }


        /* Get page */
        $page = $this->Page->get_by_id_or_url_title($page_id);
        $page_id = isset($page['Page']['id']) ? $page['Page']['id'] : 0;

        if (!$page) {
            if (isset($_SERVER['HTTP_REFERER'])) {
                $refer = $_SERVER['HTTP_REFERER'];
            } else {
                $refer = "-";
            }
            $data = print_r($_SERVER, 1);
            $this->log("URL: ".$_SERVER['REQUEST_URI']." Refer: ".$refer." ".$data, "bad_page");
            $this->redirect("/");
            exit();
        }
        $clicked_page = $page;

        if (isset($clicked_page['Page']['status']) && PAGE_STATUS_DENIED == $clicked_page['Page']['status']) {
            header('HTTP/1.1 410 Gone');
            header('Refresh: 0; url=/');
            exit();
        }

        /* Find out if this is a spider */
        $spider = $this->spider();

        /* Increment the click through count */
        if ($widget_id) {
            $widget = $this->Widget->get_by_id($widget_id);
            if (!$widget) {
                $this->redirect("/preview/".$page['Page']['title_url']."/0");
            }

            $website_id = $widget['Widget']['website_id'];

            if ($widget_analytic_id == 0) {
                $widget_analytic_id = $this->WidgetAnalytic->get_id_by_website_page($website_id, $page_id);
            }
            $widget_analytic = $this->WidgetAnalytic->get_by_id($widget_analytic_id);

            if ($widget_analytic) {
                $widget_analytic_id = $widget_analytic['WidgetAnalytic']['id'];
                $widget_analytic_type = $widget_analytic['WidgetAnalytic']['type'];
                $widget_analytic_key = $widget_analytic['WidgetAnalytic']['key'];
                $widget_analytic_domain = $widget_analytic['WidgetAnalytic']['domain_bitfield'];
            } else {
                $widget_analytic_type = 0;
                $widget_analytic_key = 0;
                $widget_analytic_domain = 1;
            }

            // TODO remove or comment the next line
            // after test or before commit code
            // $this->filters_enabled = false;
            if ($this->from_widget($paginate_page)) {
                $this->update_page_ctr(
                    $website_id,
                    $page_id,
                    $page['Page']['website_id'],
                    $widget_id,
                    $spider,
                    $widget_analytic_id,
                    $widget_analytic_type,
                    $widget_analytic_key,
                    $widget_analytic_domain
                );
                // Register the log click
                $this->_registerWidgetLog($page);
            }

        } else {
            $website_id = 0;
            $widget_id = 0;
            $widget = NULL;
        }

        /* Get Domain */
        $domain_bit = $this->get_domain_bit($widget);
		$oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
		$domain_id = $oHub->bitToId($domain_bit);

        /* Get website */
        $clicked_website = $this->Website->get_by_id($page['Page']['website_id']);

        if ($website_id) {
            $website = $this->Website->get_by_id($website_id);
            $this->WebsiteSettings->setBits($website['Website']['settings']);
        } else {
            $website = NULL;
        }

        $referring_website = $website;

        /* Get intersect */
        $intersect = $this->get_intersect($page, $domain_id);

        if (!is_null($website) && is_null($intersect['category'])) {
                $intersect['category'] = $website['Website']['category'];
        }

        $landing_page_obj = new \CI\Component\LandingPage();

        $intersect['content_rating'] = $landing_page_obj->getContentRating($intersect['content_rating'], $website['Website'], $clicked_website['Website']);

        if (!$landing_page_obj->isValidIntersect($intersect)) {
            plat_assert(
                0,
                array(
                    'server_info' => $_SERVER,
                    'intersect'   => $intersect
                ),
                false
            );
        }

        $intersect_id = $this->Intersects->get_id_by_intersect($intersect);

        /* Get page style split tests */
        $element = $this->Analytic->get_by_category(ANALYTIC_LANDING_PAGE_LAYOUT, $domain_bit, !$spider);
        $preview_style = $element['Analytic']['unique_id'];
        $preview_style_id = $element['Analytic']['id'];

        /* Get Subcategories */
        $subcategories = $this->PageSubcategory->get_ids_by_page_id($page['Page']['id']);

        /* Get Tags */
        $tags = $this->get_tags($page);

        /* Get Whitelist */
        $whitelist = $website == NULL ? '' : $website['Website']['whitelist'];
        $blacklist = $website == NULL ? '' : $website['Website']['blacklist'];

        if ($paginate_page == 1) {
            $this->reset_viewed_pages($clicked_page);
            $total_items_per_page = DEFAULT_LANDING_PAGE_GENERAL_LINKS + DEFAULT_LANDING_PAGE_FEATURED_LINKS;
        } else {
            $total_items_per_page = DEFAULT_LANDING_PAGE_GENERAL_LINKS;
        }

        $paid_links = $this->get_paid_links($domain_id, $clicked_page, $paginate_page, $intersect);
        $total_cpc_items_showed = $this->calculate_cpc_offset($paid_links, $paginate_page);
        $this->loadModel('CpcLandingPage');
        $this->CpcLandingPage->send_to_queue($paid_links, CpcLandingPage::TYPE_IMPRESSION);
        $left_links = $total_items_per_page - count($paid_links);

        $offset = 0;

        if ($paginate_page > 1) {
            $offset = (($paginate_page - 1) * $total_items_per_page) - $total_cpc_items_showed + DEFAULT_LANDING_PAGE_FEATURED_LINKS;

            if ($offset < 0) {
                $offset = 0;
            }
        }

        $left_pages = $this->get_analytic_pages(
            $intersect,
            $domain_bit,
            $left_links,
            $offset,
            $rand_seed,
            $subcategories,
            $tags,
            $whitelist,
            $blacklist,
            $clicked_page,
            $paginate_page
        );

        $merged_pages = $this->merge_paid_links($left_pages, $paid_links);

        if ($paginate_page == 1) {
            $featured_pages = array_slice($merged_pages, 0, DEFAULT_LANDING_PAGE_FEATURED_LINKS);
            $general_pages = array_slice($merged_pages, DEFAULT_LANDING_PAGE_FEATURED_LINKS);
        }else {
            $featured_pages = array();
            $general_pages = $merged_pages;
        }

        if ($general_pages === null) {
            if (!empty($widget_analytic_id)) {
                setcookie('waid', $widget_analytic_id, 0, '/');
            }
            $info = array(
                'URL' => isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : 'not_set',
                'Referer' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : 'not_set',
                'Domain bit' => $domain_id,
                'Intersect' => $intersect,
                'Paginate page' => $paginate_page,
                'Subcategories' => implode(', ', $subcategories),
                'Tags' => $tags,
                'Whitelist' => $whitelist,
                'Cliked page' => $clicked_page,
            );
            $info = print_r($info, true);
            $this->log($info, "no_general_pages");
            $this->redirect("/?p={$clicked_page['Page']['id']}");
            exit();
        }

        /* Create refer link */
        $refer_link = $preview_style_id;

        /* Pull branded landing page data */
        $branded = null;
        if ($website['Website']['landing_page_style_id']) {
            $branded = $this->branded($website_id);
        }

        /* Setup paginate page links */
        $paginate_current = $paginate_page;
        $paginate_previous = max($paginate_page - 1, 0);
        $paginate_next = $paginate_page + 1;
        $paginate_previous_link = "";
        if ($paginate_previous) {
            $paginate_previous_link = "/v/".$widget_id."/".$page_id."/".$rand_seed."/".$paginate_previous;
        }
        $paginate_next_link = "";
        if ($this->last_page == 0) {
            $paginate_next_link = "/v/".$widget_id."/".$page_id."/".$rand_seed."/".$paginate_next;
        }

        // Remove duplicate links
        $pages = $this->scrub_lp($clicked_page, $general_pages, $featured_pages, $intersect_id, $referring_website, $widget_analytic_id);

        if ($branded) {
            $this->layout  = '/branded';
            $preview_style = 22;
        }

        // Track all the pages which are getting impressions
        $this->accounting_update($pages, $intersect, $spider, $domain_bit, $widget, $preview_style);

        // Set canonical URL
        if ($clicked_website) {
            $canonical = "http://".$oHub->idToLandingpage($clicked_website['Website']['domain_primary']);
        } else {
            $canonical = "";
        }
        $canonical .= "/".$clicked_page['Page']['title_url'];
        $isIpad = false;

        if (isset($_SERVER['HTTP_USER_AGENT'])) {
            $isIpad = (bool) strpos($_SERVER['HTTP_USER_AGENT'],'iPad');
        }

        // Set the different page types
        $this->set("featured_pages", $pages['featured_pages']);
        $this->set("general_pages", $pages['general_pages']);
        $this->set("clicked_page", $pages['clicked_page']);

        // Set the Landing page layouts
        $this->set("preview_style_id", $preview_style_id);
        $this->set("is_ab_testing",  isset($element['Analytic']['is_ab_testing']) ? $element['Analytic']['is_ab_testing'] : false);

        $this->set("refer_link", $refer_link);
        $this->set("paginate_next_link", $paginate_next_link);
        $this->set("paginate_previous_link", $paginate_previous_link);
        $this->set("paginate_current", $paginate_current);
        $this->set("canonical", $canonical);
        $this->set("widget_id", $widget_id);
        $this->set("branded", $branded);
        $this->set("category_id", $clicked_page['Page']['category']);
        $this->set("intersect_id", $intersect_id);
        $this->set("filter_reason", $this->filter_reason);
        $this->set("website_id", $website_id);
        $this->set("WebsiteSettings", $this->WebsiteSettings);
        $this->set("isIpad", $isIpad);
        $this->set("hide_join_ci", true);
        $this->set("words_limit", $this->Setting->get('RSS_FEED_TITLE_LIMIT_WORDS'));

        $isHomepage   = false;
        $this->set("isHomepage", $isHomepage);

        if ($preview_style == 27 || $preview_style == 28) {
            $merged_pages = array();

            $landing_settings = array(
                "is_home_page" => $isHomepage,
                "widget_id"    => $widget_id,
                "limit"        => DEFAULT_LANDING_PAGE_GENERAL_INFINITE_SCROLL_LINKS,
                "page_id"      => $page_id,
                "seed"         => $rand_seed,
                "refer"        => $refer_link
            );

            if ($paginate_page == 1 ) {
                $clicked = array($pages['clicked_page']);
                $merged_pages = array_merge($clicked, $pages['featured_pages'], $pages['general_pages']);
            } else {
                $merged_pages = array_merge($pages['featured_pages'], $pages['general_pages']);
            }

            $this->set("pages", $merged_pages);
            $this->set("landing_settings", json_encode($landing_settings));
            $this->layout = "landing/masonary";
        }

        $this->pageTitle = $clicked_page['Page']['title'];
        $this->set("preview_style", $preview_style);
        $this->set("send_traffic", $this->duplicate_traffic());

        $this->set('debug_pages', explode(',', $debug_pages));
    }

    private function _registerWidgetLog($page)
	{
		$user_id = isset($_GET['user_id']) ? $_GET['user_id'] : '';

		if (ENABLE_LOGGER && !empty($user_id)) {
			App::Import(
				'Vendor',
				'CI_Library',
				array(
					'file' => 'crowdignite/library/autoload.php'
				)
			);
			$click_slot = isset($_GET['slot']) ? $_GET['slot'] : 0;
			$storage = new Logger_Storage_File(
				array(
					'filepath' => '/var/vw-log-ramdisk/wclick.log'
				)
			);
			$logger = new Logger_Analytic_Widget(new Logger($storage));

			// removing impressions elements
			$logger->removeElement('shown_page_id');
			$logger->removeElement('widget_square_footage');
			$logger->removeElement('visitor_ip_address');
			$logger->removeElement('link_n');

			$logger->registerElementValue('link_click_page_id', $page['Page']['id']);
			$logger->registerElementValue('link_click_slot', $click_slot);
			$format = array(
				'item'      => '%s',
				'separator' => '_',
			);
			$logger->registerElement(new Logger_Analytic_Element_Array('category', $format));
			$logger->registerElement(new Logger_Analytic_Element_Array('tags', $format));
			$logger->registerElementValue('category', $page['Page']['category']);
			$tags = $this->get_tags($page);
			$logger->registerElementValue('tags', $tags);
			$logger->save();
		}
	}

	private function _registerLPLoggerImpression($pages, $intersect_id, $widget, $preview_style)
	{
		$refer_id = isset($_GET['referp']) ? $_GET['referp'] : 0;
		$user_id = isset($_GET['user_id']) ? $_GET['user_id'] : '';

		if (ENABLE_LOGGER && !empty($user_id)) {
			App::Import(
				'Vendor',
				'CI_Library',
				array(
					'file' => 'crowdignite/library/autoload.php'
				)
			);
			$storage_lp_impression = new Logger_Storage_File(
				array(
					'filepath' => '/var/vw-log-ramdisk/lpimpression.log'
				)
			);
            $storage_lp_paid_impression = new Logger_Storage_File(
                array(
                    'filepath' => '/var/vw-log-ramdisk/lppaidimpression.log'
                )
            );
			$logger      = new Logger_Analytic_LandingPage(new Logger($storage_lp_impression));
            $logger_paid = new Logger_Analytic_LandingPage_Paid(new Logger($storage_lp_paid_impression));

			// remove click information
			$logger->removeElement('link_click_page_id');

			$max_links_elements                  = 40;
			$log_links_empty                     = array_fill(0, $max_links_elements, 0);
			$log_links_empty_string              = array_fill(0, $max_links_elements, '');
			$log_pages['link_ids']               = $log_links_empty;
            $log_pages['link_paid_ids']          = $log_links_empty;
            $log_pages['link_paid_campaign_ids'] = $log_links_empty;
			$log_pages['link_titles']            = $log_links_empty_string;
            $log_pages['link_paid_titles']       = $log_links_empty_string;

			$type_pages = array(
				'clicked_page',
				'featured_pages',
				'general_pages'
			);

			$i = 0;
			$remove_mysql_stopwords = new \CI\Filter\RemoveMysqlStopWord();
			$page = $pages['clicked_page'];
			$page = isset($page['Page']) ? $page['Page'] : $page;
            $paid_count_items = 0;
            $pages_count_items = 0;

			foreach ($type_pages as $type) {
				foreach ($pages[$type] as $page) {
					//for vw we only need 40 elements maximum
					if ($i >= $max_links_elements ) {
						break;
					}

                    $page = isset($page['Page']) ? $page['Page'] : $page;
                    $title = $remove_mysql_stopwords->filter($page['title']);
					$log_pages['link_ids'][$i]             = $page['id'];
					$log_pages['link_titles'][$i]          = $title;

                    if (isset($page['paid_link']) &&  true === $page['paid_link']) {

                        $log_pages['link_paid_ids'][$paid_count_items] = $page['id'];
                        $log_pages['link_paid_campaign_ids'][$paid_count_items] = $page['campaign_id'];
                        $log_pages['link_paid_titles'][$paid_count_items] = $title;
                        $paid_count_items++;
                    }

					++$i;
                    $pages_count_items++;
				}
			}

			$http_referrer = new \CI\Http\Referer();

			$logger->registerElement(new Logger_Analytic_Element_Array('link_ids'));
			$logger->registerElement(new Logger_Analytic_Element_Basic('link_count'));
			$logger->registerElement(new Logger_Analytic_Element_Array('link_titles'));

            if (!empty($log_pages['link_paid_ids'][0])) {
                $logger_paid->registerElementValue('refering_page_id', $refer_id);
                $logger_paid->registerElementValue('landing_page_layout_id', $preview_style);
                $logger_paid->registerElementValue('paid_link_ids', $log_pages['link_paid_ids']);
                $logger_paid->registerElementValue('paid_link_campaign_ids', $log_pages['link_paid_campaign_ids']);
                $logger_paid->registerElementValue('utm_source_page', $http_referrer->getUtmSourceReferer());
                $logger_paid->registerElementValue('utm_medium_page', $http_referrer->getUtmMediumReferer());
                $logger_paid->registerElementValue('utm_campain_page', $http_referrer->getUtmCampaignReferer());
                $logger_paid->registerElementValue('domain_bitfield', $widget['Widget']['domain_bitfield']);
                $logger_paid->registerElementValue('style_id', $widget['Widget']['widget_style_id']);
                $logger_paid->registerElementValue('paid_link_titles', $log_pages['link_paid_titles']);
                $logger_paid->registerElementValue('to_pub_id', $widget['Widget']['website_id']);
                $logger_paid->save();
            }

			$logger->registerElementValue('link_count', $pages_count_items);
			$logger->registerElementValue('link_ids', $log_pages['link_ids']);
			$logger->registerElementValue('link_titles', $log_pages['link_titles']);
			$logger->save();
		}
	}

	private function link_type() {
		// New method
		if (isset($_GET['ltype'])) {
			$link_type = $_GET['ltype'];
		} else {
			$link_type = LINK_TYPE_BASIC;
		}

		return $link_type;
	}

	private function widget_type() {
		// New method
		if (isset($_GET['wtype'])) {
			$widget_type = $_GET['wtype'];
		} else {
			$widget_type = WIDGET_TYPE_JAVASCRIPT;
		}

		return $widget_type;
	}

	private function branded($website_id) {
		if (!$website_id) {
			return NULL;
		}
		$website = $this->Website->get_by_id($website_id);

		if (empty($website['Website']['landing_page_style_id'])) {
			return NULL;
		}

		// Check to make sure refer is coming from site to show branding
		$url = $website['Website']['url'];

		if (!isset($_GET['force_branded']) || $_GET['force_branded'] == 0) {
			if (isset($_SERVER['HTTP_REFERER'])) {
				$pattern = $pattern = '@^(?:http://)?([^/]+)@i';

				preg_match($pattern, $_SERVER['HTTP_REFERER'], $match);

				if ($match[1] != $url && !(isset($_GET['branded']) && $_GET['branded'] == 1)) {
					return NULL;
				}
			} else {
				return NULL;
			}
		}
		$branded = $this->LandingPageStyle->findById($website['Website']['landing_page_style_id']);
		return $branded;
	}

	private function get_domain_bit($widget) {
		return DOMAIN_BIT;
	}

	function get_seed($intersect_id, $domain_id, $index = NULL) {
		/* See if we need to create an index */
		if (!$index) {
			$index = mt_rand(1, DEFAULT_LANDING_PAGE_RANDOM_SEEDS);
		}

		/* Get the seed */
		$seed = $this->LandingPageAnalytic->cached_seed_get($intersect_id, $domain_id, $index);
		if ($seed) {
			return $seed;
		}

		// Pick a new one
		$seed = mt_rand(1, 10000);

		// Cache it
		$this->LandingPageAnalytic->cached_seed_set($intersect_id, $domain_id, $index, $seed);

		return $seed;

	}

	function get_featured_pages($intersect, $domain_id, $rand_seed, $paginate_page, $subcategory = NULL, $tags = NULL, $whitelist = '', $blacklist = '', $clicked_page = 0) {
		// Don't return any pages when past 1st page
		if ($paginate_page > 1) {
			return array();
		}

		/* Check cache */
		if ($this->cache_on) {
			$intersect_id = $this->Intersects->get_id_by_intersect($intersect);
			$pages = $this->LandingPageAnalytic->cached_featured_get($intersect_id, $domain_id, $paginate_page, $rand_seed, $subcategory, $tags, $whitelist, $blacklist, $clicked_page);
			if ($pages) {
				return $pages;
			}
		}

		/* If not there, fall back to the database */
		$pages = $this->get_statistic_pages_paginate($intersect, $domain_id, $paginate_page, $rand_seed, 1, $subcategory, $tags, $whitelist, $blacklist, $clicked_page);

		/* Save in cache */
		if ($pages) {
			// Cache this
			if ($this->cache_on) {
				$intersect_id = $this->Intersects->get_id_by_intersect($intersect);
				$this->LandingPageAnalytic->cached_featured_set($intersect_id, $domain_id, $paginate_page, $rand_seed, $pages, $subcategory, $tags, $whitelist, $blacklist, $clicked_page);
			}
		} elseif ($paginate_page == 1) {
			$pages = array();
		}

		return $pages;
	}

	private function get_statistic_pages_paginate($intersect, $domain_id, $paginate_page, $rand_seed, $featured, $subcategory, $tags, $whitelist, $blacklist, $clicked_page) {
		$oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
		$domain_bit = $oHub->idToBit($domain_id);

		if ($featured == 0) {
			if ($paginate_page == 1) {
				$limit = DEFAULT_LANDING_PAGE_GENERAL_LINKS;
				$paginate_offset = 0;
			} else {
				if (isset($_GET['infinite']) && $_GET['infinite']) {
					$limit = DEFAULT_LANDING_PAGE_GENERAL_INFINITE_SCROLL_LINKS;
					$paginate_offset = DEFAULT_LANDING_PAGE_GENERAL_LINKS - $limit;
				} else {
					$limit = DEFAULT_LANDING_PAGE_GENERAL_LINKS;
					$paginate_offset = 0;
				}
			}
			$offset = (($paginate_page - 1) * $limit) + DEFAULT_LANDING_PAGE_FEATURED_LINKS;
			/*
			if ($preview_style == '20') {
				$limit = 12;
				$offset = (($paginate_page - 1) * $limit) + 12;
			}
			*/
			// We add this offset to account for differences between the infinite scroll size
			// and the initial number of links shown on the first page
			$offset += $paginate_offset;
            if ($paginate_page > 1) {
                $offset -= $this->calculate_paid_links($domain_id, $paginate_page);
            }
		} else {
			$limit = DEFAULT_LANDING_PAGE_FEATURED_LINKS;
			//if ($preview_style == '20') $limit = 12;
			$offset = 0;
		}

		/* Get our links */
		$analytics = $this->LandingPageAnalytic->intersect_weight($intersect, $domain_bit, $limit, $offset, $rand_seed, $subcategory, $tags, $whitelist, $blacklist, $clicked_page);

		// Check if this is the last page
		// Not 100% perfect (1 / DEFAULT_LANDING_PAGE_GENERAL_LINKS chance of no data), but saves an extra and potentially expensive DB call
		if ($featured == 0 && count($analytics) < $limit) {
			$this->last_page = 1;
		}

		if (count($analytics) == 0) {
			return array();
		}

		/* Convert the analytics into pages */
		foreach ($analytics as $analytic) {
			$id = $analytic['LandingPageAnalytic']['page_id'];
			$page_ids[] = $id;
			$page_analytic[$id] = $analytic['LandingPageAnalytic'];
		}
		$pages = $this->Page->find("all", array("conditions" => array("id" => $page_ids)));

		$count = count($pages);
		for ($i = 0; $i < $count; $i++) {
			$pages[$i]['Page']['analytic_id'] = $page_analytic[$pages[$i]['Page']['id']]['id'];
			$pages[$i]['Page']['type'] = $page_analytic[$pages[$i]['Page']['id']]['type'];
			$pages[$i]['Page']['key'] = $page_analytic[$pages[$i]['Page']['id']]['key'];
		}

		return $pages;
	}

	private function page_diff($a, $b_arrays) {
		foreach ($b_arrays as $b) {
			foreach ($b as $page_b) {
				$a_tmp = array();
				foreach ($a as $page_a) {
                    if (isset($page_a['Page']['third_party_link']) || isset($page_b['Page']['third_party_link'])) {
                        $a_tmp[] = $page_a;
                    } elseif ($page_a['Page']['id'] != $page_b['Page']['id']) {
						$a_tmp[] = $page_a;
					}
				}
				$a = $a_tmp;
			}
		}

		return $a;
	}

	/*
	 * Scrubs a Landing Page
	 *
	 * Make sure there are no overlapping links between page types
	 * and make sure we set the outgoing link URL for the correct accounting
	 */
	private function scrub_lp($clicked_page, $general_pages, $featured_pages, $intersect_id, $website, $widget_analytic_id = 0) {
		if ($website) {
			// Remove links from the site that came in on
			/*
			$general_pages = $this->scrub_incoming_site($general_pages, $website);
			$featured_pages = $this->scrub_incoming_site($featured_pages, $website);
			*/

			// Remove Blacklisted sites
			$general_pages = $this->scrub_blacklist($general_pages, $website);
			$featured_pages = $this->scrub_blacklist($featured_pages, $website);

			// Remove Whitelisted sites
			$general_pages = $this->scrub_whitelist($general_pages, $website);
			$featured_pages = $this->scrub_whitelist($featured_pages, $website);
		}

		/*
		 * Priority for link scrubbing
		 *
		 * 1.) Clicked
		 * 2.) Featured
		 * 3.) General
		 */

		// Scrub Featured
		$featured_pages_scrubbed = $this->page_diff($featured_pages, array(array($clicked_page)));

		// Scrub General
		$general_pages_scrubbed = $this->page_diff($general_pages, array($featured_pages, array($clicked_page)));

		/* Add the widget_analytic id */
		if ($widget_analytic_id) {
			$clicked_page['Page']['widget_analytic_id'] = $widget_analytic_id;
			$featured_pages_scrubbed = $this->aggregate_widget_analytics($featured_pages_scrubbed, $widget_analytic_id);
			$general_pages_scrubbed = $this->aggregate_widget_analytics($general_pages_scrubbed, $widget_analytic_id);
		}

		/* Create outbound links */
		// Featured Pages
		$featured_pages_scrubbed = $this->set_link_pages($featured_pages_scrubbed, $intersect_id, 0);

		// General Pages
		$general_pages_scrubbed = $this->set_link_pages($general_pages_scrubbed, $intersect_id, 0);

		// Clicked Page
		$clicked_page['Page']['ctr_link'] = $this->set_outgoing_link($clicked_page, 0);
        $clicked_page['Page']['intersect_id'] = $intersect_id;

		$out_array = array("clicked_page" => $clicked_page,
				   "featured_pages" => $featured_pages_scrubbed,
				   "general_pages" => $general_pages_scrubbed);

		return $out_array;
	}

	private function aggregate_widget_analytics($pages, $widget_analytic_id) {
		for($i = 0, $count = count($pages); $i < $count; $i++) {
			$pages[$i]['Page']['widget_analytic_id'] = $widget_analytic_id;
		}
		return $pages;
	}

	private function scrub_incoming_site($pages, $website) {
		$out = array();

		foreach ($pages as $page) {
			$website_id = $page['Page']['website_id'];

			if ($website_id == $website['Website']['id']) {
				continue;
			}
			$out[] = $page;
		}

		return $out;
	}

	private function scrub_blacklist($pages, $website) {
		$out = array();

		if ($website['Website']['blacklist']) {
			$list = explode(",", $website['Website']['blacklist']);

			foreach ($pages as $page) {

                if (!isset($page['Page']['third_party_link'])) {
                    $website_id = $page['Page']['website_id'];

                    if (in_array($website_id, $list)) {
                        continue;
                    }
                }

				$out[] = $page;
			}

			return $out;
		}

		return $pages;
	}

	private function scrub_whitelist($pages, $website) {
		$out = array();

		if ($website['Website']['whitelist']) {
			$list = explode(",", $website['Website']['whitelist']);

			foreach ($pages as $page) {
				if (isset($page['Page']['third_party_link']) || in_array($page['Page']['website_id'], $list)) {
                    $out[] = $page;
				}
			}

			return $out;
		}

		return $pages;
	}

	private function accounting_update($pages, $intersect, $spider, $domain_bit, $widget, $preview_style) {

        if ($spider) {
			return;
        }

        $pages_tmp = array();
        foreach ($pages as $type => $type_pages) {
            if ($type == 'clicked_page') {
                $pages_tmp[$type] = $type_pages;
                continue;
            }
            if (empty($type_pages)) {
                $pages_tmp[$type] = $type_pages;
            } else {
                foreach ($type_pages as $page) {
                    if (!isset($page['Page']['third_party_link'])) {
                        $pages_tmp[$type][] = $page;
                    }
                }
            }
        }
        $pages = $pages_tmp;

		$intersect_id = $this->Intersects->get_id_by_intersect($intersect);
		$this->_registerLPLoggerImpression($pages, $intersect_id, $widget, $preview_style);

		// Only send the data we need
		$pages = $this->queue_data($pages, $intersect, $domain_bit);

		$json_stats = json_encode($pages);

		$queue_stats = null;
		App::import('Component', 'QueueKestrel');
		$queue_stats = new QueueKestrelComponent("landing_page_stats_views");
		$queue_stats->push($json_stats);
	}

	/* Make data sparse for only what is needed */
	private function queue_data($batches, $intersect, $domain_bit) {
			$stats = array(
				'int' => $this->Intersects->get_id_by_intersect($intersect),
				'dom' => $domain_bit,
				'date' => time(),
				'stats' => array()
			);
			foreach ($batches as $batch => $pages) {
					foreach ($pages as $index => $page)     {
							if (isset($page['Page'])) {
								$page = $page['Page'];
							}
							$sparse = array('id' => $page['id']);
							if (isset($page['analytic_id'])) {
								$sparse['analytic_id'] = $page['analytic_id'];
							}

							$stats_page = array(
								'i' => $page['id'],
								'w' => $page['website_id']
							);

							if (isset($page['type']) && $page['type'] > 0) {
								$stats_page['t'] = $page['type'];
							}

							if (isset($page['type']) && $page['key'] > 0) {
								$stats_page['k'] = $page['key'];
							}

							$stats['stats'][] = $stats_page;
							$stats['info'][$batch][$index]['Page'] = $sparse;
					}
			}
			return $stats;
	}

	/*
	 * Sets the ctr links for an array of pages
	 *
	 * Null $intersect_apply_list means to apply it to everyone
	 */
	private function set_link_pages($pages, $intersect_id, $intersect_apply_list) {
		$count = $this->max_key($pages);

		for ($i = 0; $i <= $count; $i++) {
			if (!isset($pages[$i])) {
				continue;
			}
			// Only apply the intersect if it's in the 'white list'
			if (!$intersect_apply_list || $this->in_array_page($pages[$i], $intersect_apply_list)) {
				$apply_intersect = $intersect_id;
			} else {
				$apply_intersect = 0;
			}

			$pages[$i]['Page']['ctr_link'] = $this->set_outgoing_link($pages[$i], $apply_intersect);
            $pages[$i]['Page']['intersect_id'] = $intersect_id;
		}

		return $pages;
	}

	private function max_key($array) {
		$max = 0;
		foreach ($array as $key => $val) {
			if ($key > $max) {
				$max = $key;
			}
		}

		return $max;
	}

	private function in_array_page($needle_page, $haystack_pages) {
		foreach ($haystack_pages as $hpage) {
			if ($hpage['Page']['id'] == $needle_page['Page']['id']) {
				return 1;
			}
		}

		return 0;
	}

	private function set_outgoing_link($page, $intersect_id) {
        if (isset($page['Page']['third_party_link'])) {
            return $page['Page']['link'];
        }

		/* If tracking w/ analytic IDs, use that */
		$analytic  = isset($page['Page']['analytic_id']) ? "/".$page['Page']['analytic_id'] : '/0';
		$analytic .= isset($page['Page']['widget_analytic_id']) ? "/".$page['Page']['widget_analytic_id'] : '';

		if ($analytic == '/0') {
			$analytic = '';
		}

		$title = $page['Page']['title_url'];
		if (empty($title)) {
			$title = $page['Page']['id'];
		}

        $paid = '0';

        if (!empty($page['Page']['paid_link']) && true === $page['Page']['paid_link']) {
            $paid = '1';
        }

        $paid_campaign_id = '0';

        if (!empty($page['Page']['campaign_id'])) {
            $paid_campaign_id = $page['Page']['campaign_id'];
        }

		return "http://".LANDING_PAGE."/link/".$title."/".$intersect_id.$analytic . "/".$paid."/".$paid_campaign_id;
	}

	private function set_canonical_link($page) {
		return "http://".LANDING_PAGE."/".$page['Page']['title_url'];
	}

	public function homepage($post_type) {
		App::Import('Helper', 'Text');
		$textHelper = new TextHelper();
		$this->set('textHelper', $textHelper);

		$this->Log->page_view();

		$page_id = isset($_GET['p']) ? (int) $_GET['p'] : null;
		$clicked_page = is_null($page_id) ? false : $this->Page->findById($page_id);

		if (isset($this->params['named']['page'])) {
			$page = $this->params['named']['page'];
		} else {
			$page = 1;
		}

		$this->set('page_number', $page);

		$pages = array();
		if ($clicked_page) {
			$pages = array(0 => $clicked_page);
		}

		// Get General Pages
		switch ($post_type) {
		case "top":
		default:
			if (empty($widget_analytic_id) && !empty($this->params['form']['widget_analytic_id'])) {
				$widget_analytic_id = $this->params['form']['widget_analytic_id'];
			}
			$pages = array_merge($pages, $this->get_top_pages($page));
			break;
		case "newest":
			$pages = array_merge($pages, $this->get_newest_pages($page));
			break;
		case "random":
			$pages = array_merge($pages, $this->get_random_pages());
			break;
		case "popular":
			$pages = array_merge($pages, $this->get_popular_pages($page));
			break;
		}

		// Get Featured Pages
		$intersect = $this->Intersects->create_set(array(), array(0), array(), array());
		$intersect_id = $this->Intersects->get_id_by_intersect($intersect[0]);
		$rand_seed = $this->get_seed($intersect_id, DOMAIN_ID);
		$featured_pages = $this->get_featured_pages($intersect[0], DOMAIN_ID, $rand_seed, $page);

		if (empty($widget_analytic_id) && isset($_COOKIE['waid'])) {
			$widget_analytic_id = $_COOKIE['waid'];
			$this->set('widget_analytic_id', $widget_analytic_id);
			setcookie('waid', '', time()-3600, '/');
		}

		// getting intersects
		foreach ($pages as $key => $page) {
			if (!empty($widget_analytic_id)) {
				$pages[$key]['Page']['widget_analytic_id'] = $widget_analytic_id;
			}
			$pages[$key]['Page']['ctr_link'] = $this->set_outgoing_link($pages[$key], 0);
			// getting intersect
			$intersect = $this->Intersects->get_by_page($page);
			// get id by intersect
			$intersect_id = $this->Intersects->get_id_by_intersect($intersect);
			$pages[$key]['Page']['intersect_id'] = $intersect_id;
		}

		foreach ($featured_pages as $key => $page) {
			if (!empty($widget_analytic_id)) {
				$featured_pages[$key]['Page']['widget_analytic_id'] = $widget_analytic_id;
			}
			$featured_pages[$key]['Page']['ctr_link'] = $this->set_outgoing_link($featured_pages[$key], 0);
			// getting intersect
			$intersect = $this->Intersects->get_by_page($page);
			// get id by intersect
			$intersect_id = $this->Intersects->get_id_by_intersect($intersect);
			$featured_pages[$key]['Page']['intersect_id'] = $intersect_id;
		}

		if (!empty($featured_pages)) {
			$this->set("featured_pages", $featured_pages);
		} else {
			$this->set("featured_pages", array());
		}

		$this->set("type", $post_type);
		$this->set("pages", $pages);
		$this->set("intersect_id", 0);
		$this->set("WebsiteSettings", $this->WebsiteSettings);
        $this->set("isHomepage", true);
        $this->set("paginate_current", $page);

        $landing_settings = array(
                "is_home_page" => true,
                "limit" => DEFAULT_HOMEPAGE_LINKS,
        );

        $this->set("landing_settings", json_encode($landing_settings));

        $this->layout = "landing/masonary";
        $this->set("words_limit", $this->Setting->get('RSS_FEED_TITLE_LIMIT_WORDS'));
	}

	/* This is an experiment to get an idea of what the stats look like for a "within" product */
	public function within($page_id) {
		$this->Log->page_view();

		if (isset($this->params['page'])) {
			$page = $this->params['page'];
		} else {
			$page = 1;
		}

		// Get preview page
		$clicked_page = $this->Page->findById($page_id);

		// Get General Pages
		$general_pages = $this->get_sites_pages($page, $clicked_page['Page']['website_id']);

		// Get Featured Pages
		$intersect = $this->Intersects->create_set(array(), array(0), array(), array());
		$featured_pages = $this->get_featured_pages($intersect[0], DOMAIN_BIT, TRUE, 1);
		$count = count($featured_pages);
		for ($i = 0; $i < $count; $i++) {
			$featured_pages[$i]['Page']['ctr_link'] = $this->set_outgoing_link($featured_pages[$i], 0);
		}

		// Scrub pages
		$featured_pages = array_udiff($featured_pages, array($clicked_page), "page_match");
		$general_pages = array_udiff($general_pages, $featured_pages, array($clicked_page), "page_match");
		$pages = array_merge(array($clicked_page), $general_pages);

		// Create outbound links
		$pages = $this->set_link_pages($pages, 0, array());

		if ($count) {
			$this->set("featured_pages", $featured_pages);
		}

		switch (DOMAIN_ID) {
		default:
			$style = "grid";
			break;
		}

        $isIpad = false;

        if (isset($_SERVER['HTTP_USER_AGENT'])) {
            $isIpad = (false !== strpos($_SERVER['HTTP_USER_AGENT'],'iPad'));
        }

		$this->set("type", "/landing_page/within/".$page_id);
		$this->set("pages", $pages);
		$this->set("intersect_id", 0);
		$this->set("style", $style);
        $this->set("words_limit", $this->Setting->get('RSS_FEED_TITLE_LIMIT_WORDS'));
        $this->set("isIpad", $isIpad);
	}

	private function get_top_pages($page = 1) {
		$this->paginate = array('limit' => DEFAULT_HOMEPAGE_LINKS, 'page' => $page, 'order' => array('top' => 'desc'));
		$params = array("top <>" => 0,
						"status" => PAGE_STATUS_APPROVED,
						"content_rating" => array(WEBSITE_CONTENT_G, WEBSITE_CONTENT_PG13),
						"domain_bitfield & ".DOMAIN_BIT);
		$pages = $this->paginate("Page", $params, NULL, NULL);

		return $pages;
	}

	private function get_newest_pages($page = 1) {
		$this->paginate = array('limit' => DEFAULT_HOMEPAGE_LINKS, 'page' => $page, 'order' => array('created' => 'desc'));
		$params = array("status" => PAGE_STATUS_APPROVED,
				"content_rating <" => WEBSITE_CONTENT_R,
				"domain_bitfield & ".DOMAIN_BIT);
		$pages = $this->paginate("Page", $params, NULL, NULL);

		return $pages;
	}

	private function get_random_pages() {
		// XXX switch this to the top accounts
		$pages = $this->Page->find("all", array("conditions" => array(
								"domain_bitfield & ".DOMAIN_BIT,
								"content_rating <" => WEBSITE_CONTENT_R,
								"status" => PAGE_STATUS_APPROVED,
								"visible" => true),
							"order" => "rand()",
							"limit" => 50));

		return $pages;
	}

	private function get_popular_pages($page = 1) {
		$this->paginate = array('limit' => DEFAULT_HOMEPAGE_LINKS, 'page' => $page, 'order' => array('rank' => 'desc'));
		$params = array("rank > 0",
						"status" => PAGE_STATUS_APPROVED,
						"content_rating" => array(WEBSITE_CONTENT_G, WEBSITE_CONTENT_PG13),
						"domain_bitfield & ".DOMAIN_BIT);
		$pages = $this->paginate("Page", $params, NULL, NULL);

		return $pages;
	}

	private function get_sites_pages($page = 1, $website_id) {
		$this->paginate = array('limit' => DEFAULT_HOMEPAGE_LINKS, 'page' => $page, 'order' => array('rank' => 'desc'));
		$params = array("rank > 0",
						"status" => PAGE_STATUS_APPROVED,
						"content_rating" => array(WEBSITE_CONTENT_G, WEBSITE_CONTENT_PG13),
						"website_id" => $website_id
						);
		$pages = $this->paginate("Page", $params, NULL, NULL);

		return $pages;
	}

	private function get_tags($page) {
		$page_id = $page['Page']['id'];
		$tags = $this->PageTag->get_all_page_id($page_id);

		$return = array();
		foreach ($tags as $tag) {
			$return[] = $tag['PageTag']['tag_id'];
		}

		return $return;
	}

	private function get_intersect($page, $domain_id) {
		$intersect = array(
			'category' => $page['Page']['category'],
			'demographic_sex' => $page['Page']['demographic_sex'],
			'content_rating' => $page['Page']['content_rating'],
		);

		$intersect['category'] = $this->Category->translate($intersect['category'], $domain_id);

		return $intersect;
	}

	function spider() {

		if ($this->filters_enabled == 0) {
			return 0;
		}

		$validator_not_empty = new CI\Validator\NotEmpty();
		$validator_browser   = new CI\Validator\Browser();

		$user_agent_validator = new CI\Validator\Container();
		$user_agent_validator->addRule($validator_not_empty, true);
		$user_agent_validator->addRule($validator_browser, true);

		$user_agent = isset($_SERVER['HTTP_USER_AGENT'])
		    ? $_SERVER['HTTP_USER_AGENT']
		    : '';

		$referer = isset($_SERVER['HTTP_REFERER'])
		    ? $_SERVER['HTTP_REFERER']
		    : '';

		if ($user_agent_validator->isValid($user_agent)
            && $validator_not_empty->isValid($referer)
        ) {
		    return 0;
		}
		return 1;
	}

	private function from_widget($paginate_page) {
        if ($this->filters_enabled == 0) {
			return 1;
		}

		if ($paginate_page != 1) {
			$this->filter_reason = "Paginate > 1";
			return 0;
		}

        if (empty($_SERVER['HTTP_REFERER'])) {
			$this->filter_reason = "Empty HTTP_REFERER";
			return 0;
		}

        $skip = array($_SERVER['SERVER_NAME']);

        $host = parse_url($_SERVER['HTTP_REFERER']);
        if (false !== $host) {
            $host = isset($host['host']) ? $host['host'] : false;
        }

        if (false !== $host && $this->Misc->stristr_array($skip, $host)) {
            $this->filter_reason = "From CI Server";
            return 0;
        }

		return 1;

	}

    private function update_page_ctr($shown_website_id, $page_id, $website_id, $widget_id, $spider, $widget_analytic_id = 0, $type = 0, $key = 0, $domain_bit = 1)
    {
        $this->Session->activate();
        $this->Widget->incoming_raw_click($widget_id);

        // See if we need to filter this click
        if ($this->filter_click($shown_website_id, $spider)) {
            return;
        }

        $account_id = $this->Website->field("account_id", array("id" => $shown_website_id));

        if (!ACCOUNT_DEFERRED_CREDIT) {
            /* Update the accounting */
            $this->Account->incoming_click($account_id);
        } else {
            setcookie('account', $account_id, time()+DAY_TIMESTAMP, "/");
        }

        $tracking = $this->Website->get_publisher_tracking($shown_website_id);

        if(PUBLISHER_TRACKING_DISABLED === $tracking)
        {
            return;
        }

		// This makes sure that if someone clicks a link twice they don't get 2 credits
        setcookie('website-'.$shown_website_id, $page_id, time()+DAY_TIMESTAMP);

        /* Update the analytics */
		$link_type = $this->link_type();

		// Update Database
		$this->Widget->incoming_click($widget_id, $link_type);
		$this->loadModel('StatsWidget');
		$widget_info = array(
			'id' => $widget_id,
			'website_id' => $shown_website_id,
		);
		$incoming_field = $this->StatsWidget->get_incoming_by_type($link_type);
		$stats_info = array($incoming_field => 1, 'incoming' => 1);
		$this->StatsWidget->increment_stats(date('Y-m-d H:00:00'), $widget_info, $stats_info);

		if ($widget_analytic_id == 0) {
			switch ($link_type) {
				case LINK_TYPE_BASIC:
				$this->WidgetAnalytic->ctr_count_increment($shown_website_id, $page_id);
				break;
				case LINK_TYPE_CONTEXTUAL:
			// We don't currently track this in analytics
				break;
			}
		} else {
			$this->WidgetAnalytic->increment_ctr($widget_analytic_id);
        }

        $this->loadModel('Stats');
		$this->Stats->increment_widget_stats(date('Y-m-d 00:00:00'), $page_id, $website_id, $domain_bit, $shown_website_id, $type, $key, 1, 0, 0);
		//$this->log("URL: ".$_SERVER['REQUEST_URI']." Refer: ".$_SERVER['HTTP_REFERER'], "incoming_click");
	}

	private function filter_click($website_id, $spider) {
		if ($this->filters_enabled == 0) {
			return 0;
		}

		$skip = array("utm_medium=cpc", $_SERVER['SERVER_NAME']);

		if (isset($_COOKIE['website-'.$website_id])) {
			$this->filter_reason = "Website cookie set";
			return 1;
		}

		if (empty($_SERVER['HTTP_REFERER'])) {
			$this->filter_reason = "Empty HTTP_REFERER";
			return 1;
		}

		if ($spider) {
			$this->filter_reason = "Spider";
			return 1;
		}

        $host = parse_url($_SERVER['HTTP_REFERER']);
        if (false !== $host) {
            $host = isset($host['host']) ? $host['host'] : false;
        }

		if (false !== $host && $this->Misc->stristr_array($skip, $host)) {
			$this->filter_reason = "CPC";
			return 1;
		}

		return 0;
	}

	public function rss() {
		$this->Log->page_view();

		$pages = $this->Page->find("all", array("conditions" => array("top <>" => 0), "limit" => 50, "order" => array("top" => "desc")));
		$count = count($pages);

		for ($i = 0; $i < $count; $i++) {
			$website = $this->Website->findById($pages[$i]['Page']['website_id']);

			$pages[$i]['Page']['title_url'] = "http://".SITE_URL."/preview/".$pages[$i]['Page']['title_url']."/0";

			$pages[$i]['Page']['user_id'] = EMAIL_ADMIN." (".$website['Website']['name'].")";

			// getting intersect
			$intersect = $this->Intersects->get_by_page($pages[$i]);
			// get id by intersect
			$intersect_id = $this->Intersects->get_id_by_intersect($intersect);
			$pages[$i]['Page']['intersect_id'] = $intersect_id;
		}
		$this->layout = 'rss';

		$this->set('pages', $pages);
		$this->set('channel', array('title' => $this->pageTitle, 'description' => 'Blowing up blogs!'));
	}

	/* Ranker functions */
	public function ranker() {
		$this->layout = 'none';

		$this->Log->page_view();

		if (isset($this->params['page'])) {
			$page = $this->params['page'];
		} else {
			$page = 1;
		}

		// Get General Pages
		$pages = $this->get_popular_pages($page);

		$this->set("pages", $pages);
	}

	function create_canonical_page($page, $width, $height) {
		$page_out = $page['Page'];

		$page_out['url'] = $this->set_canonical_link($page);
        $asset_image = new \CI\Asset\Image();
        $page_out['image'] = $asset_image->getUrl(
            array(
                'page_id' => $page_out['id'],
                'type' => \CI\Asset\Image::URL_CROP_FULL,
                'image' => $page_out['image'],
                'width' => $width,
                'height' => $height,
            )
        );

		return $page_out;
	}


        function visual_check() {
             $this->set('isIpad', false);
        }
}

/* JSON wrappers until move to PHP 5.2 */
require_once 'JSON/JSON.php';
if (!function_exists('json_decode')) {
	function json_decode($content, $assoc=false) {
		if ($assoc) {
			$json = new Services_JSON(SERVICES_JSON_LOOSE_TYPE);
		}
		else {
			$json = new Services_JSON;
		}
		return $json->decode($content);
	}
}


global $services_json;
if (!function_exists('json_encode')) {
	function json_encode($content) {
		$json = new Services_JSON;
		return $json->encode($content);
	}
}

?>
