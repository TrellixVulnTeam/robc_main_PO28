<?php

include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

class WebsitesStatsController extends AppController {
	var $name = 'WebsitesStats';
	var $helpers = array('Html', 'Ajax', 'Javascript', 'Convert', 'Csv');
	var $uses = array('User', 'Log', 'Account', 'Website', 'Widget', 'Page', 'SocialPages', 'HistoryTimer', 'Analytic', 'LandingPageAnalytic', 'WidgetAnalytic', 'SimilarEngine', 'CompeteStore', 'LandingPageRebalance', 'WidgetRebalance', 'MetricLog');
	var $components = array('RequestHandler', 'Mail', 'Domain', 'CakeMemcache', 'Timer', 'Intersects', 'Date', 'Compete', 'Category');
	var $cache_on = 1;

	function beforeFilter() {
		// History Credits Controller
		App::import('Controller', 'HistoryCredits');
		global $HistoryCredits;
		$HistoryCredits = new HistoryCreditsController;
		$HistoryCredits->constructClasses();

		// History Widgets Controller
		App::import('Controller', 'HistoryWidgets');
		global $HistoryWidgets;
		$HistoryWidgets = new HistoryWidgetsController;
		$HistoryWidgets->constructClasses();
	}

	function hubcat_stats_average($hub = NULL, $category = NULL, $tier = NULL, $start_timestamp, $end_timestamp = 0) {
		Configure::write('debug', 0);
		$this->autoRender = false;

		$datetime_start = $this->Date->format_timestamp_time($start_timestamp);
		$datetime_end = (0 == $end_timestamp) ? $this->Date->yesterday_end() : $this->Date->format_timestamp_time($end_timestamp);

		if ($this->cache_on) {
			$key = $this->hubcat_stats_average_cache_key($hub, $category, $tier, $datetime_start, $datetime_end);
			$output = $this->hubcat_stats_average_cache_get($key);

			if ($output) {
				echo json_encode($output);
				return;
			}
		}

		$hub = ($hub == "N") ? NULL : $hub;
		$category = ($category == "N") ? NULL : $category;
		$tier = ($tier == "N") ? NULL : $tier;

		if (NULL === $hub && NULL === $category) {
			echo 0;
			return;
		}

		global $HistoryWidgets;
		global $HistoryCredits;

		$conditions = array(
			'visible' => 1,
			'status' => WEBSITE_STATUS_ACTIVE,
		);
		if (NULL !== $hub) {
			$conditions['domain_primary'] = $hub;
		}
		if (NULL !== $category) {
			$conditions['category'] = $category;
		}
		if (NULL !== $tier) {
			$conditions['tier'] = $tier;
		}

		$websites = $this->Website->find('all', array(
			'conditions' => $conditions,
			'fields' => 'Website.id, Website.account_id'
		));

		$count = count($websites);
		if (0 == $count) {
			echo 0;
			return;
		}

		$output = array(
			'Account' => array(
				'incoming' => 0,
				'outgoing' => 0,
				'credits' => 0
			),
			'Widget' => array(
				'incoming' => 0,
				'display' => 0,
				'ctr' => 0
			)
		);

		for ($i = 0; $i < $count; $i++) {
			$stats = $HistoryCredits->stats_range($websites[$i]['Website']['account_id'], $datetime_start, $datetime_end);

			$output['Account']['incoming'] += $stats['incoming'];
			$output['Account']['outgoing'] += $stats['outgoing'];
			$output['Account']['credits'] += $stats['credits'];

			$wstats = $HistoryWidgets->website_stats_range($websites[$i]['Website']['id'], $datetime_start, $datetime_end);
			$output['Widget']['incoming'] += $wstats['incoming'];
			$output['Widget']['display'] += $wstats['display'];
		}

		$output['Account']['credits'] = round($output['Account']['credits'] / $count);
		if ($output['Account']['outgoing'] > 0) {
			$output['Account']['return_rate'] = $output['Account']['incoming'] / $output['Account']['outgoing'];
		} else {
			$output['Account']['return_rate'] = 0;
		}
		// calculate average of incoming and outgoing afer calculating the return rate
		$output['Account']['incoming'] = round($output['Account']['incoming'] / $count);
		$output['Account']['outgoing'] = round($output['Account']['outgoing'] / $count);

		if ($output['Widget']['display'] > 0) {
			$output['Widget']['ctr'] = $output['Widget']['incoming'] / $output['Widget']['display'];
		} else {
			$output['Widget']['ctr'] = 0;
		}
		// calculate average of incoming and display afer calculating the widget ctr
		$output['Widget']['incoming'] = round($output['Widget']['incoming'] / $count);
		$output['Widget']['display'] = round($output['Widget']['display'] / $count);

		if ($this->cache_on) {
			$this->hubcat_stats_average_cache_set($key, $output);
		}

		echo json_encode($output);
	 }

	function hubcat_stats_average_cache_set($key, $value) {
		return $this->CakeMemcache->set($key,$value);
	}

	function hubcat_stats_average_cache_get($key) {
		return $this->CakeMemcache->get($key);
	}

	function hubcat_stats_average_cache_key($hub, $cat, $tier, $date_start, $date_end) {
		return 'hubcat_stats_average_cache_key::'.$hub.':'.$cat.':'.$tier.':'.$date_start.':'.$date_end;
	}

	public function precache() {
		$this->autoRender = false;

		/* Timers & Limits */
		$this->Timer->start(TIMER_WEBSITES_STATS_PRECACHE);
		set_time_limit(TIME_LIMIT_WEBSITES_STATS_PRECACHE);
		ini_set('memory_limit', MEMORY_LIMIT_WEBSITES_STATS_PRECACHE.'M');

		$hubs = array(
			DOMAIN_ID_RAAZE,
			DOMAIN_ID_CROWD_IGNITE,
			DOMAIN_ID_GAME_REVOLUTION,
			DOMAIN_ID_CRAVE_ONLINE,
			DOMAIN_ID_MOMTASTIC,
			DOMAIN_ID_THEFASHIONSPOT,
			DOMAIN_ID_TOTALLYHER,
            DOMAIN_ID_NEWS,
            DOMAIN_ID_ES,
			null
		);

		$tiers = array(1,2,3, null);

		$today = $this->Date->today();
		$yesterday = $this->Date->get_yesterday();

		$hubs_total = count($hubs);
		$hubs_count = 0;
		$this->Timer->progress_set(0);
		$this->Timer->running_set();
		foreach ($hubs as $hub) {

			for ($category=0;$category<CATEGORY_NUMBER;$category++) {
				foreach ($tiers as $tier) {
					echo 'hub ', $hub,', category ',$category,', tier ',$tier,':', PHP_EOL;
					$result = $this->hubcat_stats_average($hub, $category, $tier, $yesterday, $today);
					//print_r($result);
				}
			}
			echo 'hub ', $hub,', category ',null,', tier ',$tier,':', PHP_EOL;
			$result = $this->hubcat_stats_average($hub, null/*category*/, $tier, $yesterday, $today);

			$hubs_count++;
			$this->Timer->progress_set($hubs_count, $hubs_total);
			$this->Timer->running_set();
		}

		/* Save off timer */
		$data = $this->Timer->set_memory_limit();
		$this->Timer->stop_save($data);
	}
}