<?
/*
 * Timer component to track time it takes to complete tasks
 *
 * To use call $this->Timer->start(TYPE_OF_TIMER, $optional_json_object); to start
 * Call $this->Timer->stop($option_json_object);
 *
 * Assumes that JSON object will only be passed in once and object
 * size fits in 255 characters (current database constraint)
 */
class TimerComponent extends Object {
	
	var $components = array('CakeMemcache');

	var $controller;
	var $start;
	var $stop;
	var $type;
	var $data;

	function startup(&$controller) {
		$this->controller =& $controller;
	}
	
	function start($type, $data = NULL) {
		$this->start = $this->get_micro_time();

		$this->type = $type;

		// Save data if any is passed in
		if ($data) {
			plat_assert(strlen($data) <= 255);
			$this->data = $data;
		}
	}

	function stop($data = NULL) {
		$this->stop = $this->get_micro_time();

		// Save data if passed in
		if ($data) {
			plat_assert(strlen($data) <= 255);
			$this->data = $data;
		}
	}

	function save() {
		$data['HistoryTimer']['type'] = $this->type;
		$data['HistoryTimer']['data'] = $this->data;
		$data['HistoryTimer']['time'] = $this->stop - $this->start;

		// Do actual save
		ClassRegistry::init('HistoryTimer')->save($data);
	}

	function stop_save($data = NULL) {
		$this->stop($data);
		$this->save();
	}

	function set_memory_limit() {
		$size = memory_get_peak_usage();

		$json = json_encode(array("memory_size" => $size));

		return $json;
	}

	function get_memory_limit($json) {
		$data = json_decode($json);

		$out = (array) $data;
		if (isset($out['memory_size'])) {
			return $out['memory_size'];
		} else {
			return 0;
		}
	}


	// Get time in ms
	function get_micro_time() {
		list($msec, $sec) = explode(' ', microtime());
		return ((float)($msec * 1000) + (float)($sec * 1000));
	}
	
	function key_progress() {
	    return 'engine_script_progress::'.$this->type;
	}
	
	function key_running() {
	    return 'engine_script_running::'.$this->type;
	}
	
    function progress_set($count, $total = 0) {
    	if ($total) {
    		$progress = ($count / $total) * 100;
    	} else {
    		$progress = 0;
    	}

        $key = $this->key_progress();
        $this->CakeMemcache->set($key, $progress);
    }
    
    function progress_get($type = null) {
        if ($type !== null) {
            $this->type = $type;
        }
        $key = $this->key_progress();
        return $this->CakeMemcache->get($key);
    }
    
    function running_set($expiration = 300) {
        $key = $this->key_running();
        $this->CakeMemcache->set($key, 1, $expiration);
    }
    
    function running_get($type = null) {
        if ($type !== null) {
            $this->type = $type;
        }
        $key = $this->key_running();
        return $this->CakeMemcache->get($key);
    }

}

?>