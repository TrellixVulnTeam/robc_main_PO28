<?php
/**
 * IO File File
 *
 * PHP Version 5.3
 *
 * @author   Francisco Gonzalez <francisco.gonzalez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://www.crowdignite.com
 */

namespace CI\IO;

/**
 * IO File Class
 *
 * PHP Version 5.3
 *
 * @author   Francisco Gonzalez <francisco.gonzalez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://www.crowdignite.com
 */
class File
{
    protected $sPath    = '';
    protected $mContent = null;
    protected $aInfo    = array();

    public function __construct($sPath, $mContent)
    {
        $this->setPath($sPath);
        $this->setContent($mContent);
    }

    /**
     * Get the info related with the
     * set path and store it
     */
    protected function setInfo()
    {
        $this->aInfo = pathinfo($this->sPath);
    }

    /**
     * Sets the value of sPath.
     *
     * @param mixed $sPath the s path
     *
     * @return self
     */
    public function setPath($sPath)
    {
        if (strpos($sPath, 'http') === 0) {
            $sPath = $this->removeQuery($sPath);
        }

        $this->sPath = $sPath;
        $this->setInfo();

        return $this;
    }

    /**
     * Remove query params from the path to
     * avoid issues with the name of the file
     *
     * @param  string $sPath The file path
     *
     * @return string
     */
    protected function removeQuery($sPath)
    {
        $mQuery = strpos($sPath, '?');

        if (false !==  $mQuery) {
            $sPath = substr($sPath, 0, $mQuery);
        }

        return $sPath;
    }

    /**
     * Gets the value of sPath.
     *
     * @return mixed
     */
    public function getPath()
    {
        return $this->sPath;
    }

    /**
     * Gets the value of mContent.
     *
     * @return mixed
     */
    public function getContent()
    {
        return $this->mContent;
    }

    /**
     * Sets the value of mContent.
     *
     * @param mixed $mContent the m content
     *
     * @return self
     */
    public function setContent($mContent)
    {
        $this->mContent = $mContent;

        return $this;
    }

    /**
     * Get the file mimetype
     *
     * @return string|false
     */
    public function getMimeType()
    {
        $oFInfo = new \finfo(FILEINFO_MIME_TYPE);
        return $oFInfo->buffer($this->getContent());
    }

    /**
     * Gets the value of sName.
     *
     * @return mixed
     */
    public function getName()
    {
        return isset($this->aInfo['filename']) ? $this->aInfo['filename'] : '';
    }

    /**
     * Get the basename of the file
     *
     * @return string
     */
    public function getBaseName()
    {
        return isset($this->aInfo['basename']) ? $this->aInfo['basename'] : '';
    }

    /**
     * Get Extension
     *
     * @return string
     */
    public function getExtension()
    {
        return isset($this->aInfo['extension']) ? $this->aInfo['extension'] : '';
    }

    /**
     * Get the dirname
     *
     * @return string
     */
    public function getDirName()
    {
        return isset($this->aInfo['dirname']) ? $this->aInfo['dirname'] : '';
    }

    public function getModificationTime()
    {
        return filemtime($this->sPath);
    }
}
