<?php

namespace CI;

abstract class Report
{
    const HOURLY  = 'hourly';
    const DAILY   = 'daily';
    const MONTHLY = 'monthly';
    const WEEKLY  = 'weekly';

    const TIME_UNIT_HOUR  =  1;
    const TIME_UNIT_DAY   =  2;
    const TIME_UNIT_WEEK  =  3;
    const TIME_UNIT_MONTH =  4;

    const DEFAULT_DATE_RANGE = 7;

    const PARAM_START_DATE = 'start_date';
    const PARAM_END_DATE   = 'end_date';

    protected $aParams = array();
    protected $aData   = array();

    /**
     * Sets the value of aParams.
     *
     * @param array $aParams the params
     *
     * @return self
     */
    public function setParams(array $aParams)
    {
        $this->aParams = $aParams;

        return $this;
    }

    /**
     * Set a specific param for the report
     *
     * @param string $sName  Name of the param
     * @param mixed  $mValue Value of the param
     */
    public function setParam($sName, $mValue)
    {
        if (!emtpy($sName) && isset($mValue)) {
            $this->aParams[(string)$sName] = $mValue;
        }

        return $this;
    }

    /**
     * Verify is the params exists
     *
     * @param  string $sName The params name to check
     *
     * @return boolean
     */
    public function hasParam($sName)
    {
        return isset($this->aParams[$sName]);
    }

    /**
     * Get the requested param
     *
     * @param  string $sName the name of the param
     *
     * @throws \CI\Report\Exception If the param is missing
     *
     * @return the param
     */
    public function getParam($sName)
    {
        if (!$this->hasParam($sName)) {
            throw new \CI\Report\Exception(\CI\Report\Exception::MISSING_PARAM, $sName);
        }

        return $this->aParams[$sName];
    }

    /**
     * Sets the value of start_date.
     *
     * @return self
     */
    protected function initDateRange()
    {
        try {
            $this->aParams[self::PARAM_START_DATE] = \Carbon\Carbon::parse($this->aParams[self::PARAM_START_DATE])->startOfDay();
            $this->aParams[self::PARAM_END_DATE]   = \Carbon\Carbon::parse($this->aParams[self::PARAM_END_DATE])->endOfDay();
        } catch (\Exception $exception) {
            $this->aParams[self::PARAM_END_DATE]   = \Carbon\Carbon::yesterday()->endOfDay();
            $this->aParams[self::PARAM_START_DATE] = $this->aParams[self::PARAM_END_DATE]->copy()->subDays(self::DEFAULT_DATE_RANGE)->startOfDay();
        }

        if ($this->aParams[self::PARAM_END_DATE]->gt(\Carbon\Carbon::yesterday()->endOfDay()) || $this->aParams[self::PARAM_START_DATE]->gte($this->aParams[self::PARAM_END_DATE])) {
            $this->aParams[self::PARAM_END_DATE]   = \Carbon\Carbon::yesterday()->endOfDay();
            $this->aParams[self::PARAM_START_DATE] = $this->aParams[self::PARAM_END_DATE]->copy()->subDays(self::DEFAULT_DATE_RANGE)->startOfDay();
        }

        return $this;
    }
}