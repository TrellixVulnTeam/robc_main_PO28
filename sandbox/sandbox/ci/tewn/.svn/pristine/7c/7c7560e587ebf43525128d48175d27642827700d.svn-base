<?php
App::import('Component', 'Ti');

class CardWebsiteComponent extends TiComponent
{
    public    $components      = array('Dictionary', 'Category');
    protected $hub_class       = null;
    protected $domains         = null;
    protected $tag_model       = null;
    protected $website_model   = null;
    protected $allow_tag_model = null;

    public function init()
    {
        $this->view            = 'ti/card_website';
        $this->hub_class       = new CI\Hub(new CI\Hub\DataSource\MyArray());
        $this->tag_model       = ClassRegistry::init('Tag');
        $this->website_model   = ClassRegistry::init('Website');
        $this->allow_tag_model = ClassRegistry::init('WebsiteAllowedTag');
    }

    public function process()
    {
        $website_id = $this->options->get('website_id', 0);
        if ($website_id <= 0) {
            throw new Exception("InfoWebsite component requires the website_id option", 1);
        }
        $website = $this->website_model->findById($website_id);
        $website = $website['Website'];
        $website['domain_primary_name'] = $this->Dictionary->get_name(DictionaryComponent::TYPE_DOMAIN, $website['domain_primary']);
        $website['category_name'] = $this->Dictionary->get_name(DictionaryComponent::TYPE_CATEGORY, $website['category']);
        $website['content_rating_name'] = $this->Dictionary->get_name(DictionaryComponent::TYPE_CONTENT, $website['content_rating']);
        $website['status_name'] = $this->Dictionary->get_name(DictionaryComponent::TYPE_WEBSITE_STATUS, $website['status']);

        $cross_domains = $this->hub_class->bitsToIdArray($website['domain_bitfield']);
        $cross_domain_names = array();
        foreach ($cross_domains as $domain_id) {
            $cross_domain_names[] = $this->Dictionary->get_name(DictionaryComponent::TYPE_DOMAIN, $domain_id);
        }
        $website['domain_bitfield_names'] = implode(', ', $cross_domain_names);

        $allowed_categories = $this->Category->get_ids_from_bitfield($website['allowed_categories_bitfield']);
        $allowed_category_names = array();
        foreach ($allowed_categories as $category_id) {
            $allowed_category_names[] = $this->Dictionary->get_name(DictionaryComponent::TYPE_CATEGORY, $category_id);
        }
        $website['allowed_categories_bitfield_names'] = implode(', ', $allowed_category_names);

        $website_subcategories = $this->allow_tag_model->get_subcategory_ids_by_website_id($website_id);
        $all_category_tree = $this->tag_model->all_subcategory_list(true);

        $allow_category_tree = array();
        foreach ($all_category_tree as $category_id => $subcategories) {
            if (in_array($category_id, $allowed_categories)) {
                $category_name = $this->Dictionary->get_name(DictionaryComponent::TYPE_CATEGORY, $category_id);
                $subcategory_names = array();
                foreach ($subcategories as $id => $name) {
                    if (in_array($id, $website_subcategories)) {
                        $subcategory_names[] = $name;
                    }
                }
                $subcategory_names = empty($subcategory_names) ? 'All' : implode(', ', $subcategory_names);
                $allow_category_tree[] = "{$category_name} ($subcategory_names)";
            }
        }

        $website['allowed_category_subcategory_names'] = implode(', ', $allow_category_tree);

        $fields = $this->options->get(
            'fields',
            array(
                'link_moderate_id',
                'link_url_name',
                'domain',
                'category',
                'content_rating',
                'status'
            )
        );

        return array(
            'card' => $website,
            'options' => array(
                'fields' => $fields,
                'frame' => $this->options->get('frame', false),
                'frame_title' => $this->options->get('frame_title', 'Website Information'),
            )
        );
    }
}