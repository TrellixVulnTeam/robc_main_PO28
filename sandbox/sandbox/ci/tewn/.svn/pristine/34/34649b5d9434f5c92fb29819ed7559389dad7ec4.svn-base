<?php

namespace Test\Image;

use \CI\Asset\Image;

/**
 * @group Image
 * @group Asset
 */
class ImageTest extends \PHPUnit_Framework_TestCase
{
    protected $oImage;

    public function setUp()
    {
        define("DS", '/');
        define("IMAGES_URL", 'img/');
        define("CDN_URL_PRE_NUM", 'cdn.test.');
        define("CDN_URL_POST_NUM", '.com');

        $this->oImage = new MockImage();
        $this->initManipulatorObject();
        $this->initMigrateImage();
    }

    public function testGetRelativeUrlOnlyTheImage()
    {
        $aData = array(
            'image' => 'upload/_5673456788.png',
            'type'  => \CI\Asset\Image::URL_RELATIVE,
            'page_id' => 1
        );
        $sExpected = '/img/' . $aData['image'];
        $sResult = $this->oImage->getUrl($aData);

        $this->assertEquals($sExpected, $sResult);
    }

    public function testGetRelativeUrlWithOneParameter()
    {
        $aData = array(
            'image' => 'upload/_5673456788.png',
            'type'  => \CI\Asset\Image::URL_RELATIVE,
            'extra_parameters' => array(
                't' => 123456,
            ),
            'page_id' => 1

        );
        $sExpected = '/img/' . $aData['image'] . '?t=123456';
        $sResult = $this->oImage->getUrl($aData);

        $this->assertEquals($sExpected, $sResult);
    }

    public function testGetRelativeUrlWithParameters()
    {
        $aData = array(
            'image' => 'upload/_5673456788.png',
            'type'  => \CI\Asset\Image::URL_RELATIVE,
            'extra_parameters' => array(
                't'      => 123456,
                'date'   => 'today',
                'expire' => 'tomorrow',
            ),
            'page_id' => 1

        );
        $sExpected = '/img/' . $aData['image'] . '?t=123456&date=today&expire=tomorrow';
        $sResult = $this->oImage->getUrl($aData);

        $this->assertEquals($sExpected, $sResult);
    }

    public function testGetRelativeUrlWithOutParameters()
    {
        $aData = array();
        $sExpected = '';
        $sResult = $this->oImage->getUrl($aData);

        $this->assertEquals($sExpected, $sResult);
    }

    protected function initManipulatorObject()
    {
        $oStub = $this->getMockBuilder('\CI\Image\Manipulator')
                      ->setMethods(array('getImagesPath', 'migrate', 'cropThumbnailImage'))
                      ->getMock();
        $oStub->expects($this->any())
              ->method('migrate')
              ->will($this->returnValue(true));
        $oStub->expects($this->any())
              ->method('getImagesPath')
              ->will($this->returnValue(__FILE__));
        $oStub->expects($this->any())
              ->method('cropThumbnailImage')
              ->will($this->returnValue(true));
        $this->oImage->setManipulatorObject($oStub);
    }

    protected function initMigrateImage()
    {
        $oStub = $this->getMockBuilder('\CI\Migrate\Image')
                      ->setMethods(array('migrateImageDependTunable'))
                      ->getMock();
        $oStub->expects($this->any())
              ->method('migrateImageDependTunable')
              ->will($this->returnValue(false));
        $this->oImage->setMigrateImageObject($oStub);
    }
}

class MockImage extends Image
{
    protected $oMigrateImage;
    protected $oManipulator;

    public function setMigrateImageObject($oMigrateImage)
    {
        $this->oMigrateImage = $oMigrateImage;
    }

    public function getMigrateImageObject()
    {
        return $this->oMigrateImage;
    }

    public function setManipulatorObject($oManipulator)
    {
        $this->oManipulator = $oManipulator;
    }

    public function getManipulatorObject()
    {
        return $this->oManipulator;
    }
}