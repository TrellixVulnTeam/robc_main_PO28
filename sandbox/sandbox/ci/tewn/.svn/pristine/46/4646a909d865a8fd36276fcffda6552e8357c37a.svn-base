<?php
namespace CI\VowpalWabbit\Data;

use CI\VowpalWabbit\Data\Set\Exception;
use CI\Validator\VowpalWabbit\Feature;

class Set
{
    private $_nLabel;
    private $_nImportance;
    private $_nBase;
    private $_sTag;
    private $_aFeatures = array();

    public function setLabel($nLabel)
    {
        if (false === is_int($nLabel)) {
            throw new Exception(Exception::INVALID_LABEL);
        }

        $this->_nLabel = $nLabel;

        return $this;
    }

    public function setImportance($nImportance)
    {
        if (false === is_int($nImportance)) {
            throw new Exception(Exception::INVALID_IMPORTANCE);
        }

        $this->_nImportance = $nImportance;

        return $this;
    }

    public function setBase($nBase)
    {
        if (false === is_int($nBase) && false === is_float($nBase)) {
            throw new Exception(Exception::INVALID_BASE);
        }

        $this->_nBase = $nBase;

        return $this;
    }

    public function setTag($sTag)
    {
        if (false === is_string($sTag) || empty($sTag)) {
            throw new Exception(Exception::INVALID_TAG);
        }

        if (false === strpos($sTag, "'")) {
            $sTag = "'" . $sTag;
        }

        $this->_sTag = $sTag;

        return $this;
    }

    public function addFeatures(array $aFeatures)
    {
        $oValidator = new Feature();

        if (false === $oValidator->isValid($aFeatures)) {
            $aMessages = $oValidator->getMessages();
            throw new Exception(Exception::INVALID_FEATURE, current($aMessages));
        }

        $this->_aFeatures[] = $aFeatures;

        return $this;
    }

    public function toArray()
    {
        return $this->_aFeatures;
    }

    public function toString()
    {
        if (is_null($this->_nLabel) || empty($this->_aFeatures)) {
            throw new Exception(Exception::ERR_BUILD_DATASET);
        }

        $sInput = '' . $this->_nLabel;

        if (false === is_null($this->_nImportance)) {
            $sInput .= ' ' . $this->_nImportance;
        }

        if (false === is_null($this->_nBase)) {
            $sInput .= ' ' . $this->_nBase;
        }

        if (false === is_null($this->_sTag)) {
            $sInput .= ' ' . $this->_sTag;
        }

        foreach ($this->_aFeatures as $aFeature) {
            foreach ($aFeature as $sNamespace => $sFeature) {
                $sInput .= ' |' . $sNamespace . ' ' . $sFeature;
            }
        }

        return $sInput;
    }
}
