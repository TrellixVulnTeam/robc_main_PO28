<?php

namespace CI\Test\Filter\String;
use CI\Filter\String\Replace;

/**
 * @group filter
 * @group filter_string
 */
class FilterStringReplaceTest extends \PHPUnit_Framework_TestCase
{
    private $oFilter;

    public function setUp()
    {
        $this->oFilter = new Replace();
    }

    public function testSettingOldDataOnReplaceFilter()
    {
        $aExpected = array('|', '#');

        $this->oFilter->setOldData($aExpected);

        $this->assertAttributeEquals($aExpected, 'aOld', $this->oFilter);
    }

    public function testSettingNewDataOnReplaceFilter()
    {
        $aExpected = array(',', '@');

        $this->oFilter->setNewData($aExpected);

        $this->assertAttributeEquals($aExpected, 'aNew', $this->oFilter);
    }

    public function testReplaceFilter()
    {
        $aOldData = array('|', '#');
        $aNewData = array(',', '@');

        $sInput = 'option|option|option #options';
        $sExpected = 'option,option,option @options';

        $sResult = $this->oFilter->setOldData($aOldData)->setNewData($aNewData)->filter($sInput);

        $this->assertEquals($sExpected, $sResult);
    }

    public function testReplaceFilterWithoutSettingData()
    {
        $sInput = 'option,option,option @options';
        $sExpected = 'option_option_option @options';

        $sResult = $this->oFilter->filter($sInput);

        $this->assertEquals($sExpected, $sResult);
    }

    public function tearDown()
    {
        unset($this->oFilter);
    }
}