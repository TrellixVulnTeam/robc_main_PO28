<?php

namespace CI\IO;

class StdOutput
{
    const NO_OPTION     = 0;
    const OPTION_EOL    = 1;
    const OPTION_DATE   = 2;
    const OPTION_MEMORY = 4;

    protected $sLabelFormat = '[%s]';
    protected $sDateFormat  = 'Ymd.hi';
    protected $oFormatter;

    private function _checkBit($nBit, $nOptions)
    {
        return ($nBit & $nOptions) == $nBit;
    }

    public function put($sMessage, $sLabel = '', $bEol = true)
    {
        $sEol = $this->isCli() ? PHP_EOL : '<br>';
        if (!is_string($sMessage)) {
            $sMessage = print_r($sMessage, true);
        }
        if (!empty($sLabel)) {
            $sMessage = $sLabel.' '.$sMessage;
        }
        if ($bEol) {
            $sMessage .= $sEol;
        }
        echo $sMessage;

        if ($this->isCli()) {
            flush();
        }
    }

    protected function isCli()
    {
        return php_sapi_name() == 'cli';
    }

    protected function formatLabel($sLabel, $nOptions = self::OPTION_EOL, $sLabelFormat = null)
    {
        if (is_null($sLabelFormat)) {
            $sLabelFormat = $this->sLabelFormat;
        }
        if ($this->_checkBit(self::OPTION_DATE, $nOptions)) {
            $sLabel = date($this->sDateFormat).' '.$sLabel;
        }
        if ($this->_checkBit(self::OPTION_MEMORY, $nOptions)) {
            $aUnit = array('b','kb','mb','gb','tb','pb');
            $nSize = memory_get_usage(true);
            $nSize = @round($nSize / pow(1024, ($i = floor(log($nSize, 1024)))), 2).$aUnit[$i];
            $sLabel = $nSize.' '.$sLabel;
        }
        return sprintf($sLabelFormat, $sLabel);
    }

    protected function getFormatterObject()
    {
        if (!$this->oFormatter) {
            if ($this->isCli()) {
                $this->oFormatter = new Formatter\Cli();
            } else {
                $this->oFormatter = new Formatter\Web();
            }
        }

        return $this->oFormatter;
    }

    protected function colorLabel($sLabel, $sForegroundColor, $sBackgroundColor, $nOptions)
    {
        $oFormatter = $this->getFormatterObject();

        $sLabel = $this->formatLabel($sLabel, $nOptions);
        return $oFormatter->getColoredString($sLabel, $sForegroundColor, $sBackgroundColor);
    }

    public function info($sMessage, $sLabel = 'INFO', $nOptions = self::OPTION_EOL)
    {
        $sLabel = $this->colorLabel($sLabel, 'white', 'blue', $nOptions);
        $this->put($sMessage, $sLabel, $this->_checkBit(self::OPTION_EOL, $nOptions));
    }

    public function error($sMessage, $sLabel = 'ERROR', $nOptions = self::OPTION_EOL)
    {
        $sLabel = $this->colorLabel($sLabel, 'black', 'red', $nOptions);
        $this->put($sMessage, $sLabel, $this->_checkBit(self::OPTION_EOL, $nOptions));
    }

    public function success($sMessage, $sLabel = 'SUCCESS', $nOptions = self::OPTION_EOL)
    {
        $sLabel = $this->colorLabel($sLabel, 'black', 'green', $nOptions);
        $this->put($sMessage, $sLabel, $this->_checkBit(self::OPTION_EOL, $nOptions));
    }

    public function warning($sMessage, $sLabel = 'WARNING', $nOptions = self::OPTION_EOL)
    {
        $sLabel = $this->colorLabel($sLabel, 'yellow', 'black', $nOptions);
        $this->put($sMessage, $sLabel, $this->_checkBit(self::OPTION_EOL, $nOptions));
    }
}
