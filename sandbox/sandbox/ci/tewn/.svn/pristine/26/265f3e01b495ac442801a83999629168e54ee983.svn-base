<?php

namespace Test\Config\System;

class IntersectTest extends \PHPUnit_Framework_TestCase
{
    public function testGetNull()
    {
        $oExpected = false;
        $oSetting = $this->getMockBuilder('\CI\Config\System\Setting')
                         ->setMethods(array('errorLog'))
                         ->getMock();
        $oResult = $oSetting->get('some_key');

        $this->assertEquals($oExpected, $oResult, 'expected null');
    }

    public function testSetAndGetValueFromMemcached()
    {
        $oExpected = 'some_value';
        $oSetting = $this->getMockBuilder('\CI\Config\System\Setting')
                         ->setMethods(array('getMemcachedObject', 'getDatabaseObject'))
                         ->getMock();
        $oMemcached = $this->getMockBuilder('\CI\Memcached')
                           ->disableOriginalConstructor()
                           ->setMethods(array('get', 'set'))
                           ->getMock();
        $oMemcached->expects($this->once())
                   ->method('set')
                   ->will($this->returnValue(true));
        $oMemcached->expects($this->once())
                   ->method('get')
                   ->will($this->returnValue('some_value'));
        $oDatabase = $this->getMockBuilder('\CI\Database')
                          ->disableOriginalConstructor()
                          ->setMethods(array('execute', 'query'))
                          ->getMock();
        $oDatabase->expects($this->once())
                  ->method('execute')
                  ->will($this->returnValue(true));
        $oDatabase->expects($this->any())
                  ->method('query')
                  ->will($this->returnValue(null));
        $oSetting->expects($this->any())
                 ->method('getDatabaseObject')
                 ->will($this->returnValue($oDatabase));
        $oSetting->expects($this->any())
                 ->method('getMemcachedObject')
                 ->will($this->returnValue($oMemcached));

        $oSetting->set('some_key', 'some_value');
        $oResult = $oSetting->get('some_key');

        $this->assertEquals($oExpected, $oResult, 'expected some_value');
    }

    public function testSetAndGetValueFromDatabase()
    {
        $oExpected = 'some_value';
        $oSetting = $this->getMockBuilder('\CI\Config\System\Setting')
                         ->setMethods(array('getMemcachedObject', 'getDatabaseObject'))
                         ->getMock();
        $oMemcached = $this->getMockBuilder('\CI\Memcached')
                           ->disableOriginalConstructor()
                           ->setMethods(array('get', 'set'))
                           ->getMock();
        $oMemcached->expects($this->once())
                   ->method('set')
                   ->will($this->returnValue(true));
        $oMemcached->expects($this->once())
                   ->method('get')
                   ->will($this->returnValue('some_value'));
        $oDatabase = $this->getMockBuilder('\CI\Database')
                          ->disableOriginalConstructor()
                          ->setMethods(array('execute', 'query'))
                          ->getMock();
        $oDatabase->expects($this->once())
                  ->method('execute')
                  ->will($this->returnValue(true));
        $oDatabase->expects($this->any())
                  ->method('query')
                  ->will($this->returnValue(array('value' =>'some_value')));
        $oSetting->expects($this->any())
                 ->method('getDatabaseObject')
                 ->will($this->returnValue($oDatabase));
        $oSetting->expects($this->any())
                 ->method('getMemcachedObject')
                 ->will($this->returnValue($oMemcached));

        $oSetting->set('some_key', 'some_value');
        $oResult = $oSetting->get('some_key');

        $this->assertEquals($oExpected, $oResult, 'expected some_value');
    }

    public function testGetByHub()
    {
        $oExpected = 'some_value';
        $oSetting = $this->getMockBuilder('\CI\Config\System\Setting')
                         ->setMethods(array('get'))
                         ->getMock();
        $oSetting->expects($this->any())
                 ->method('get')
                 ->will($this->returnValue('some_value'));
        $mResult = $oSetting->getByHub(\CI\Config\System\Setting::WIDGET_PENALIZE, 2);

        $this->assertEquals($oExpected, $mResult, 'expected some_value');
    }

    /**
     * @expectedException \CI\Config\System\Setting\Exception\Undefined
     */
    public function testGetByHubWithNotValidKey()
    {
        $oExpected = 'some_value';
        $oSetting  = new \CI\Config\System\Setting();
        $mResult   = $oSetting->getByHub('some_key', 2);
    }

    /**
     * @expectedException \CI\Config\System\Setting\Exception\Undefined
     */
    public function testGetByHubWithNotValidHub()
    {
        $oExpected = 'some_value';
        $oSetting  = new \CI\Config\System\Setting();
        $mResult   = $oSetting->getByHub('some_key', 9999999);
    }

    public function testGetByHubAndTheKeyDoesNotExist()
    {
        $oExpected = false;
        $oSetting = $this->getMockBuilder('\CI\Config\System\Setting')
                         ->setMethods(array('get'))
                         ->getMock();
        $oSetting->expects($this->any())
                 ->method('get')
                 ->will($this->returnValue(false));
        $mResult = $oSetting->getByHub(\CI\Config\System\Setting::WIDGET_PENALIZE, 2);

        $this->assertEquals($oExpected, $mResult, 'expected false');
    }
}