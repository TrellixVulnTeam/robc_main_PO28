<?php
include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

class LandingPageAnalyticsController extends AppController {

	var $name = 'LandingPageAnalytics';
	var $components = array("Intersects");
	var $uses = array('LandingPageAnalytic', 'Page');

	function beforeFilter() {
		App::import('Controller', 'LandingPageEngine');
		global $LandingPageEngine;
		$LandingPageEngine = new LandingPageEngineController;
		$LandingPageEngine->constructClasses();
	}

	function domain_bits_set($website_id, $domain_bitfield) {
		$oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());

		$domains = $oHub->getAllIds();
		$domain_bitfield_ids = $oHub->bitsToIdArray($domain_bitfield);
		$domains_to_update = array();

		foreach ($domains as $domain) {
			if (!in_array($domain, $domain_bitfield_ids)) {
				$domains_to_update[] = (1 << $domain); // store the bit of the domain
			}
		}

		$this->LandingPageAnalytic->remove_with_website_and_domain($website_id, $domains_to_update);
	}

	function remove_website_pages_from_domain($website_id, $domain_bit) {
		$pages = $this->Page->find("all", array("conditions" => array(
								"website_id" => $website_id,
								"status != ".PAGE_STATUS_PENDING)));

		foreach ($pages as $page) {
			$this->LandingPageAnalytic->remove_page_from_domain($page['Page']['id'], $domain_bit);
		}
	}

	function update_business_rules() {
		set_time_limit(60*60);

		$intersects = $this->Intersects->get_all();

		foreach ($intersects as $intersect) {
			$this->update_business_rules_intersect($intersect);
		}
	}

	function update_business_rules_intersect($intersect) {
		$analytics = $this->LandingPageAnalytic->find_by_intersect($intersect);

		foreach ($analytics as $analytic) {
			$page = $this->Page->findById($analytic['LandingPageAnalytic']['page_id']);

			$this->update_business_rules_page($intersect, $page, $analytic);
		}
	}

	function update_business_rules_page($intersect, $page, $analytic = null) {
		global $LandingPageEngine;

		$good = $LandingPageEngine->business_rules_allowed($intersect, $page);

		if (!$good) {
			// remove from widget analytics
			if (!$analytic) {
				$analytic = $this->LandingPageAnalytic->find_by_intersect_page($intersect, $page['Page']['id']);
			}

			echo "Removing: ".$page['Page']['title_url']." ID: ".$analytic['LandingPageAnalytic']['id']."<br>";

			$this->LandingPageAnalytic->remove_page_from_intersect($analytic['LandingPageAnalytic']['id']);
		}
	}

	/* Return the stats of a page after a specific date */
	function page_stats($page_id) {
		$stats = $this->LandingPageAnalytic->page_stats($page_id);

		$ctr = $impressions = 0;
		$impressions = $stats[0][0]['impressions'];
		$ctr = $stats[0][0]['ctr'];

		return array('impressions' => $impressions, 'ctr' => $ctr);
	}

	function fix_duplicates() {
		set_time_limit(60*60);
		$this->layout = "none";

		$oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
		$domain_ids = $oHub->getAllIds();

		foreach ($domain_ids as $domain_id) {
			$domain_bit = $oHub->idToBit($domain_id);

			$intersects = $this->Intersects->get_all($domain_id);

			foreach ($intersects as $intersect) {
				for ($type = 0; $type < LINK_TYPE_NUMBER; $type++) {
					$analytics = $this->LandingPageAnalytic->duplicates($intersect, $domain_bit, $type);

					foreach ($analytics as $analytic) {
						$duplicates = $this->LandingPageAnalytic->page_by_intersect($intersect, $analytic['LandingPageAnalytic']['page_id'], $domain_bit, $type);
						$count = count($duplicates);
						for ($i = 1; $i < $count; $i++) {
							$this->LandingPageAnalytic->remove_page_from_intersect($duplicates[$i]['LandingPageAnalytic']['id']);
						}
					}
				}
			}
		}
	}

}
?>