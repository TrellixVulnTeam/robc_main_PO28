<?php

require_once('xmlrpc/xmlrpc.inc');

class PingbackComponent {

	var $debug = 0;
        var $skip = array('moondogsports.com',
			  'digg.com',
			  'reddit.com',
			  'mixx.com',
			  'feedburner.com',
			  'us.marketgid.com',
		          'facebook.com',
			  'twitter.com',
			  'stumbleupon.com',
			  'intypemedia.com',
			  'betvega.com',
			  'sbgglobal.com',
		          'stylewp.com',
			  'onlineseats.com',
			  'staremagazine.com');

        var $skip_exact = array('http://www.bustedcoverage.com',
				'http://donchavez.com',
				'http://allleftturns.com',
				'http://www.funtasticus.com',
				'http://www.holytaco.com',
				'http://plunderguide.com',
				'http://regretfulmorning.com',
				'http://www.screenjunkies.com',
				'http://tastybooze.com',
				'http://uncoached.com',
				'http://unrealitymag.com',
				'http://www.yardbarker.com/author/new',
				'http://www.doubleviking.com/',
				'http://ballhype.com/post/url/?url=',
				'http://showhype.com/post/url/?url=',
				'http://ballhype.com/blog/the_world_according_to_moondog/',
				'http://yardbarker.com/users/MoonDogLeft');

	function send($myarticle, $url, $pdebug = 0) {
		$parts = parse_url($url);

		if (!isset($parts['scheme'])) {
			//print "do_send_pingback: failed to get url scheme [".$url."]<br />\n";
			return(1);
		}
		if ($parts['scheme'] != 'http') {
			//print "do_send_pingback: url scheme is not http [".$url."]<br />\n";
			return(1);
		}
		if (!isset($parts['host'])) {
			//print "do_send_pingback: could not get host [".$url."]<br />\n";
			return(1);
		}
		$host = $parts['host'];
		$port = 80;
		if (isset($parts['port'])) $port = $parts['port'];
		$path = "/";
		if (isset($parts['path'])) $path = $parts['path'];
		if (isset($parts['query'])) $path .="?".$parts['query'];
		if (isset($parts['fragment'])) $path .="#".$parts['fragment'];
		
		$fp = fsockopen($host, $port);
		fwrite($fp, "GET $path HTTP/1.0\r\nHost: $host\r\n\r\n");
		$response = "";
		while (is_resource($fp) && $fp && (!feof($fp))) {
			$response .= fread($fp, 1024);
		}
		fclose($fp);
		$lines = explode("\r\n", $response);
		foreach ($lines as $line) {
			if (ereg("X-Pingback: ", $line)) {
				list($pburl) = sscanf($line, "X-Pingback: %s");
			}
		}
		
		if (empty($pburl)) {
			//print "Could not get pingback url from [$url].<br />\n";
			return(1);
		}

		$parts = parse_url($pburl);

		if (!isset($parts['scheme'])) {
			//print "do_send_pingback: failed to get pingback url scheme [".$pburl."]<br />\n";
			return(1);
		}
		if ($parts['scheme'] != 'http') {
			//print "do_send_pingback: pingback url scheme is not http[".$pburl."]<br />\n";
			return(1);
		}
		if (!isset($parts['host'])) {
			//print "do_send_pingback: could not get pingback host [".$pburl."]<br />\n";
			return(1);
		}
		$host = $parts['host'];
		$port = 80;
		if (isset($parts['port'])) $port = $parts['port'];
		$path = "/";
		if (isset($parts['path'])) $path = $parts['path'];
		if (isset($parts['query'])) $path .="?".$parts['query'];
		if (isset($parts['fragment'])) $path .="#".$parts['fragment'];
		
		$m = new xmlrpcmsg("pingback.ping", array(new xmlrpcval($myarticle, "string"), new xmlrpcval($url, "string")));
		$c = new xmlrpc_client($path, $host, $port);
		$c->setRequestCompression(null);
		$c->setAcceptedCompression(null);
		if ($pdebug) $c->setDebug(2);
		$r = $c->send($m);
		if (!$r->faultCode()) {
			//print "Pingback to $url succeeded.<br >\n";
		} else {
			$err = "code ".$r->faultCode()." message ".$r->faultString();
			//			print "Pingback to $url failed with error $err.<br >\n";
		}
	}
	
	// call send_pingback() from your blog after adding a new post,
	// $text will be the full text of your post
	// $myurl will be the full url of your posting
	function find_and_send($text, $myurl) {
		$m = array();
		preg_match_all ("/<a[^>]*href=[\"']([^\"']*)[\"'][^>]*>(.*?)<\/a>/i", $text, $m);
		$c = count($m[0]);
		//echo "Sending pingback to: <br><br>";
		for ($i = 0; $i < $c; $i++) {
			$ret = $this->valid_url($m[1][$i]);
			if ($ret) {
                                // prune generic
				if (stristr_array($this->skip, $m[1][$i])) {
        				continue;
				}
				// prune exact
				if (in_array($m[1][$i], $this->skip_exact)) {
					continue;
				}

				$this->send($myurl, $m[1][$i], $this->debug);
			}
		}
	}

        function send_pingbacks($myurl) {        
                $header = $this->get_web_page($myurl);

                $this->find_and_send($header['content'], $myurl);
	}

	function valid_url($url) {
		return preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $url);
	} 

	function get_web_page($url)
        {

		$options = array(
			CURLOPT_RETURNTRANSFER => true,     // return web page
			CURLOPT_HEADER         => false,    // don't return headers
			CURLOPT_FOLLOWLOCATION => true,     // follow redirects
			CURLOPT_ENCODING       => "",       // handle compressed
			CURLOPT_USERAGENT      => "spider", // who am i
			CURLOPT_AUTOREFERER    => true,     // set referer on redirect
			CURLOPT_CONNECTTIMEOUT => 120,      // timeout on connect
			CURLOPT_TIMEOUT        => 120,      // timeout on response
			CURLOPT_MAXREDIRS      => 10,       // stop after 10 redirects
			);
		
		$ch      = curl_init( $url );
		curl_setopt_array( $ch, $options );
		$content = curl_exec( $ch );
		$err     = curl_errno( $ch );
		$errmsg  = curl_error( $ch );
		$header  = curl_getinfo( $ch );
		curl_close( $ch );
		
		$header['errno']   = $err;
		$header['errmsg']  = $errmsg;
		$header['content'] = $content;

		return $header;
	}
	
}

function stristr_array($haystack, $needle) {
	if (!is_array($haystack)) {
		return false;
	}

	foreach ($haystack as $element) {
		if (strstr($needle, $element)) {
			return $element;
		}
	}
} 
?>
