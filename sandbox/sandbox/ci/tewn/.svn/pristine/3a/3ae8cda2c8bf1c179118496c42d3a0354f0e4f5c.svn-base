<?php

namespace Test\Validator;
use CI\Validator\Referer as RefererValidator;

/**
 * @group validator
 * @group validator_referer
 */
class ValidatorRefererTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RefererValidator
     */
    protected $oValidator;

    /**
     * Create a new instance of RefererValidator
     *
     * @return void
     */
    public function setUp()
    {
        $this->oValidator = new RefererValidator();
    }

    /**
     * Test empty values
     *
     * @return void
     */
    public function testEmptyReferer()
    {
        $this->assertTrue($this->oValidator->isValid(''));
        $this->assertTrue($this->oValidator->isValid(null));
        $this->assertTrue($this->oValidator->isValid(false));
        $this->assertTrue($this->oValidator->isValid(0));
    }

    /**
     * Test that allowed and disallowed domains are arrays
     *
     * @return void
     */
    public function testInitialValues()
    {
        $this->assertEquals(array(), $this->oValidator->getAllowedDomains());
        $this->assertEquals(array(), $this->oValidator->getDisAllowedDomains());
    }

    /**
     * Test set allowed domains
     *
     * @return void
     */
    public function testSetAllowedDomains()
    {
        $aDomains = array('domain1.com', 'domain2.com');
        $this->oValidator->setAllowedDomains($aDomains);
        $this->assertEquals($aDomains, $this->oValidator->getAllowedDomains());
    }

    /**
     * Test adding only one domain
     *
     * @return void
     */
    public function testAllowDomain()
    {
        $sDomain = 'domain.com';
        $this->oValidator->allowDomain($sDomain);
        $this->assertEquals(array($sDomain), $this->oValidator->getAllowedDomains());
    }

    /**
     * Test disallowed domains
     *
     * @return void
     */
    public function testDisAllowedDomains()
    {
        $aDomains = array('domain1.com', 'domain2.com');
        $this->oValidator->setDisAllowedDomains($aDomains);
        $this->assertEquals($aDomains, $this->oValidator->getDisAllowedDomains());
    }

    /**
     * Test disallowing one domain
     *
     * @return void
     */
    public function testDisallowDomain()
    {
        $sDomain = 'domain.com';
        $this->oValidator->disallowDomain($sDomain);
        $this->assertEquals(array($sDomain), $this->oValidator->getDisAllowedDomains());
    }

    /**
     * Test reseting the list of the domains.
     *
     * @return void
     */
    public function testReset()
    {
        $aAllowedDomains    = array('allowed1.com', 'allowed2.com');
        $aDisallowedDomains = array('disallowed1.com', 'disallowed2.com');

        $this->oValidator->setAllowedDomains($aAllowedDomains);
        $this->oValidator->resetAllowedDomains();
        $this->assertEquals(array(), $this->oValidator->getAllowedDomains());

        $this->oValidator->setDisAllowedDomains($aDisallowedDomains);
        $this->oValidator->resetDisAllowedDomains();
        $this->assertEquals(array(), $this->oValidator->getDisAllowedDomains());

        $this->oValidator->setAllowedDomains($aAllowedDomains);
        $this->oValidator->setDisAllowedDomains($aDisallowedDomains);

        $this->assertEquals(2, count($this->oValidator->getAllowedDomains()));
        $this->assertEquals(2, count($this->oValidator->getDisAllowedDomains()));
        $this->oValidator->reset();
        $this->assertEquals(0, count($this->oValidator->getAllowedDomains()));
        $this->assertEquals(0, count($this->oValidator->getDisAllowedDomains()));
    }

    /**
     * Test allowing domains
     *
     * @return void
     */
    public function testAllow()
    {
        $sDomain1 = 'domain1.com';
        $sDomain2 = 'domain2.com';

        $aAllowedDomains = array($sDomain1, $sDomain2);
        $this->oValidator->setAllowedDomains($aAllowedDomains);
        $this->assertEquals(2, count($this->oValidator->getAllowedDomains()));
        $this->oValidator->disallowDomain($sDomain2);
        $this->assertEquals(array($sDomain1), $this->oValidator->getAllowedDomains());
        $this->oValidator->allowDomain($sDomain2);
        $this->assertEquals($aAllowedDomains, $this->oValidator->getAllowedDomains());
        $this->assertEquals(array(), $this->oValidator->getDisAllowedDomains());
    }

    /**
     * Test disallow domains
     *
     * @return void
     */
    public function testDisallow()
    {
        $sDomain1 = 'domain1.com';
        $sDomain2 = 'domain2.com';

        $aDisallowedDomains = array($sDomain1, $sDomain2);
        $this->oValidator->setDisAllowedDomains($aDisallowedDomains);
        $this->assertEquals(2, count($this->oValidator->getDisAllowedDomains()));
        $this->oValidator->allowDomain($sDomain2);
        $this->assertEquals(array($sDomain1), $this->oValidator->getDisAllowedDomains());
        $this->oValidator->disallowDomain($sDomain2);
        $this->assertEquals($aDisallowedDomains, $this->oValidator->getDisAllowedDomains());
        $this->assertEquals(array(), $this->oValidator->getAllowedDomains());
    }

    /**
     * Test if is valid
     *
     * @return void
     */
    public function testIsValidAllowedAcl()
    {
        $aReferers = array(
            'http://crowdignite.craveonline.com/link/xxx/0',
            'http://crowdignite.gamerevolution.com/link/xxx/0',
            'http://crowdignite.totallyher.com/link/xxx/0',
            'http://crowd-ignite.totallyher.com/link/xxx/0',
        );

        $aDomains = array(
            "crowdignite.craveonline.com",
            "crowdignite.gamerevolution.com",
            "crowd-ignite.totallyher.com",
        );
        $this->oValidator->setAllowedDomains($aDomains);
        $this->assertTrue($this->oValidator->isValid($aReferers[0]));
        $this->assertFalse($this->oValidator->isValid($aReferers[2]));
        $this->assertTrue($this->oValidator->isValid($aReferers[3]));
    }

    /**
     * Test is valid method for disallowed domains
     *
     * @return void
     */
    public function testIsValidDisallowedAcl()
    {
        $aReferers = array(
            'http://crowdignite.craveonline.com/link/xxx/0',
            'http://crowdignite.gamerevolution.com/link/xxx/0',
            'http://crowdignite.totallyher.com/link/xxx/0',
        );
        $aDomains = array(
            "crowdignite.craveonline.com",
            "crowdignite.gamerevolution.com",
        );
        $this->oValidator->setDisAllowedDomains($aDomains);
        $this->assertTrue($this->oValidator->isValid($aReferers[2]));
        $this->assertFalse($this->oValidator->isValid($aReferers[1]));
    }

    /**
     * Test when the two lists are set
     *
     * @return void
     */
    public function testIsValidBothAcl()
    {
        $aReferers = array(
            'http://crowdignite.craveonline.com/link/xxx/0',
            'http://crowdignite.gamerevolution.com/link/xxx/0',
            'http://crowdignite.totallyher.com/link/xxx/0',
        );

        $aAllowedDomains = array("crowdignite.craveonline.com");
        $aDisallowedDomains = array("crowdignite.gamerevolution.com");

        $this->oValidator->setAllowedDomains($aAllowedDomains);
        $this->oValidator->setDisAllowedDomains($aDisallowedDomains);

        $this->assertTrue($this->oValidator->isValid($aReferers[0]));
        $this->assertFalse($this->oValidator->isValid($aReferers[1]));
        $this->assertFalse($this->oValidator->isValid($aReferers[2]));
    }

    /**
     * Test is valid method with an empty acl
     */
    public function testIsValidEmptyAcl()
    {
        $sDomain = 'crowdignite.craveonline.com/link/xxx/0';
        $this->assertTrue($this->oValidator->isValid(''));
        $this->assertTrue($this->oValidator->isValid($sDomain));
    }

    /**
     * Test when the referer have different protocols
     *
     * @return void
     */
    public function testIsValidWithDifferentProtocols()
    {
        $aReferers = array(
            'crowdignite.craveonline.com/link/xxx/0',
            'http://crowdignite.craveonline.com/link/xxx/0',
            'https://crowdignite.craveonline.com/link/xxx/0',
        );

        $aAllowedDomains = array("crowdignite.craveonline.com");

        $this->oValidator->setAllowedDomains($aAllowedDomains);

        foreach ($aReferers as $nIndex => $aElement) {
            $this->assertTrue(
                $this->oValidator->isValid($aElement),
                "Failed test #$nIndex"
            );
        }
    }
}