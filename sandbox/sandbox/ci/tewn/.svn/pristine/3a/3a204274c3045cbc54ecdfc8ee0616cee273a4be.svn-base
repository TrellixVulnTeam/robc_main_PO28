<?php

namespace CI\Component;

class LandingPage
{
    protected $oCache = null;

    public function getCacheObject()
    {
        if (empty($this->oCache)) {
            $this->oCache = new \CI\Memcached\App();
        }
        return $this->oCache;
    }

    public function getOutgoingLink($aPage, $nIntersectId = 0)
    {
        $sLink = isset($aPage['third_party_link']) ? $aPage['link'] : '';
        if (empty($sLink)) {
            /* If tracking w/ analytic IDs, use that */
            $sAnalyticPart  = isset($aPage['analytic_id']) ? "/".$aPage['analytic_id'] : '/0';
            $sAnalyticPart .= isset($aPage['widget_analytic_id']) ? "/".$aPage['widget_analytic_id'] : '';

            if ($sAnalyticPart == '/0') {
                $sAnalyticPart = '';
            }

            $sTitle = $aPage['title_url'];
            if (empty($sTitle)) {
                $sTitle = $aPage['id'];
            }

            $sPaid = '0';
            if (!empty($aPage['paid_link']) && true === $aPage['paid_link']) {
                $sPaid = '1';
            }

            $sPaidCampaignId = '0';
            if (!empty($aPage['campaign_id'])) {
                $sPaidCampaignId = $aPage['campaign_id'];
            }

            $sLink  = "http://" . LANDING_PAGE;
            $sLink .= "/link/{$sTitle}/{$nIntersectId}{$sAnalyticPart}/{$sPaid}/{$sPaidCampaignId}";
        }
        return $sLink;
    }

    public function getRandomSeed($aIntersect, $nDomainId, $nIndex = null)
    {
        if (empty($nIndex)) {
            $nIndex = mt_rand(1, DEFAULT_LANDING_PAGE_RANDOM_SEEDS);
        }
        $oKeyGen = new \CI\Memcached\KeyGen(array($aIntersect, $nDomainId, $nIndex), 'lp_seed');
        $sCacheKey = $oKeyGen->generate();
        $oCache = $this->getCacheObject();
        $nSeed = $oCache->get($sCacheKey);
        if (empty($nSeed)) {
            $nSeed = mt_rand(1, 10000);
            $oCache->set($sCacheKey, $nSeed);
        }
        return $nSeed;
    }

    public function queueData($aPages, $nIntersectId, $nDomainBit)
    {
        $aStats = array(
            'int'   => $nIntersectId,
            'dom'   => $nDomainBit,
            'date'  => time(),
            'stats' => array()
        );
        foreach ($aPages as $aPage) {
            if (isset($aPage['Page'])) {
                $aPage = $aPage['Page'];
            }

            if (!empty($aPage['intersect_id']) && $aPage['intersect_id'] != $nIntersectId) {
                continue;
            }

            $aPageSparse = array('id' => $aPage['id']);
            if (isset($aPage['analytic_id'])) {
                $aPageSparse['analytic_id'] = $aPage['analytic_id'];
            }

            $aStatsPage = array(
                'i' => $aPage['id'],
                'w' => $aPage['website_id']
            );

            if (isset($aPage['type']) && $aPage['type'] > 0) {
                $aStatsPage['t'] = $aPage['type'];
            }

            if (isset($aPage['type']) && $aPage['key'] > 0) {
                $aStatsPage['k'] = $aPage['key'];
            }

            $sBatch = empty($aPage['batch']) ? 'general_pages' : $aPage['batch'];

            $aStats['stats'][] = $aStatsPage;
            $aStats['info'][$sBatch][] = array('Page' => $aPageSparse);
        }
        return $aStats;
    }

    public function isSpider()
    {
        $bIsSpider = true;
        $oNotEmpty = new \CI\Validator\NotEmpty();
        $oBrowser  = new \CI\Validator\Browser();

        $oValidator = new \CI\Validator\Container();
        $oValidator->addRule($oNotEmpty, true);
        $oValidator->addRule($oBrowser, true);

        $sReferer   = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '';
        $sUserAgent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';

        if ($oValidator->isValid($sUserAgent) && $oNotEmpty->isValid($sReferer)) {
            $bIsSpider = false;
        }
        return $bIsSpider;
    }

    public function isIEBrowser()
    {
        $sUserAgent = $_SERVER['HTTP_USER_AGENT'];
        $bIsIE = false;
        if (preg_match('/MSIE/i', $sUserAgent)) {
            $bIsIE = true;
        }

        return $bIsIE;
    }

    public function getUtmUrl($sUrl, $aWebsite)
    {
        if (!$aWebsite['disable_utm']) {
            $sCustomUtm = $aWebsite['custom_utm'];
            if (!empty($sCustomUtm)) {
                $sUrl = $this->addCustomUtm($sUrl, $sCustomUtm);
            } else {
                /* UTM Source */
                $sUrl = $this->addUrlParameter($sUrl, "utm_source", "crowdignite.com");
                $sUrl = $this->addUrlParameter($sUrl, "utm_medium", "referral");
                $sUrl = $this->addUrlParameter($sUrl, "utm_campaign", "crowdignite.com");
            }
        }
        return $sUrl;
    }

    public function addCustomUtm($sUrl, $sCustomUtm)
    {
        parse_str($sCustomUtm, $aOutputUtm);
        foreach ($aOutputUtm as $sUtm => $sValue) {
            $sUrl = $this->addUrlParameter($sUrl, $sUtm, $sValue, false);
        }
        return $sUrl;
    }

    public function addUrlParameter($sUrl, $sName, $sValue, $bSafe = true)
    {
        $aParsedUrl = parse_url($sUrl);

        if (isset($aParsedUrl['query'])) {
            $sQueryString = $aParsedUrl['query'];
            $aQuery = $this->queryStringToArray($sQueryString);
        } else {
            $aQuery = array();
        }

        // Set new value
        $aQuery[$sName] = $sValue;

        $sNewUrl  = $aParsedUrl['scheme']."://".$aParsedUrl['host'].$aParsedUrl['path'];
        $sNewUrl .= "?".$this->arrayToQueryString($aQuery, $bSafe);

        if (isset($aParsedUrl['fragment'])) {
            $sNewUrl .= "#".$aParsedUrl['fragment'];
        }

        return $sNewUrl;
    }

    public function queryStringToArray($sQuery)
    {
$aQueryParts = explode('&', $sQuery);

        $aParams = array();
        foreach ($aQueryParts as $sParam) {
            if (strpos($sParam, '=')) {
                $aItem = explode('=', $sParam);
                $aParams[$aItem[0]] = $aItem[1];
            } else {
                $aParams[$sParam] = '';
            }
        }

        return $aParams;
    }

    public function arrayToQueryString($aQuery, $bSafe = true)
    {
        $sQueryString = http_build_query($aQuery);

        if ($bSafe == false) {
            $aCharacters = array(
                '%7C' => '|',
            );
            $sQueryString = str_replace(array_keys($aCharacters), array_values($aCharacters), $sQueryString);
        }

        return $sQueryString;
    }

    public function getContentRating($nCurrentRating, $aWebsite, $aClickedWebsite)
    {
        if (is_null($nCurrentRating)) {
            $nCurrentRating = \CI\ContentRating::G;
        }

        if (!is_null($aWebsite) && !is_null($aWebsite['content_rating'])) {
            $nCurrentRating = $aWebsite['content_rating'];
        } else if (!is_null($aClickedWebsite['content_rating'])) {
            $nCurrentRating = $aClickedWebsite['content_rating'];
        }

        return $nCurrentRating;
    }

    public function isValidIntersect($aIntersect)
    {
        $oValidatorIntersect = new \CI\Validator\LandingPage\Intersect();
        return $oValidatorIntersect->isValid($aIntersect);
    }
}