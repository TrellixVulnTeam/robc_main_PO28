<?
/*
 * Array helper functions
 *
 */
class ArrayComponent extends Object {

    /**
     * @var array
     */
    private $_arrContainer;

	/**
     * Constructor
     *
     * @param array $arrContainer The array to work with
     */
    public function setContainer($arrContainer = array()) {
    	$this->_arrContainer = $arrContainer;
    }

    /**
     * Verify if the key is set into the array otherwise return the default
     * value.
     *
     * @param string $strKey
     * @param mixed $mixDefault
     *
     * @return Ambigous <unknown, multitype:>
     */
    public function is_Set($strKey, $mixDefault = null) {
        return isset($this->_arrContainer[$strKey])
                ? $this->_arrContainer[$strKey]
                : $mixDefault;
    }

    /**
     * Verify if the key is set into the array and is nuymeric otherwise return the default
     * value.
     *
     * @param string $strKey
     * @param mixed $mixDefault
     *
     * @return Ambigous <unknown, multitype:>
     */
    public function is_Numeric($strKey, $mixDefault = null) {
        return (isset($this->_arrContainer[$strKey]) && is_numeric($this->_arrContainer[$strKey]))
                ? $this->_arrContainer[$strKey]
                : $mixDefault;
    }

    /**
     * Verify if the key is empty into the array otherwise return the default
     * value.
     *
     * @param string $strKey
     * @param mixed $mixDefault
     * @return Ambigous <unknown, multitype:>
     */
    public function is_Empty($strKey, $mixDefault = null) {
        return empty($this->_arrContainer[$strKey])
                ? $mixDefault
                : $this->_arrContainer[$strKey];
    }

    /**
     * Verify if the given key is equals to the given value.
     *
     * @param string $strKey
     * @param mixed $mixValue
     *
     * @return boolean
     */
    public function is_Equals($strKey, $mixValue = null) {
        return isset($this->_arrContainer[$strKey])
            && $this->_arrContainer[$strKey] === $mixValue;
    }

    /**
     * Verify if the given key is not equals to the given value.
     *
     * @param string $strKey
     * @param mixed $mixValue
     *
     * @return boolean
     */
    public function is_NotEquals($strKey, $mixValue = null) {
        return isset($this->_arrContainer[$strKey])
            && $this->_arrContainer[$strKey] !== $mixValue;
    }

	function merge(&$source, &$copy){
		//merge copy array into source array
		$i = 0;
		while (isset($copy[$i])){
			$source[] = $copy[$i];
			unset($copy[$i]);
			$i++;
		}
	}

	function page_remove(&$source, $page) {
		$count = count($source);

		for ($i = 0; $i < $count; $i++) {
			if ($source[$i] == $page['Page']['id']) {
				unset($source[$i]);
			}
		}
	}
}