<?php

namespace CI\Cron;

use CI\IO\StdOutput;
use CI\IO\Facade\Output;

define('APP_DIR', 'app');
define('DS', DIRECTORY_SEPARATOR);
define('ROOT', dirname(__FILE__) . '/../../../../..');
define('WEBROOT_DIR', 'webroot');
define('WWW_ROOT', ROOT . DS . APP_DIR . DS . WEBROOT_DIR . DS);
define("IMAGES_URL", 'img/');

class Migrate extends \CI\Cron
{
    protected $oConfig;
    protected $oMemcached;
    protected $oManipulator;
    protected $oImageMigrate;
    protected $oDatabase;

    const ALL_WEBSITES = -1;

    protected function getConfigObject()
    {
        if (empty($this->oConfig)) {
            $this->oConfig = new \CI\Config();
        }

        return $this->oConfig;
    }

    protected function getWatchdogObject($sKey)
    {
        $oMemcached = $this->getMemcachedObject();
        return new \CI\Memcached\Watchdog($oMemcached, $sKey);
    }

    protected function getMemcachedObject()
    {
        if (empty($this->oMemcached)) {
            $oConfig = $this->getConfigObject();
            $this->oMemcached = new \CI\Memcached($oConfig->get('memcache'));
        }

        return $this->oMemcached;
    }

    protected function getDatabaseObject()
    {
        if (empty($this->oDatabase)) {
            $oConfig = $this->getConfigObject();
            $this->oDatabase = new \CI\Database($oConfig->get('database_environment')['app']);
        }

        return $this->oDatabase;
    }

    protected function getManipulatorObject()
    {
        if (empty($this->oManipulator)) {
            $this->oManipulator = new \CI\Image\Manipulator();
        }

        return $this->oManipulator;
    }

    public function imagesCommand($nWebsiteId = self::ALL_WEBSITES)
    {
        $oWatchdog = $this->getWatchdogObject(__METHOD__.'('.$nWebsiteId.')');

        if ($oWatchdog->isAlive()) {
            Output::warning(
                'The script is already running, if not, use migrate/kill/images and start again.',
                'WARNING', StdOutput::OPTION_DATE | StdOutput::OPTION_EOL
            );
            exit;
        }

        $oWatchdog->heartbeat();

        if ($nWebsiteId == self::ALL_WEBSITES) {
            $aWebsites = $this->getAllWebsistes();
        } else {
            $aWebsites = array(array('id' => $nWebsiteId));
        }

        $oDB = $this->getDatabaseObject();
        $oManipulator = $this->getManipulatorObject();
        $oMigrateImage = $this->getMigrateImageObject();
        $sImagesPath = $oManipulator->getImagesPath();

        foreach ($aWebsites as $aWebsite) {
            $aPages = $this->getPages($aWebsite['id']);

            foreach ($aPages as $aPage) {
                $oWatchdog->heartbeat();
                $sPathOriginal = $sImagesPath . $aPage['image'];
                $mSuccess = $oMigrateImage->migrate($sPathOriginal, $aPage['id']);

                if (false !== $mSuccess) {
                    Output::info(
                        'Moved the old image  ' . $sPathOriginal  . ' to ' .
                        $oManipulator->getNewPath($sPathOriginal),
                        'INFO',
                        StdOutput::OPTION_MEMORY | StdOutput::OPTION_DATE | StdOutput::OPTION_EOL
                    );
                } else {
                    Output::info(
                        'The image can\'t be migrate, with the next data  sPathOriginal' .
                        $sPathOriginal  . ' to ' . $oManipulator->getNewPath($sPathOriginal),
                        'INFO',
                        StdOutput::OPTION_MEMORY | StdOutput::OPTION_DATE | StdOutput::OPTION_EOL
                    );
                }
            }
        }

        $oWatchdog->kill();
    }

    protected function getAllWebsistes()
    {
        $sQuery = 'SELECT id FROM websites';
        $oDB = $this->getDatabaseObject();
        $aWebsites = $oDB->query($sQuery);
        return $aWebsites;
    }

    protected function getPages($nWebSiteId)
    {
        $sQuery= "SELECT id, image FROM pages WHERE website_id = $nWebSiteId AND image IS NOT NULL";
        $oDB = $this->getDatabaseObject();
        $aPages = $oDB->query($sQuery);
        return $aPages;
    }

    protected function getMigrateImageObject()
    {
        if (empty($this->oImageMigrate)) {
            $this->oImageMigrate = new \CI\Migrate\Image();
        }

        return $this->oImageMigrate;
    }

    public function killCommand($sType, $nWebsiteId = 0)
    {
        $nOptions = StdOutput::OPTION_MEMORY | StdOutput::OPTION_DATE | StdOutput::OPTION_EOL;
        $sKey = "CI\Cron\Migrate::{$sType}Command({$nWebsiteId})";
        $oWatchdog = $this->getWatchdogObject($sKey);

        if ($oWatchdog->kill()) {
            Output::success('', 'Kill Done', $nOptions);
        } else {
            Output::info('Nothing to kill', 'INFO', $nOptions);
        }
    }
}