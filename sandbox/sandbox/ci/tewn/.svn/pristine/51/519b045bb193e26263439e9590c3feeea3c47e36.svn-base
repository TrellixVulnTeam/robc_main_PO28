<?php
/**
 * Testing the lecture the consolidate of the widget clicks and impressions
 * PHP Version 5.3
 *
 * @category Test
 * @package  Test\VowpalWabbit\Parser\Widget
 * @author   Julio Rodriguez <julio.rodriguez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 */

namespace Test\VowpalWabbit\Parser\Widget;
use CI\VowpalWabbit\Parser\Widget\Consolidate;

/**
 * Testing the lecture the consolidate of the widget clicks and impressions
 * PHP Version 5.3
 *
 * @category Test
 * @package  Test\VowpalWabbit\Parser\Widget
 * @author   Julio Rodriguez <julio.rodriguez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 * @group    VowpalWabbit
 */

class ConsolidateTest extends \PHPUnit_Framework_TestCase
{
    protected $oConsolidate;
    /**
     * Initializing the test
     *
     * @return void.
     */
    public function setUp()
    {
        $this->oConsolidate = new ConsolidateMock('20140924_09:30');
    }

    /**
     * Testing the lecture of one line of the  Consolidate log
     *
     * @return void
     */
    public function testRowsOfoneItemFromLog()
    {
        $bExpected = true;
        $nLimit = 1;
        $oResult = $this->oConsolidate->process($nLimit);

        $this->assertEquals($bExpected, $oResult, 'we are no getting the expected object ');
    }

    /**
     * Testing the lecture of one line of the  Consolidate log
     *
     * @return void
     */
    public function testLoadAllTheFile()
    {
        $bExpected = true;
        $nLimit = 10000;
        $oResult = $this->oConsolidate->process($nLimit);

        $this->assertEquals($bExpected, $oResult, 'we are no getting the expected object ');
    }

    /**
     * Testing the Sanitation of our strings
     *
     * @return void
     */
    public function testSanitaze()
    {
        $sExpected = '0';
        $sBad = '0    ';
        $sReturn = $this->oConsolidate->sanitaze($sBad);

        $this->assertEquals($sExpected, $sReturn, 'did not sanitaze correctly');
    }

    /**
     * Testing the exception
     *
     * @expectedException CI\File\Exception
     *
     * @return void.
     */
    public function testFileException()
    {
        $this->oConsolidate = new ConsolidateMock('20000816_12:00');
        $this->oConsolidate->process();
    }

    public function invokeMethod(&$oBject, $aMethodName, array $aParameters = array())
    {
        $oReflection = new \ReflectionClass(get_class($oBject));
        $oMethod = $oReflection->getMethod($aMethodName);
        $oMethod->setAccessible(true);

        return $oMethod->invokeArgs($oBject, $aParameters);
    }
}

class PageMockModel extends \CI\Model\Cake\Page
{

    public function __construct(){}

    public function find($type, $params)
    {
        return false;
    }

     public function field($type, $params)
    {
        return false;
    }

    public function query_read($query, $cache_query)
    {
        return array(
            array(
                array(
                    'title_url' => 'Title from Mock',
                    'category' => 1,
                    'demographic_age'  => 10,
                    'demographic_sex' => 2,
                    'to_content_rating' => 3
                ),
            ),
        );
    }
}

/**
 * Mockup of the class Consolidate to rewrite some variables.
 */
class ConsolidateMock extends Consolidate
{
    /**
     * Rewrite the __construct to rewrite tha path to read the logs
     *
     * @param $sDate date to be proccess
     *
     * @return void.
     */
    public function __construct($sDate)
    {
        $this->sMountLogs = LIBRARY_DIR . '../tests/resources/mnt/crowdignite/';
        $this->sPath = LIBRARY_DIR . '../tests/resources/mnt/crowdignite/';
        parent::__construct($sDate);
    }

    /**
     * Getting the clicks object
     *
     * @return Clicks object
     */
    protected function getClickObject()
    {
        return new ClicksMock($this->sDate);
    }

    public function moveDoneFiles($bVar = false)
    {
        //rewrite this function, to dont move any File
    }

    protected function sentToFile($oLine, $bSendAllTheBuffer = false)
    {
    }

    protected function getClicks()
    {
        return array();
    }
}