<?php

namespace CI\Date;

class Format
{
    const TIME_FORMAT = 'Y-m-d H:i:s';
    const DATE_FORMAT = 'Y-m-d';

    public function format($sDate, $sCustomFormat)
    {
        if (!$this->isTimeStamp($sDate)) {
            $sDate = strtotime($sDate);
        }

        return date($sCustomFormat, $sDate);
    }

    public function isTimeStamp($sDate)
    {
        //This code will be submitted with the Objection of all of us
        //We did a double casting to remove the dots for posibles float values, and cast to string to can do the
        //check of the value and type ===
        $sDate = (string) $sDate;
        return (((string) (int) $sDate === $sDate) && ($sDate <= PHP_INT_MAX) && ($sDate >= ~PHP_INT_MAX));
    }

    public function dateStart($sDate)
    {
        return date(self::TIME_FORMAT, strtotime("midnight", strtotime($sDate)));
    }

    public function dateEnd($sDate)
    {
        return date(self::TIME_FORMAT, strtotime("23:59:59", strtotime($sDate)));
    }

    public function hourStart($sDatetime)
    {
        $date = $this->formatDate($sDatetime);
        $hour = date("G", strtotime($sDatetime));
        return $date." ".$hour.":00:00";
    }

    public function hourEnd($sDatetime)
    {
        $date = $this->formatDate($sDatetime);
        $hour = date("G", strtotime($sDatetime));
        return $date." ".$hour.":59:59";
    }

    public function date($sDate, $nBaseTimestamp = 0)
    {
        $nTimestamp = strtotime($sDate);
        if ($nBaseTimestamp > 0) {
            $nTimestamp = strtotime($sDate, $nBaseTimestamp);
        }
        return date(self::DATE_FORMAT, $nTimestamp);
    }

    public function datetime($sDatetime, $nBaseTimestamp = 0)
    {
        $nTimestamp = strtotime($sDatetime);
        if ($nBaseTimestamp > 0) {
            $nTimestamp = strtotime($sDatetime, $nBaseTimestamp);
        }
        return date(self::TIME_FORMAT, $nTimestamp);
    }

    public function timestampToDate($nTimestamp)
    {
        return date(self::DATE_FORMAT, $nTimestamp);
    }

    public function timestampToDatetime($nTimestamp)
    {
        return date(self::TIME_FORMAT, $nTimestamp);
    }

    public function prettyDate($nTimestamp)
    {
        // to get the time since that moment
        $nTimestamp = time() - $nTimestamp;

        $aTokens = array (
            31536000 => 'year',
            2592000  => 'month',
            604800   => 'week',
            86400    => 'day',
            3600     => 'hour',
            60       => 'minute',
            1        => 'second'
        );

        foreach ($aTokens as $nUnit => $sText) {
            if ($nTimestamp < $nUnit) {
                continue;
            }
            $nNumberOfUnits = floor($nTimestamp / $nUnit);
            return $nNumberOfUnits.' '.$sText.(($nNumberOfUnits > 1) ? 's' : '');
        }
    }
}