<?php
namespace Test\VowpalWabbit;
use CI\VowpalWabbit\Reader;

/**
 * @group Vowpalwabbit
 */
class ReaderTest extends \PHPUnit_Framework_TestCase
{

    protected $oDB = null;

    public function setUp()
    {
        $this->oDB = new Reader(array());
    }

    /**
     * @expectedException CI\VowpalWabbit\Exception
     * @expectedExceptionCode CI\VowpalWabbit\Exception::ERROR_CONNECT
     */
    public function testConnectException()
    {
        $oReflectionReader = new \ReflectionClass('CI\VowpalWabbit\Reader');
        $oMethod = $oReflectionReader->getMethod('connect');
        $oMethod->invoke($this->oDB);

    }

    public function testConnectCorrectly()
    {
        $oReflectionReader = new \ReflectionClass('CI\VowpalWabbit\Reader');
        $oVariable = $oReflectionReader->getProperty('_rSocket');
        $oVariable->setAccessible(true);
        $oVariable->setValue($this->oDB, tmpfile());
        $oMethod = $oReflectionReader->getMethod('connect');
        $oMethod->invoke($this->oDB);
    }

    public function testQuery()
    {
        $aExpected = array(0 => 0.0);

        $oReflectionReader = new \ReflectionClass('CI\VowpalWabbit\Reader');
        $oVariable = $oReflectionReader->getProperty('_rSocket');
        $oVariable->setAccessible(true);
        $oVariable->setValue($this->oDB, tmpfile());
        $oMethod = $oReflectionReader->getMethod('query');
        $aResult = $oMethod->invokeArgs($this->oDB, array("1\r\n"));

        $this->assertEquals($aExpected, $aResult);
    }
}