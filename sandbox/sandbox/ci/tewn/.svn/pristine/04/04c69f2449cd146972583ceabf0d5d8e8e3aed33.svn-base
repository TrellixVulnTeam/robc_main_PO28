<?php
include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

class WidgetsController extends AppController {

	var $name = 'Widgets';
	var $uses = array('Widget', 'Page', 'Website', 'WidgetStyle', 'MetricLog', 'User');
	var $components = array('CakeMemcache', 'RequestHandler', 'Date');
	var $helpers = array('Html', 'Form', 'Ajax', 'Convert');

	function beforeFilter() {
		$this->layout = DOMAIN.'/default';

        $this->Session->activate();
        $user = $this->Session->read('User');
        $user = $this->User->findById($user['id']);
        if (!$user || !$this->User->isPublisher($user['User']['id'], $user['User']['admin'])) {
            $this->saveUrl($_SERVER['REQUEST_URI'], $this->Session);
            $this->redirect("/login");
        }
        $this->set_types_user($user['User']);
        $this->MetricLog->log(LOG_TYPE_PAGE_VIEW);
        $this->set('user', $user);
        $this->set('full_admin',$user['User']['domain_bitfield'] == -1);

	}

	function update_page_load($website_id) {
		/* Get domain */
		if (empty($_SERVER['HTTP_REFERER'])) {
				return;
		}
		$refer = trim($_SERVER['HTTP_REFERER']);

		/* Get host page regex */
		$regex_url = $this->Website->get_url_regex($website_id);

		/* Get base URL */
		preg_match($regex_url, $refer, $matches);
		if (!isset($matches[1])) {
			// XXX should log this
			//$this->log($regex_url." ".$refer, "page_regex_miss");
			return;
		}
		$url = $matches[1];

		/* Update count */
		$rc = $this->Page->update_view_count($url);

		/* Insert if it doesn't exist */
		if (!$rc) {
			$this->log($regex_url." ".$refer, "add_page");
			$this->Page->add_page($url, $website_id);
		}
	}

	function delete($widget_id = 0) {
		$this->Session->activate();
		$user = $this->Session->read('User');
		plat_assert($user);

		if (!$widget_id) {
			$widget_id = $_POST['deleteID'];
		}

		plat_assert($widget_id);

		$website_id = $this->Widget->field("website_id", array("id" => $widget_id));
		$user_id = $this->Website->field("user_id", array("id" => $website_id));

		$this->MetricLog->log(LOG_TYPE_WIDGET_DELETE, $website_id, $widget_id);

		if ($user_id == $user['id'] || $this->is_admin()) {
			$this->Widget->id = $widget_id;
			$this->Widget->saveField("status", WIDGET_STATUS_DELETED);
		}
	}

	function create($widget_id = 0, $website_id = 0) { //create with ajax call
		set_time_limit(60*60);

		// Add convert in this function so we can keep the
		// main widget path fast
		$this->helpers[] = 'Convert';

		if (@$_REQUEST['action'] == 'addWidget') {

			// get ajax post data
			if (trim($_POST['widgetid']) != "0") {
					$this->data['Widget']['id'] = htmlspecialchars(trim($_POST['widgetid']));
				}
				if (trim($_POST['widgetstyleid']) != "0") {
					$this->data['WidgetStyle']['id'] = htmlspecialchars(trim($_POST['widgetstyleid']));
				}

				$this->data['WidgetStyle']['text_color'] = str_replace("#", "", htmlspecialchars(trim($_POST['text_color'])));
				$this->data['WidgetStyle']['background_color'] = str_replace("#", "", htmlspecialchars(trim($_POST['background_color'])));
				$this->data['WidgetStyle']['border'] = str_replace("#", "", htmlspecialchars(trim($_POST['border'])));
				$this->data['WidgetStyle']['font_size'] = htmlspecialchars(trim($_POST['font_size']));
				$this->data['Widget']['name'] = htmlspecialchars(trim($_POST['widgetname']));
				$this->data['Widget']['website_id'] = htmlspecialchars(trim($_POST['website_id']));
				$this->data['Widget']['width'] = htmlspecialchars(trim($_POST['width']));
				$this->data['Widget']['height'] = htmlspecialchars(trim($_POST['height']));
				$this->data['Widget']['image_width'] = htmlspecialchars(trim($_POST['image_width']));
				$this->data['Widget']['image_height'] = htmlspecialchars(trim($_POST['image_height']));
				$this->data['Widget']['rows'] = htmlspecialchars(trim($_POST['rows']));
				$this->data['Widget']['columns'] = htmlspecialchars(trim($_POST['cols']));
				$this->data['Widget']['num_links'] = $this->data['Widget']['rows'] * $this->data['Widget']['columns'];
				$this->data['Widget']['powered'] = htmlspecialchars(trim($_POST['powered']));
                $this->data['Widget']['widget_variety'] = htmlspecialchars(trim($_POST['widget_variety']));
				$this->data['Widget']['status'] = WIDGET_STATUS_ACTIVE;

				$this->data['WidgetStyle']['font'] = htmlspecialchars(trim($_POST['font']));
				$this->data['WidgetStyle']['font_style'] = htmlspecialchars(trim($_POST['font_style']));
				$this->data['WidgetStyle']['customcss'] = trim($_POST['customcss']);
				$this->data['WidgetStyle']['image_border'] = str_replace("#", "", htmlspecialchars(trim($_POST['image_border'])));
				$this->data['WidgetStyle']['image_padding'] = htmlspecialchars(trim($_POST['image_padding']));


				Configure::write('debug', 1);
				$this->RequestHandler->renderAs($this, 'ajax');
				$this->Session->activate();
				$user = $this->Session->read('User');
				plat_assert($user);

				// Widget Style
				if (empty($this->data['WidgetStyle']['id'])) {
					$this->data['WidgetStyle']['user_id'] = $user['id'];
					$this->data['WidgetStyle']['visible'] = true;
				}

				$this->WidgetStyle->save($this->data);
				$style_id = $this->WidgetStyle->getLastInsertId();

				// Widget
				if (empty($this->data['Widget']['id'])) {
					$website = $this->Website->findById($this->data['Widget']['website_id']);
					$this->data['Widget']['widget_style_id'] = $style_id;
					$this->data['Widget']['status'] = WIDGET_STATUS_ACTIVE;
					$this->data['Widget']['visible'] = true;
					$this->data['Widget']['domain_bitfield'] = 1 << $website['Website']['domain_primary'];
				}

				$rc = $this->Widget->save($this->data);
				if (!$rc) { // return error message
					$ajax_response = array(
						'error' => true,
						'msg' => 'Widget save error');
					echo json_encode($ajax_response);
					exit;
				}

				if (isset($this->data['Widget']['id'])) {
					$widget_id = $this->data['Widget']['id'];
					$this->MetricLog->log(LOG_TYPE_WIDGET_UPDATE, $this->data['Widget']['website_id'], $widget_id);
				} else {
					$widget_id = $this->Widget->getLastInsertId();
					$this->MetricLog->log(LOG_TYPE_WIDGET_CREATE, $this->data['Widget']['website_id'], $widget_id);
				}
				$this->Widget->cacheQueries = false;

				// Load up widget instances
				ob_start(); // redirect output of function not to affect ajax response
				$this->requestAction("/widget_engine/rebalance/".$this->data['Widget']['website_id']);

				plat_assert($widget_id);
				ob_end_clean();
				// $this->redirect("/dashboard/widgets/".$widget_id);

				// return succesful message
				$ajax_response = array(
					'error' => false,
					'msg' => $widget_id);
				echo json_encode($ajax_response);
				exit();

			} elseif ($widget_id) {
				$widget = $this->Widget->findById($widget_id);
				$widget_style = $this->WidgetStyle->findById($widget['Widget']['widget_style_id']);

				$this->MetricLog->log(LOG_TYPE_WIDGET_EDIT, $widget['Widget']['website_id'], $widget_id);

				$this->data = $widget;
				$this->data['WidgetStyle'] = $widget_style['WidgetStyle'];
			}

			$this->Session->activate();

			if(!empty($website_id)) {
				$websites = $this->Website->find('all', array(
					'conditions' => array('Website.id' => $website_id)
				));
			} else {
				/* Get all the websites that this user has */
				$user = $this->Session->read('User');

				if ($user) {
					$websites = $this->Website->findAllByUserId($user['id']);
				} else {
					$websites = array();
				}
			}

			$this->set("websites", $websites);
			$this->layout = DOMAIN.'/fullscreen';

	}

	function process_status() {
		$this->autoRender = false;

		$last_used_cutoff = $this->Date->get_yesterday();

		$active_widgets = $this->Widget->find("all", array("conditions" => array("visible" => 1,
																				 "status <>" => WIDGET_STATUS_DELETED,
																				 "last_used > " => $last_used_cutoff)));

		$inactive_widgets = $this->Widget->find("all", array("conditions" => array("visible" => 1,
																				   "status" => WIDGET_STATUS_ACTIVE,
																				   "(last_used is NULL OR last_used <= '".$last_used_cutoff."')")));

		// Mark all inactive widget's status as inactive
		foreach ($inactive_widgets as $widget) {
			if ($widget['Widget']['status'] == WIDGET_STATUS_ACTIVE) {
				echo "Inactives: ".$widget['Widget']['website_id']." - ".$widget['Widget']['id']."<br>\n";
				$this->Widget->id = $widget['Widget']['id'];
				$this->Widget->saveField("status", WIDGET_STATUS_INACTIVE);
				$this->MetricLog->log(LOG_TYPE_WIDGET_INACTIVE, $widget['Widget']['website_id'], $widget['Widget']['id']);
			}
		}

		// Check the active widgets
		foreach ($active_widgets as $widget) {
			if ($widget['Widget']['status'] != WIDGET_STATUS_ACTIVE) {
				echo "Actives: ".$widget['Widget']['website_id']." - ".$widget['Widget']['id']."<br>\n";
				$this->Widget->id = $widget['Widget']['id'];
				$this->Widget->saveField("status", WIDGET_STATUS_ACTIVE);
				$this->MetricLog->log(LOG_TYPE_WIDGET_ACTIVE, $widget['Widget']['website_id'], $widget['Widget']['id']);
			}
		}

	}

	function pop($widget_id) {
		$this->layout = "none";
		$this->set("widget_id", $widget_id);
	}

    public function index()
    {
        $this->view   = 'Theme';
        $this->theme  = 'bootstrap';
        $this->layout = 'bootstrap';

        $this->set('tab', 'analysis');
    }

}

/* JSON wrappers until move to PHP 5.2 */
require_once 'JSON/JSON.php';
if (!function_exists('json_decode')) {
	function json_decode($content, $assoc=false) {
		if ($assoc) {
			$json = new Services_JSON(SERVICES_JSON_LOOSE_TYPE);
		}
		else {
			$json = new Services_JSON;
		}
		return $json->decode($content);
	}
}


global $services_json;
if (!function_exists('json_encode')) {
	function json_encode($content) {
		$json = new Services_JSON;
		return $json->encode($content);
	}
}

?>
