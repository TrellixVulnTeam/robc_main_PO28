<?php
/**
 * Filter one string with the mysql stop word.,
 * you can see more on: http://dev.mysql.com/doc/refman/5.5/en/fulltext-stopwords.html
 *
 * PHP Version 5.3
 *
 * @category CI
 * @package  CI\Test\Filter
 * @author   Julio Rodriguez <julio.rodriguez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 * @group    Filters
 * @group    VowpalWabbit
 */
namespace CI\Test\Filter;
use CI\Filter\RemoveMysqlStopWord;
/**
 * Testing the functionality of remove mysql stop words
 *
 * PHP Version 5.3
 *
 * @category CI
 * @package  CI\Test\Filter
 * @author   Julio Rodriguez <julio.rodriguez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 */

class RemoveMysqlStopWordTest extends \PHPUnit_Framework_TestCase
{
    protected $oRemoveMysqlStopWord;
    /**
     * Initialized the necessary for all the test
     *
     * @return void.
     */
    public function setUp()
    {
        $this->oRemoveMysqlStopWord = new RemoveMysqlStopWord();
    }
    /**
     * Testing the removal of stop words.
     *
     * @return void.
     */
    public function testRemoveStopWords()
    {
        $sExpected = 'funniest quotes kids modern family';
        $sResult = $this->oRemoveMysqlStopWord->filter('The Funniest Quotes From The Kids On Modern Family');
        $this->assertEquals($sExpected, $sResult);
    }

    /**
     * Testing the dont removal of any words
     *
     * @return void.
     */
    public function testDontRemoveStopWords()
    {
        $sExpected = 'word mexico funniest learn program';
        $sResult = $this->oRemoveMysqlStopWord->filter('Word Mexico Funniest Learn Program:');
        $this->assertEquals($sExpected, $sResult);
    }

    /**
     * Testing empty string
     *
     * @return void.
     */
    public function testEmptyString()
    {
        $sExpected = '';
        $sResult = $this->oRemoveMysqlStopWord->filter('');
        $this->assertEquals($sExpected, $sResult);
    }

    /**
     * Testing worst case - the entire stopword set.
     *
     * @return void.
     */
    public function testAllTheStopWords()
    {
        $sExpected = '';
        $sResult = $this->oRemoveMysqlStopWord->filter(implode(' ',$this->oRemoveMysqlStopWord->getStopWords()));
        $this->assertEquals($sExpected, $sResult);
    }

    /**
     * Testing non-ASCII punctuation.
     *
     * @return void.
     */
    public function testFunkyPunctuation()
    {
        $sExpected = 'crowd ignite\'s test';
        $sResult = $this->oRemoveMysqlStopWord->filter('Won’t Crowd Ignite’s test “try” this, too?');
        $this->assertEquals($sExpected, $sResult);
    }

    /**
     * test for word boundaries other than space (0x20)
     *
     * @return void
     */
    public function testRemoveStopWordsCase()
    {
        $sExpected = 'remove stopwords';
        $sResult = $this->oRemoveMysqlStopWord->filter('Remove :all ALL All aLl alL aLL stopwords');
        $this->assertEquals($sExpected, $sResult);
    }

    /**
     * test for word boundaries other than space (0x20)
     *
     * @return void
     */
    public function testRemoveStopWordsSpecialChars()
    {
        $sExpected = 'remove io stopwords';
        $sResult = $this->oRemoveMysqlStopWord->filter('to: remove all, :the;ain\'t _certain?  íó _"six" or_ \'seven\' \'you stopwords here!');
        $this->assertEquals($sExpected, $sResult);
    }
}