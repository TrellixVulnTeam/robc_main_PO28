<?
/*
 * History functions
 *
 */
class HistoryComponent extends Object {
	var $uses = false;
	var $components = array('Date', 'History');
	var $debug = 0;

	function startup(&$in_controller) {
		App::import('Model','Page');
		$this->Page = new Page();

		$this->controller = $in_controller;
	}

	/***********************************************************************
	 * Common History Analytic Functions
	 ***********************************************************************/
	function analytics_time_website($website_id, $object = null, $date_start, $date_end, $stats_day_op) {
		$num_days = $this->Date->get_num_days($date_start, $date_end);

		$total = $this->initialize_aggregate();

		if ($this->debug) {
			echo "analytics_time_website: website_id: ".$website_id." num_days: ".$num_days."<br>";
		}

		for ($i = 0; $i < $num_days; $i++) {
			$date = $this->Date->date_add($date_start, $i);
			$stats = $this->analytics_day_website($website_id, $object, $date, $stats_day_op);
			$total = $this->add_full_stats($total, $stats);
		}

		return $total;
	}

	/*
	 * History Analytics data for a day for a website
	 */
	function analytics_day_website($website_id, $object, $date = null, $stats_day_op) {
		$total = $this->initialize_aggregate();

		// Cake bug
		if (!isset($this->Page)) {
			$this->Page = ClassRegistry::init('Page');
		}
		$pages = $this->Page->find("all",
			array(
				"conditions" => array(
					"website_id" => $website_id,
					"status" => PAGE_STATUS_APPROVED,
					"visible" => 1
				),
				'fields' => array(
					'Page.id', 'Page.category', 'Page.demographic_sex', 'Page.content_rating'
				)
			)
		);

		if ($this->debug) {
			echo "analytics_day_website: website_id: ".$website_id." date: ".$date."<br>";
		}

		foreach ($pages as $page) {
			$stats = call_user_func($stats_day_op, $page['Page']['id'], $object, $date);
			$total = $this->add_stats($total, $stats, $page);
		}

		return $total;
	}

	/*
	 * History Analytic Data over a time range
	 */
	function analytics_time($page_id = null, $object = null, $date_start, $date_end, $stats_day_op, $type = LINK_TYPE_BASIC, $key = KEY_ALL) {
		$num_days = $this->Date->get_num_days($date_start, $date_end);
		$total = array();
		$total['num_ctr'] = 0;
		$total['num_display'] = 0;
		$total['num_ctr_traffic'] = 0;

		for ($i = 0; $i < $num_days; $i++) {
			$date = $this->Date->date_add($date_start, $i);

			$stats = call_user_func($stats_day_op, $page_id, $object, $date, $type, $key);

			$total['num_ctr'] += $stats['num_ctr'];
			$total['num_display'] += $stats['num_display'];
			$total['num_ctr_traffic'] += isset($stats['num_ctr_traffic']) ? $stats['num_ctr_traffic'] : 0;
		}

		return $total;
	}

	/*
	 * Historic Analytic data for a day
	 */
	function analytics_day($page_id = null, $object = null, $date = null, $numbers_day_op) {
		if (!$date) {
			$date = $this->Date->get_yesterday();
		}

		$base_date = $this->Date->get_day_before($date);

		/* Get LandingPageA for the day in question */
		$lpa = call_user_func($numbers_day_op, $page_id, $object, $date);

		/* Get day before's LPA so we can get the delta */
		$base = call_user_func($numbers_day_op, $page_id, $object, $base_date);

		if (($base['num_ctr'] > $lpa['num_ctr']) || ($base['num_display'] > $lpa['num_display'])) {
			if ($this->debug) {
				echo "Page ID: ".$page_id."<br>";
				print_r($object);
				echo "Date: ".$date." base date: ".$base_date."<br>";

				echo "LPA: ";
				print_r($lpa);
				echo "Base: ";
				print_r($base);
				plat_assert(0);
			}

			// This is possible on the event of a page being removed
			$lpa['num_ctr'] = 0;
			$lpa['num_display'] = 0;
			return $lpa;
		}

                $lpa['num_ctr'] = $lpa['num_ctr'] - $base['num_ctr'];
                $lpa['num_display'] = $lpa['num_display'] - $base['num_display'];

		return $lpa;
	}

	/*
	 * Clears the history cache
	 *
	 * The date's default is the first day we had stats
	 */
	function clear_cache($date = "2010-07-17 00:00:00", $objects, $clear_op) {
		set_time_limit(30*60);

		$start_time = strtotime($date);
		$end_time = strtotime("midnight today");

		$num_days = $this->Date->get_num_days_time($start_time, $end_time);

		foreach ($objects as $object) {
			for ($i = 0; $i < $num_days; $i++) {
				$day = $this->Date->date_add($date, $i);

				call_user_func($clear_op, $object, $day);
			}
		}
	}

	/*
	 * Helper functions
	 */
	function initialize_aggregate() {
		$total = array();
		$total['num_ctr'] = 0;
		$total['num_display'] = 0;
		$total['num_ctr_traffic'] = 0;
		$total['category'] = array();
		$total['demographic_sex'] = array();
		$total['content_rating'] = array();
		for ($i = 0; $i < CATEGORY_NUMBER; $i++) {
			$total['category'][$i]['num_ctr'] = 0;
			$total['category'][$i]['num_display'] = 0;
			$total['category'][$i]['num_ctr_traffic'] = 0;
		}
		for ($i = 0; $i < DEMOGRAPHIC_SEX_NUMBER; $i++) {
			$total['demographic_sex'][$i]['num_ctr'] = 0;
			$total['demographic_sex'][$i]['num_display'] = 0;
			$total['demographic_sex'][$i]['num_ctr_traffic'] = 0;
		}
		for ($i = 0; $i < WEBSITE_CONTENT_NUMBER; $i++) {
			$total['content_rating'][$i]['num_ctr'] = 0;
			$total['content_rating'][$i]['num_display'] = 0;
			$total['content_rating'][$i]['num_ctr_traffic'] = 0;
		}

		return $total;
	}

	function add_stats($total, $stats, $page) {
		// initialize num_ctr_traffic (empty for landing_page_analytics)
		$stats['num_ctr_traffic'] = isset($stats['num_ctr_traffic']) ? $stats['num_ctr_traffic'] : 0;

		// Total
		$total['num_ctr'] += $stats['num_ctr'];
		$total['num_display'] += $stats['num_display'];
		$total['num_ctr_traffic'] += $stats['num_ctr_traffic'];

		// Category
		$category = $page['Page']['category'];
		$total['category'][$category]['num_ctr'] += $stats['num_ctr'];
		$total['category'][$category]['num_display'] += $stats['num_display'];
		$total['category'][$category]['num_ctr_traffic'] += $stats['num_ctr_traffic'];

		// Demographic Sex
		$demographic_sex = $page['Page']['demographic_sex'];
		$total['demographic_sex'][$demographic_sex]['num_ctr'] += $stats['num_ctr'];
		$total['demographic_sex'][$demographic_sex]['num_display'] += $stats['num_display'];
		$total['demographic_sex'][$demographic_sex]['num_ctr_traffic'] += $stats['num_ctr_traffic'];

		// Content Rating
		$content_rating = $page['Page']['content_rating'];
		$total['content_rating'][$content_rating]['num_ctr'] += $stats['num_ctr'];
		$total['content_rating'][$content_rating]['num_display'] += $stats['num_display'];
		$total['content_rating'][$content_rating]['num_ctr_traffic'] += $stats['num_ctr_traffic'];

		return $total;
	}

	function add_full_stats($total, $stats) {
		// initialize num_ctr_traffic (empty for landing_page_analytics)
		$stats['num_ctr_traffic'] = isset($stats['num_ctr_traffic']) ? $stats['num_ctr_traffic'] : 0;

		// Total
		$total['num_ctr'] += $stats['num_ctr'];
		$total['num_display'] += $stats['num_display'];
		$total['num_ctr_traffic'] += $stats['num_ctr_traffic'];

		// Category
		for ($i = 0; $i < CATEGORY_NUMBER; $i++) {
			$total['category'][$i]['num_ctr'] += $stats['category'][$i]['num_ctr'];
			$total['category'][$i]['num_display'] += $stats['category'][$i]['num_display'];
			$total['category'][$i]['num_ctr_traffic'] += $stats['category'][$i]['num_ctr_traffic'];
		}

		// Demographic Sex
		for ($i = 0; $i < DEMOGRAPHIC_SEX_NUMBER; $i++) {
			$total['demographic_sex'][$i]['num_ctr'] += $stats['demographic_sex'][$i]['num_ctr'];
			$total['demographic_sex'][$i]['num_display'] += $stats['demographic_sex'][$i]['num_display'];
			$total['demographic_sex'][$i]['num_ctr_traffic'] += $stats['demographic_sex'][$i]['num_ctr_traffic'];
		}

		// Content Rating
		for ($i = 0; $i < WEBSITE_CONTENT_NUMBER; $i++) {
			$total['content_rating'][$i]['num_ctr'] += $stats['content_rating'][$i]['num_ctr'];
			$total['content_rating'][$i]['num_display'] += $stats['content_rating'][$i]['num_display'];
			$total['content_rating'][$i]['num_ctr_traffic'] += $stats['content_rating'][$i]['num_ctr_traffic'];
		}

		return $total;
	}

}
?>