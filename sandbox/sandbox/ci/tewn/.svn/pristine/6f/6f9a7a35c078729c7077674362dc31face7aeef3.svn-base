<?php

namespace CI\Cron;
use CI\IO\StdOutput;
use CI\IO\Facade\Output;
use CI\Config\Facade\Config;
use CI\Database\Facade\Database;

class Ctp extends \CI\Cron
{
    const ALL_WEBSITES = 0;

    private $_oFilterTitle = null;

    public function widgetsCommand($nWebsiteId = self::ALL_WEBSITES, $nChunk = 10000)
    {
        $oWatchdog = $this->_getWatchdog(__METHOD__.'('.$nWebsiteId.')');

        if ($oWatchdog->isAlive()) {
            Output::warning(
                'The script is already running, if not, use Ctp/kill/widgets and start again.',
                'WARNING', StdOutput::OPTION_DATE | StdOutput::OPTION_EOL
            );
            exit;
        }
        $oWatchdog->heartbeat();

        $this->_oFilterTitle = new \CI\Filter\RemoveMysqlStopWord();

        $aWebsites    = $this->_getWebsites($nWebsiteId);
        $nIndex       = 0;
        $oWvReader    = $this->_getVWReader();
        $bAllWebsites = empty($nWebsiteId);
        $sInsertQuery = "INSERT LOW_PRIORITY INTO widgets_ctp " .
            "(widget_analytic_id, website_id, ctp, partition_name) VALUES ";
        $aDate = array_combine(
            array('insert', 'hour', 'day', 'month', 'date'),
            explode('|', date('YmdH|G|D|n|j'))
        );

        Output::put('Processing '.count($aWebsites).' Websites...');
        foreach ($aWebsites as $aWebsite) {
            $nIndex++;
            $nStartTime = microtime(true);
            $nWebsiteId = $aWebsite['id'];
            $aAnalytics = $this->_getWidgetAnalytics($nWebsiteId);
            $nAnalytics = count($aAnalytics);

            if ($nAnalytics == 0) {
                continue;
            }

            $aMultiSet  = array();
            $aTemplates = array();

            Output::info(
                "Website {$nWebsiteId}.. Packing ", $nIndex,
                StdOutput::OPTION_MEMORY | StdOutput::OPTION_DATE
            );
            Output::put(
                $nAnalytics.' Analytics and '.count($aWebsite['widgets']).' Widgets ('.
                ($nAnalytics * count($aWebsite['widgets'])).' CTP)... ', '',
                StdOutput::NO_OPTION
            );
            foreach ($aAnalytics as $aAnalytic) {
                foreach ($aWebsite['widgets'] as $aWidget) {
                    $aWidget = explode(',', $aWidget);
                    $aWidget = array(
                        'id'        => $aWidget[0],
                        'num_links' => $aWidget[1],
                        'height'    => $aWidget[2],
                        'width'     => $aWidget[3],
                    );
                    $aTemplates[] = array(
                        'widget_analytic_id' => $aAnalytic['id'],
                        'website_id'         => $nWebsiteId,
                        'widget_id'          => $aWidget['id'],
                    );
                    $aMultiSet[] = $this->_getSet($aWebsite, $aWidget, $aAnalytic, $aDate);
                }
            }

            // multi access vopal wabbit
            Output::put('Requesting from VW... ', '', StdOutput::NO_OPTION);

            $nCtpIndex = 0;
            $aCtpRows  = array();
            $aMultiSet = array_chunk($aMultiSet, $nChunk);

            foreach ($aMultiSet as $sSet) {
                try {
                    $aRows = $oWvReader->query($sSet);
                    foreach ($aRows as $nCtp) {
                        $aTemplate = $aTemplates[$nCtpIndex];
                        $sCtpKey = "{$aTemplate['widget_analytic_id']},{$aTemplate['website_id']}";
                        $aCtpRows[$sCtpKey]['ctp'][$aTemplate['widget_id']] = $nCtp;
                        $nCtpIndex++;
                    }
                } catch (\Exception $oEx) {
                    Output::error($oEx->getMessage().'... ', 'VW ERROR', StdOutput::NO_OPTION);
                    $aCtpRows = array();
                    break;
                }
            }

            $aDbInserts = array();
            foreach ($aCtpRows as $sKey => $aCtp) {
                $sCtpWidgets = json_encode($aCtp['ctp']);
                $aDbInserts[] = "({$sKey},'{$sCtpWidgets}',{$aDate['insert']})";
            }

            if (!empty($aDbInserts)) {
                Output::put("Inserting into database.. ", '', StdOutput::NO_OPTION);
                if (!$bAllWebsites) {
                    Database::execute("DELETE FROM widgets_ctp WHERE website_id = {$nWebsiteId}");
                }
                Database::execute($sInsertQuery . implode(',', $aDbInserts));
            }
            Output::put('Done in '.(microtime(true) - $nStartTime).' seconds');
            $oWatchdog->heartbeat();
        }
        if ($bAllWebsites) {
            Database::execute("CALL ci_ci_sp_remove_ctp_partition({$aDate['insert']})");
        }
        $oWatchdog->kill();
        Output::success('', 'Finished', StdOutput::OPTION_MEMORY | StdOutput::OPTION_DATE | StdOutput::OPTION_EOL);
    }

    public function killCommand($sType, $nWebsiteId = 0)
    {
        $nOptions = StdOutput::OPTION_MEMORY | StdOutput::OPTION_DATE | StdOutput::OPTION_EOL;
        $sKey = "CI\Cron\Ctp::{$sType}Command({$nWebsiteId})";
        $oWatchdog = $this->_getWatchdog($sKey);
        if ($oWatchdog->kill()) {
            Output::success('', 'Kill Done', $nOptions);
        } else {
            Output::info('Nothing to kill', 'INFO', $nOptions);
        }
    }

    private function _getWatchdog($sKey)
    {
        $aConfig = Config::get('memcache');
        $oMemcached = new \CI\Memcached($aConfig);
        return new \CI\Memcached\Watchdog($oMemcached, $sKey);
    }

    private function _getVWReader()
    {
        $aConfig = Config::get('vowpal_wabbit');
        return new \CI\VowpalWabbit\Reader($aConfig['widget']);
    }

    private function _getWebsites($nWebsiteId = 0)
    {
        $nWebsiteId    = intval($nWebsiteId);
        $sWebsiteQuery = empty($nWebsiteId) ? '' : "AND Website.id = {$nWebsiteId}";
        $aWebsites = Database::query(
            'SELECT Website.id, Website.category, Website.demographic_sex,
               Website.content_rating,
               CONCAT(widgets.id,",",widgets.num_links,",",widgets.height,",",widgets.width) AS widgets
            FROM websites AS Website INNER JOIN widgets ON Website.id = widgets.website_id AND widgets.status < 2
            WHERE Website.visible = 1 '.$sWebsiteQuery
        );
        $aGroupedWebsites = array();
        foreach ($aWebsites as $aWebsite) {
            if (!isset($aGroupedWebsites[$aWebsite['id']])) {
                $aGroupedWebsites[$aWebsite['id']] = $aWebsite;
                $aGroupedWebsites[$aWebsite['id']]['widgets'] = array();
            }
            $aGroupedWebsites[$aWebsite['id']]['widgets'][] = $aWebsite['widgets'];
        }
        return $aGroupedWebsites;
    }

    private function _getWidgetAnalytics($nWebsiteId)
    {
        return Database::query(
            "SELECT Page.status, Page.category, Page.subcategory, Page.demographic_sex,
                Page.content_rating, Page.website_id, Page.title, WidgetAnalytic.id, WidgetAnalytic.num_display,
                WidgetAnalytic.num_ctr, WidgetAnalytic.type, WidgetAnalytic.key, WidgetAnalytic.page_id
            FROM widget_analytics AS WidgetAnalytic INNER JOIN pages AS Page ON Page.id = WidgetAnalytic.page_id
            WHERE WidgetAnalytic.shown_website_id = {$nWebsiteId} AND WidgetAnalytic.visible = 1"
        );
    }

    private function _getSet($aWebsite, $aWidget, $aPage, $aDate)
    {
        $sTemplate = "1 |a_impression_from pub_id_%s " .
            "|b_impression_to page_id_%s pub_id_%s " .
            "|d_title_to %s";
        return sprintf(
            $sTemplate,
            $aWebsite['id'],
            $aPage['page_id'],
            $aPage['website_id'],
            $this->_oFilterTitle->filter($aPage['title'])
        );
    }
}
