<?php

require_once 'ciexception.php';
require_once 'logger/analytic/element/interface.php';
require_once 'logger/analytic/element/abstract.php';
require_once 'logger/analytic/element/array.php';
require_once 'logger/analytic/element/basic.php';
require_once 'logger/analytic/element/timestamp.php';
require_once 'logger/analytic/element/userid.php';
require_once 'logger/analytic/exception/element.php';
require_once 'logger/analytic/interface.php';
require_once 'logger/analytic/abstract.php';
require_once 'logger/analytic/landingpage.php';
require_once 'logger/storage/exception/file.php';
require_once 'logger/storage/interface.php';
require_once 'logger/storage/abstract.php';
require_once 'logger/storage/file.php';
require_once 'logger/interface.php';
require_once 'logger.php';

// require_once 'autoload.php';

class LoggerAnalyticLandingPageTest extends PHPUnit_Framework_TestCase
{
    protected $storage = null;

    protected $path = '/tmp/ci_landing_page_analytic_tmp.log';

    public function setUp()
    {
        $this->storage = new Logger(
            new Logger_Storage_file(
                array('filepath' => $this->path)
            )
        );
    }

    public function testConstruct()
    {
        $time = time();
        $userid = md5('Test User');
        $logger = new Logger_Analytic_LandingPage($this->storage);

        $this->assertTrue(get_class($logger) == 'Logger_Analytic_LandingPage');
        $elements = $logger->getElementsOrder();
        $this->assertTrue(is_string($elements) && strlen($elements) > 0);

        $element = $logger->getElement('user_id');
        $logger->registerElementValue('user_id', $userid);
        $logger->registerElementValue('unix_time_stamp', $time);
        $logger->registerElementValue('link_click_page_id', 1234);


        $log =
            $time.','.$userid.','.'1234';

        $this->assertTrue($logger->getLog() === $log);

        $this->assertTrue($logger->save());
        $logger->clean();
        $this->assertTrue($logger->getLog() === '');
    }

    /**
     * @expectedException Logger_Analytic_Exception_Element
     */
    public function testNonExistElement()
    {
        $logger = new Logger_Analytic_LandingPage($this->storage);

        $logger->registerElementValue('non_exist', true);
    }

    public function tearDown()
    {
        // Cleaning the files created
        if (file_exists($this->path)) {
            unlink($this->path);
        }
    }
}