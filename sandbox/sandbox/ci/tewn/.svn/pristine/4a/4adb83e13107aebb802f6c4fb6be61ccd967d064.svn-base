<?php

namespace CI\Validator;

class Browser extends Rule
{
    // Minimum lenght to consider a valid user-agent
    const MINIMUM_LENGTH = 3;

    const INVALID        = 'browserInvalid';
    const INVALID_LENGTH = 'browserInvalidLength';
    const CRAWLER        = 'isCrawler';
    const CRAWLER_WORD   = 'isCrawlerWord';
    const BOT_WORD       = 'isBotWord';

    /**
     * @var array
     */
    protected $aMessageTemplates = array(
        self::CRAWLER        => "The browser is marked as a crawler: [%value%]",
        self::CRAWLER_WORD   => "User-agent with the word crawler: [%value%]",
        self::BOT_WORD       => "User-agent with the word bot: [%value%]",
        self::INVALID        => "Invalid browser: [%value%]",
        self::INVALID_LENGTH => "Invalid user-agent length: [%value%]",
    );

    /**
     * Returns true if and only if $mValue meets the validation requirements
     *
     * If $mValue fails validation, then this method returns false and getMessages()
     * will return an array of messages that explain why the validation failed.
     *
     * @param mixed $mValue The value to validate
     *
     * @return boolean
     */
    public function isValid($mValue)
    {
        $this->setValue($mValue);

        // Check for an invalid value
        if (empty($mValue)) {
            $this->error(self::INVALID);
            return false;
        }

        // Lenght of the user-agent
        if (false === $this->validateMinimumLength($mValue)) {
            return false;
        }

        // try get_browser
        if (false === $this->validateWithGetBrowser($mValue)) {
            return false;
        }

        // Not enough? verify the word crawler
        if (false === $this->validateWordCrawler($mValue)) {
            return false;
        }

        // Still not enough? verify for words ending with 'Bot'
        if (false === $this->validateWordBot($mValue)) {
            return false;
        }

        return true;
    }

    /**
     * Validate the value with php internal get_browser function.
     *
     * @param string $sValue The value to validate
     *
     * @return boolean
     */
    public function validateWithGetBrowser($sValue)
    {
        $browser = get_browser($sValue, true);

        if (!isset($browser['crawler']) || $browser['crawler'] == 1) {
            $this->error(self::CRAWLER);
            return false;
        }
        return true;
    }

    /**
     * Validate the user-agent has a minimum length.
     *
     * @param string $sValue The value to validate
     *
     * @return boolean
     */
    public function validateMinimumLength($sValue)
    {
        if (strlen($sValue) <= self::MINIMUM_LENGTH) {
            $this->error(self::INVALID_LENGTH);
            return false;
        }
        return true;
    }

    /**
     * Validate the user-agent doesn't contain the word crawler.
     *
     * @param string $sValue The value to validate
     *
     * @return boolean
     */
    public function validateWordCrawler($sValue)
    {
        if (strpos(strtolower($sValue), 'crawler') !== false) {
            $this->error(self::CRAWLER_WORD);
            return false;
        }
        return true;
    }

    /**
     * Validate the user-agent doesn't contains an word ending with *bot.
     *
     * @param string $sValue The value to validate
     *
     * @return boolean
     */
    public function validateWordBot($sValue)
    {
        if (preg_match('/(\wbot)/', strtolower($sValue)) !== 0) {
            $this->error(self::BOT_WORD);
            return false;
        }
        return true;
    }
}