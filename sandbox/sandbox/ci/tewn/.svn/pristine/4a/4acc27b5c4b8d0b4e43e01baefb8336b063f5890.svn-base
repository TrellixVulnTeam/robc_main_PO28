<?php
/**
 * Logger Analytic Element Abstract
 *
 * PHP Version 5.3
 *
 * @category Logger_Analytic
 * @package  Logger_Analytic_Element
 * @author   Ulises Acosta <ulises.acosta@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 */

/**
 * Logger Analytic Element Abstract
 *
 * PHP Version 5.3
 *
 * @category Logger_Analytic
 * @package  Logger_Analytic_Element
 * @author   Ulises Acosta <ulises.acosta@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 */
abstract class Logger_Analytic_Element_Abstract
implements Logger_Analytic_Element_Interface
{
    /**
     * Name of the element
     * @var string
     */
    protected $name = null;

    /**
     * The value that will store this element
     * @var mixed
     */
    protected $value = null;

    /**
     * The format to build the element
     * @var array
     */
    protected $format = array();

    /**
     * Constructs a logger element
     *
     * @param string $name   The name of the element
     * @param array  $format The custom format for the element
     */
    public function __construct($name, array $format = array())
    {
        $this->name = $name;

        $defaultFormat = array(
            'item'      => '%s',
            'separator' => ','
        );

        foreach ($defaultFormat as $key => $value) {
            if (!isset($format[$key])) {
                $format[$key] = $value;
            }
        }

        $this->format = $format;
        $this->initValue();
    }

    /**
     * Initialize the Value on constructor
     *
     * @return void
     */
    public function initValue()
    {
        $this->registerValue(null);
    }

    /**
     * Gets the name of the element
     *
     * @return string The name of the element
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Builds the output of the element as string
     *
     * @return string The string representation of the element
     */
    public function build()
    {
        return sprintf($this->format['item'], $this->value);
    }
}