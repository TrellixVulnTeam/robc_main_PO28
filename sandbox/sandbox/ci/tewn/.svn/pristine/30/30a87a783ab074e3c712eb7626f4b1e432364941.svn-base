<?php
class CompeteComponent extends Object {
	
	//var $api_key = '62ad0ad20bc92737089cd7e9ed9629f4'; // Dev. API key
	var $api_key = 'fbbd16a45a3ed77c9bb245ebe38943ba';
	var $query_base = 'http://apps.compete.com/sites/';
	
	function query($site, $metric) {
		$site = str_replace("www.", "", $site);

		//		$url = $this->query_base.$site."/".$metric."/trended/?api_key=".$this->api_key;
		$url = $this->query_base.$site."/trended/".$metric."/?apikey=".$this->api_key;

		//$url = "http://apps.compete.com/sites/compete.com/trended/uv/?apikey=".$this->api_key;

		$res = $this->get_web_page($url);

		$json = $res['content'];

		$decoded = json_decode($json);

		// Convert from stdClass
		$data = (array) $decoded;

		if (!isset($data['data'])) {
			return 0;
		}

		$count = count($data['data']->trends->uv);

		return $data['data']->trends->uv[$count-1]->value;
	}

	function get_uv($site) {
		return $this->query($site, "uv");
	}

	function get_web_page($url) {
		$options = array(
			CURLOPT_RETURNTRANSFER => true,     // return web page
			CURLOPT_HEADER         => false,    // don't return headers
			CURLOPT_ENCODING       => "",       // handle compressed
			CURLOPT_USERAGENT      => "spider", // who am i
			CURLOPT_AUTOREFERER    => true,     // set referer on redirect
			CURLOPT_CONNECTTIMEOUT => 120,      // timeout on connect
			CURLOPT_TIMEOUT        => 120,      // timeout on response
			CURLOPT_MAXREDIRS      => 10,       // stop after 10 redirects
			);
		
		$ch      = curl_init( $url );
		curl_setopt_array( $ch, $options );
		$content = curl_exec( $ch );
		//echo "<hr>";
		$err     = curl_errno( $ch );
		$errmsg  = curl_error( $ch );
		$header  = curl_getinfo( $ch );
		curl_close( $ch );
		
		$header['errno']   = $err;
		$header['errmsg']  = $errmsg;
		$header['content'] = $content;
		
		return $header;
	}

	/*
	 * Intended to do the same as curl_exec recursively when a redirect header exist.
	 * Based on the comment http://au.php.net/manual/ro/function.curl-setopt.php#71313
	 *
	 */
	function curl_redir_exec($ch)
	{ 
		static $curl_loops = 0;
		static $curl_max_loops = 20;
		if ($curl_loops++ >= $curl_max_loops)
		{
			$curl_loops = 0;
			return FALSE;
		}
		curl_setopt($ch, CURLOPT_HEADER, true);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$data = curl_exec($ch); 

		$separator = strpos($data, "\r\n\r\n");
		$header = substr($data, 0, $separator);
		$data = substr($data, $separator + 4);

		 $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);

		if ($http_code == 301 || $http_code == 302)
		{
			$matches = array();
			preg_match('/Location:(.*?)\n/i', $header, $matches);
			$url = @parse_url(trim(array_pop($matches)));
			if (!$url)
			{
				//couldn't process the url to redirect to
				$curl_loops = 0;
				return $data;
			}
			$last_url = parse_url(curl_getinfo($ch, CURLINFO_EFFECTIVE_URL));
			if (!$url['scheme'])
				$url['scheme'] = $last_url['scheme'];
			if (!$url['host'])
				$url['host'] = $last_url['host'];
			if (!$url['path'])
				$url['path'] = $last_url['path'];
			$new_url = $url['scheme'] . '://' . $url['host'] . $url['path'] . (isset($url['query'])?'?'.$url['query']:'');
			curl_setopt($ch, CURLOPT_URL, $new_url);
			return $this->curl_redir_exec($ch);
		} else {
			$curl_loops=0;
			return $data;
		}
	}
}


?>