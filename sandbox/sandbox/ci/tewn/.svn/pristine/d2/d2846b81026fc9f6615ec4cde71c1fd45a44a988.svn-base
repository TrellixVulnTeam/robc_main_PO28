<?php

namespace CI\Chart;
use CI\Chart;

class Widget extends Chart
{
    public function getRequest()
    {
        $oGet = new \CI\ArrayManipulator($_GET);

        $mWidgets  = $oGet->get('widgets');
        $mWebsites = $oGet->get('websites');
        $mDomains  = $oGet->get('domains');
        $sTypes    = $oGet->get('types', 'incoming,display,ctr', \CI\ArrayManipulator::ARRAY_EMPTY);
        $aTypes    = explode(',', $sTypes);

        /*
            They act like numbers but are really booleans
            but we left the compatibility for now...
        */
        $nIsDomains   = 0;
        $nIsWebsites  = 0;
        $nAllWebsites = (Chart::REQUEST_ALL == $mWebsites) ? 1 : 0;

        if (!empty($mWidgets)) {
            $mWidgets = explode(",", $mWidgets);
            $nIsWebsites = 1;
        }

        // maybe waiting for domain component that Jorge is creating
        // to update the constant :D
        if (!is_null($mDomains) && (0 == $mDomains/*DOMAIN_ID_CROWD_IGNITE*/ || strlen($mDomains) > 0)) {
            $mDomains = explode(",", $mDomains);
            $nIsDomains = 1;
        }

        if (!empty($mWebsites) && Chart::REQUEST_ALL != $mWebsites) {
            $nIsWebsites = 1;
        }

        /*Return request parameters*/
        return array(
            'is_all'      => $nAllWebsites,
            'is_domains'  => $nIsDomains,
            'is_websites' => $nIsWebsites,
            'widgets'     => $mWidgets,
            'types'       => $aTypes,
            'all'         => $nAllWebsites,
            'domains'     => $mDomains,
            'websites'    => $mWebsites,
        );
    }

    public function getWebsites(array $aRequest)
    {
        $aWebsites = array();

        if (!empty($aRequest['all']) || !empty($aRequest['domains'])) {
            $oWebsite = new \CI\Model\Cake\Website($this->getModel('website'));
            $aWebsites = $oWebsite->getIdsByDomains($aRequest['domains']);
        } else {
            if (!empty($aRequest['websites'])) {
                $aWebsites = explode(",", $aRequest['websites']);
            }
            if (!empty($aRequest['widgets'])) {
                $oWidget = new \CI\Model\Cake\Widget($this->getModel('widget'));
                $aTempWebsites = $oWidget->getWebsiteIdsByWidgets($aRequest['widgets']);
                $aWebsites = array_merge($aWebsites, $aTempWebsites);
                unset($aTempWebsites);
            }
        }

        return $aWebsites;
    }

    public function processWebsite(array $aHistory, $nWebsiteId, array $aRequest, $sDate, $nTimeUnit)
    {
        $oWidget = $this->getModel('widget');
        $aWidgets = $oWidget->get_all_by_website_id($nWebsiteId);

        $oStats = new \CI\Stats\Widget();
        $oCache = new Cache\Widget($oWidget);
        $oStats->setModel($this->getModel('stats'))->setDate($sDate, $nTimeUnit);

        foreach ($aWidgets as $aWidget) {
            if (empty($aWidget['Widget']['id'])) {
                continue;
            }
            $nWidgetId = $aWidget['Widget']['id'];
            if (!empty($aRequest['widgets']) && !in_array($nWidgetId, $aRequest['widgets'])) {
                continue;
            }

            $aStats = $oCache->getStatsFromDate($sDate, $nWidgetId);
            if (empty($aStats)) {
                $aStats = $oStats->setWidgetId($aWidget['Widget']['id'])->getData();
                $oCache->setStatsFromDate($sDate, $aWidget['Widget']['id'], $aStats);
            }
            if (empty($aStats)) {
                continue;
            }

            // Add cumulative for site and sets widget stats
            foreach ($aStats as $sField => $nValue) {
                $aHistory[$sDate][$nWebsiteId]['website'][$sField] += $nValue;
                $aHistory[$sDate][$nWebsiteId]['widget'][$nWidgetId][$sField] = $nValue;
            }
        }

        return $aHistory;
    }

    public function incrementDomainStats(array $aHistory, array $aStats, $sDate, $aAccount, $nDomainId)
    {
        $aStats = $aStats['website'];
        foreach ($aStats as $sField => $sValue) {
            $aHistory[$sDate][$nDomainId][$sField] += $sValue;
        }
        return $aHistory;
    }

    public function incrementAllStats(array $aHistory, array $aStats, $sDate, $aAccount)
    {
        $aStats = $aStats['website'];
        foreach ($aStats as $sField => $sValue) {
            $aHistory[$sDate][$sField] += $sValue;
        }
        return $aHistory;
    }

    public function initializeStats($nWebsiteId)
    {
        $oStats = new \CI\Stats\Widget();
        return array(
            'website' => $oStats->getEmptyStats(),
            'widget' => array(),
        );
    }

    public function initializeCumulativeStats()
    {
        $oStats = new \CI\Stats\Widget();
        return $oStats->getEmptyStats();
    }

    public function initializeLineData(array $aRequest)
    {
        $aFields = array(
            'display', 'incoming', 'ctr',
            'display_basic', 'display_contextual', 'display_similar', 'display_tag',
            'incoming_basic', 'incoming_contextual', 'incoming_similar', 'incoming_tag',
            'ctr_basic', 'ctr_contextual', 'ctr_similar', 'ctr_tag',
        );

        $aLine = array('website' => array_fill_keys($aFields, array()));

        if (!empty($aRequest['widgets']) && is_array($aRequest['widgets'])) {
            foreach ($aRequest['widgets'] as $nWidgetId) {
                $aLine['widget'][$nWidgetId] = array_fill_keys($aFields, array());
            }
        }

        return $aLine;
    }

    public function processLineData(array $aLine, array $aStats, $nWebsiteId, array $aRequest, $nDomainId = false)
    {
        $aTypes     = $aRequest['types'];
        $aCtrFields = array('', '_basic', '_contextual', '_similar', '_tag');
        $aFields    = array(
            'display', 'incoming',
            'display_basic', 'display_contextual', 'display_similar', 'display_tag',
            'incoming_basic', 'incoming_contextual', 'incoming_similar', 'incoming_tag',
        );

        /* Process Websites */
        // Get incoming and display
        if (false !== $nWebsiteId) {
            $aStatsValues = $aStats[$nWebsiteId]['website'];
        } else if (false !== $nDomainId) {
            $aStatsValues = $aStats[$nDomainId];
        } else {
            $aStatsValues = $aStats;
        }

        foreach ($aFields as $sField) {
            if (in_array($sField, $aTypes)) {
                array_push($aLine['website'][$sField], $aStatsValues[$sField]);
            }
        }

        foreach ($aCtrFields as $sField) {
            $sCtrField      = 'ctr'.$sField;
            $sIncomingField = 'incoming'.$sField;
            $sDisplayField  = 'display'.$sField;
            if (in_array($sCtrField, $aTypes)) {
                $nCtr = 0;
                if (!empty($aStatsValues[$sDisplayField])) {
                    $nCtr = $aStatsValues[$sIncomingField] / $aStatsValues[$sDisplayField] * 100;
                }
                array_push($aLine['website'][$sCtrField], round($nCtr, 2));
            }
        }
        unset($aStatsValues);

        /* Process Widgets */
        if (!empty($aRequest['widgets'])) {
            foreach ($aStats[$nWebsiteId]['widget'] as $nWidgetId => $aWidgetStats) {
                foreach ($aFields as $sField) {
                    if (in_array($sField, $aTypes)) {
                        array_push($aLine['widget'][$nWidgetId][$sField], $aWidgetStats[$sField]);
                    }
                }

                foreach ($aCtrFields as $sField) {
                    $sCtrField      = 'ctr'.$sField;
                    $sIncomingField = 'incoming'.$sField;
                    $sDisplayField  = 'display'.$sField;
                    if (in_array($sCtrField, $aTypes)) {
                        $nCtr = 0;
                        if (!empty($aWidgetStats[$sDisplayField])) {
                            $nCtr = $aWidgetStats[$sIncomingField] / $aWidgetStats[$sDisplayField] * 100;
                        }
                        array_push($aLine['widget'][$nWidgetId][$sCtrField], round($nCtr, 2));
                    }
                }
            }
        }
        return $aLine;
    }

    public function processLines(array $aOut, array $aLine, $nWebsiteId, array $aRequest, $nDomainId, $nTimeUnit)
    {
        $aTypes   = $aRequest['types'];
        $oWidget  = $this->getModel('widget');
        $oWebsite = $this->getModel('website');
        $aFields  = array(
            'display', 'incoming', 'ctr',
            'display_basic', 'display_contextual', 'display_similar', 'display_tag',
            'incoming_basic', 'incoming_contextual', 'incoming_similar', 'incoming_tag',
            'ctr_basic', 'ctr_contextual', 'ctr_similar', 'ctr_tag',
        );

        if (false !== $nWebsiteId) {
            $sName = $oWebsite->field('name', array('id' => $nWebsiteId));
            $nId = $nWebsiteId;
        } else if (false !== $nDomainId) {
            $oConvert = $this->getComponent('convert');
            $sName = $oConvert->domain_name($nDomainId);
            $nId = $nDomainId;
        } else {
            $sName = "All";
            $nId = "All";
        }

        $nInterval = $this->getTimeInterval($nTimeUnit);

        if (!empty($aRequest['widgets'])) {
            $aWidgets = $aRequest['widgets'];
            foreach ($aWidgets as $nWidgetId) {
                $sWidgetName = $oWidget->field('name', array('id' => $nWidgetId));
                $aData = $aLine['widget'][$nWidgetId];

                foreach ($aFields as $sField) {
                    if (in_array($sField, $aTypes)) {
                        $sFieldParts = explode('_', $sField);
                        $sDisplayName = $sWidgetName;
                        if (count($sFieldParts) > 1) {
                            $sDisplayName .= ucfirst($sFieldParts[1]);
                        }
                        if ($sFieldParts[0] == 'ctr') {
                            $sFieldParts[0] = strtoupper($sFieldParts[0]);
                            $sDisplayName = ucwords(implode(' ', $sFieldParts));
                        }
                        $sDisplayType = ucwords(implode(' ', $sFieldParts));
                        $aOut[] = array(
                            "widget_id" => $nWidgetId,
                            "name" => $sDisplayName,
                            "interval" => $nInterval,
                            "data" => $aData[$sField],
                            "class" => "Widget",
                            "type" => $sDisplayType,
                        );
                    }
                }
            }
        }

        if (!empty($aRequest['websites']) || !empty($aRequest['all']) || !empty($aRequest['domains'])) {
            $aData = $aLine['website'];
            foreach ($aFields as $sField) {
                if (in_array($sField, $aTypes)) {
                    $sFieldParts = explode('_', $sField);
                    $sDisplayName = $sName;
                    if (count($sFieldParts) > 1) {
                        $sDisplayName .= ucfirst($sFieldParts[1]);
                    }
                    if ('ctr' == $sFieldParts[0]) {
                        $sFieldParts[0] = strtoupper($sFieldParts[0]);
                        $sDisplayName = ucwords(implode(' ', $sFieldParts));
                    }
                    $sDisplayType = ucwords(implode(' ', $sFieldParts));
                    $aOut[] = array(
                        "website_id" => $nId,
                        "name" => $sDisplayName,
                        "interval" => $nInterval,
                        "data" => $aData[$sField],
                        "class" => "Website",
                        "type" => $sDisplayType,
                    );
                }
            }
        }

        return $aOut;
    }
}