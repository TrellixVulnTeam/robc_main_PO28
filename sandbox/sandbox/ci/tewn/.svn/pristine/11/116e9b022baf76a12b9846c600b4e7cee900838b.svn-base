<?php
namespace Test\VowpalWabbit\Data;

use CI\VowpalWabbit\Data\Access;
use CI\VowpalWabbit\Data\Set;
use CI\Socket\Exception as SocketException;

/**
 * @group vowpalwabbit
 */
class AccessTest extends \PHPUnit_Framework_TestCase
{
    public function testShouldCreateSocketInstance()
    {
        $oVowpal = new Access('dev.crowdignite.com', 80);

        $this->assertAttributeInstanceOf('CI\Socket', '_oSocket', $oVowpal);
    }

    public function testSetSocket()
    {
        $oMock = $this->getMockSocket();

        $oVowpal = new Access();
        $oVowpal->setSocket($oMock);

        $this->assertAttributeInstanceOf('CI\Socket', '_oSocket', $oVowpal);
    }

    public function testGetWeight()
    {
        $nWeight = 0.8740;

        $oMockSocket = $this->getMockSocket();
        $oMockSocket->expects($this->once())
                    ->method('read')
                    ->will($this->returnValue($nWeight));

        $oMockDataSet = $this->getMockBuilder('CI\VowpalWabbit\Data\Set')
                             ->setMethods(array('toString'))
                             ->getMock();
        $oMockDataSet->expects($this->once())
                     ->method('toString')
                     ->will($this->returnValue('queryString'));

        $oVowpal = new Access();
        $oVowpal->setSocket($oMockSocket);

        $this->assertEquals($nWeight, (float) $oVowpal->get($oMockDataSet));
    }

    public function testSameSocketInstanceUsingCreateSocket()
    {
        $sHost = 'dev.crowdignite.com';
        $nPort = 80;

        $oVowpal = new Access($sHost, $nPort);
        $oSocket = $oVowpal->getSocket();

        // Should not create a new instance of Socket class
        $oVowpal->createSocket($sHost, $nPort);

        $this->assertEquals($oSocket, $oVowpal->getSocket(), 'Should not create a new Socket instance');
    }

    public function testReconnect() {
      $sExpected = 0;
      $oSocket = $this->getMockSocket();
      $oSocket->expects($this->at(0))
              ->method('write')
              ->will($this->throwException(new \CI\Socket\Exception()));
      $oSocket->expects($this->at(1))
              ->method('write')
              ->will($this->returnValue('Invalid request'));
      $oSocket->expects($this->once())
              ->method('read')
              ->will($this->returnValue($sExpected));
      $oSocket->expects($this->any())
              ->method('connect')
              ->will($this->returnValue(true));

      $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                      ->disableOriginalConstructor()
                      ->setMethods(array('createSocket'))
                      ->getMock();

      $oAccess->setLogger($this->getMockLogger());
      $oAccess->setSocket($oSocket);
      $sReturned = $oAccess->get($this->getMock('\CI\VowpalWabbit\Data\Set'));

      $this->assertAttributeEquals($oSocket, '_oSocket', $oAccess);
      $this->assertEquals($sExpected, $sReturned);
    }

    public function testThrowExceptionWhenReachMaxAttemptToGet() {
      $this->setExpectedException(
        'CI\Socket\Exception',
        'Reach the max attempt to get one value from Vowpal Wabbit request = 3',
        SocketException::ERR_MAX_ATTEMP_GET
      );

      $oSocket = $this->getMockSocket();
      $oSocket->expects($this->any())
              ->method('write')
              ->will($this->throwException(new \CI\Socket\Exception()));
      $oSocket->expects($this->any())
              ->method('connect')
              ->will($this->returnValue(true));

      $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                      ->disableOriginalConstructor()
                      ->setMethods(array('createSocket'))
                      ->getMock();

      $oAccess->setLogger($this->getMockLogger());
      $oAccess->setSocket($oSocket);
      $oAccess->get($this->getMock('\CI\VowpalWabbit\Data\Set'));
    }

    /**
     * @expectedException CI\Socket\Exception
     * */
    public function testThrowExceptionWhenReachMaxAttemptToReconnect() {
        $oSocket = $this->getMockSocket();
        $oSocket->expects($this->once())
                ->method('write')
                ->will($this->throwException(new \CI\Socket\Exception()));

        $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                        ->disableOriginalConstructor()
                        ->setMethods(array('createSocket'))
                        ->getMock();

        $oAccess->setLogger($this->getMockLogger());
        $oAccess->setSocket($oSocket);
        $oAccess->get($this->getMock('\CI\VowpalWabbit\Data\Set'));

    }

    public function testGetWhenTheResultIsGreaterThanOne() {
        $nExpected = 1;
        $oSocket = $this->getMockSocket();
        $oSocket->expects($this->once())
                ->method('read')
                ->will($this->returnValue(23));

        $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                        ->disableOriginalConstructor()
                        ->setMethods(array('createSocket'))
                        ->getMock();

        $oAccess->setLogger($this->getMockLogger());
        $oAccess->setSocket($oSocket);
        $nResult =  $oAccess->getCtp($this->getMock('\CI\VowpalWabbit\Data\Set'));

        $this->assertEquals($nExpected, $nResult);
    }

    public function testGetWhenTheResultIsGreaterThanOneWithDecimals() {
        $nExpected = 1;
        $oSocket = $this->getMockSocket();
        $oSocket->expects($this->once())
                ->method('read')
                ->will($this->returnValue(1.000090));

        $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                        ->disableOriginalConstructor()
                        ->setMethods(array('createSocket'))
                        ->getMock();

        $oAccess->setLogger($this->getMockLogger());
        $oAccess->setSocket($oSocket);
        $nResult =  $oAccess->getCtp($this->getMock('\CI\VowpalWabbit\Data\Set'));

        $this->assertEquals($nExpected, $nResult);
    }

    public function testGetWhenTheResultIsLessThanCeroNegativeDecimals() {
        $nExpected = 0;
        $oSocket = $this->getMockSocket();
        $oSocket->expects($this->once())
                ->method('read')
                ->will($this->returnValue(-0.000090));

        $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                        ->disableOriginalConstructor()
                        ->setMethods(array('createSocket'))
                        ->getMock();

        $oAccess->setLogger($this->getMockLogger());
        $oAccess->setSocket($oSocket);
        $nResult =  $oAccess->getCtp($this->getMock('\CI\VowpalWabbit\Data\Set'));

        $this->assertEquals($nExpected, $nResult);
    }

    public function testGetWhenTheResultIsLessThanOne() {
        $nExpected = 0;
        $oSocket = $this->getMockSocket();
        $oSocket->expects($this->once())
                ->method('read')
                ->will($this->returnValue(-2));

        $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                      ->disableOriginalConstructor()
                      ->setMethods(array('createSocket'))
                      ->getMock();

        $oAccess->setLogger($this->getMockLogger());
        $oAccess->setSocket($oSocket);
        $nResult = $oAccess->getCtp($this->getMock('\CI\VowpalWabbit\Data\Set'));

        $this->assertEquals($nExpected, $nResult);
    }

    public function testIfIsFloat() {
        $sExpected = 'float';
        $nExpected = (float)0.939902;
        $oSocket = $this->getMockSocket();
        $oSocket->expects($this->once())
                ->method('read')
                ->will($this->returnValue('0.939902'));

        $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                        ->disableOriginalConstructor()
                        ->setMethods(array('createSocket'))
                        ->getMock();

        $oAccess->setLogger($this->getMockLogger());
        $oAccess->setSocket($oSocket);
        $nResult = $oAccess->getCtp($this->getMock('\CI\VowpalWabbit\Data\Set'));

        $this->assertEquals($nExpected, $nResult);
        $this->assertInternalType($sExpected, $nResult);
    }

        public function testIfIsFloatWithEnters() {
        $sExpected = 'float';
        $nExpected = (float)0.939902;
        $oSocket = $this->getMockSocket();
        $oSocket->expects($this->once())
                ->method('read')
                ->will($this->returnValue("0.939902

                  \r\n"));

        $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                        ->disableOriginalConstructor()
                        ->setMethods(array('createSocket'))
                        ->getMock();

        $oAccess->setLogger($this->getMockLogger());
        $oAccess->setSocket($oSocket);
        $nResult = $oAccess->getCtp($this->getMock('\CI\VowpalWabbit\Data\Set'));

        $this->assertEquals($nExpected, $nResult);
        $this->assertInternalType($sExpected, $nResult);
    }

    public function testExceptionWhenGetReturnString() {
        $this->setExpectedException(
            '\CI\VowpalWabbit\Data\Exception',
            'The value [ string_not_valid ] is not numeric'
        );

        $oSocket = $this->getMockSocket();
        $oSocket->expects($this->once())
                ->method('read')
                ->will($this->returnValue('string_not_valid'));

        $oAccess = $this->getMockBuilder('\CI\VowpalWabbit\Data\Access')
                        ->disableOriginalConstructor()
                        ->setMethods(array('createSocket'))
                        ->getMock();

        $oAccess->setLogger($this->getMockLogger());
        $oAccess->setSocket($oSocket);
        $nResult = $oAccess->getCtp($this->getMock('\CI\VowpalWabbit\Data\Set'));
    }

    /**
     * Function to create a mock object of Socket disabling the
     * contructor of the class.
     */
    public function getMockSocket()
    {
        $oMock = $this->getMockBuilder('CI\Socket')
                      ->disableOriginalConstructor()
                      ->getMock();

        return $oMock;
    }

    public function getMockLogger()
    {
        $oLoger = $this->getMockBuilder('\CI\logger\Simple')
                       ->setMethods(array('log'))
                       ->getMock();

        return $oLoger;
    }
}