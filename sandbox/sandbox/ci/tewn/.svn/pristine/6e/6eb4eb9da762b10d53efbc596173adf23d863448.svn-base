<?php
namespace Test\Validator;
use CI\Validator\Browser as BrowserValidator;

/**
 * @group validator
 * @group validator_browser
 */
class ValidatorBrowserTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var BrowserValidator
     */
    protected $oValidator;

    /**
     * Creates a new instance of BrowserValidator
     *
     * @return void
     */
    public function setUp()
    {
        $this->oValidator = new BrowserValidator();
    }

    public function testBasic()
    {
        $aUserAgents = array(
            array(
                'Mozilla/6.0 (compatible; 008/0.83; http://www.80legs.com/webcrawler.html) Gecko/2008032620',
                false,
            ),
            array(
                'Mozilla/5.0 (compatible; BecomeBot/3.0; MSIE 6.0 compatible; +http://www.become.com/site_owners.html)',
                false,
            ),
            array(
                'Googlebot/2.1 (+http://www.google.com/bot.html)',
                false,
            ),
            array(
                'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; GTB5;',
                true,
            ),
            array(
                'Mozilla/4.0 (compatible; MSIE 8.0; AOL 9.6; AOLBuild 4340.27; Windows NT 5.1; Trident/4.0; .NET CLR 1.0.3705; .NET CLR 1.1.4322; Media Center PC 4.0; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; InfoPath.2)',
                true,
            ),
            array(
                'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1468.0 Safari/537.36',
                true,
            ),
            array(
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0',
                true,
            ),
            array(
                'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)',
                true,
            ),
            array(
                'Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)',
                true,
            ),
            array(
                'Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 6.0; fr-FR)',
                true,
            ),
            array(
                'Mozilla/45.0 (compatible; MSIE 6.0; Windows NT 5.1)',
                true,
            ),
            array(
                'Lynx/2.8.6rel.5 libwww-FM/2.14 SSL-MM/1.4.1 OpenSSL/0.9.8g',
                true,
            ),
            array('', false),
            array('-', false),
            array(null, false),
        );
        foreach ($aUserAgents as $nIndex => $aElement) {
            $this->assertEquals(
                $aElement[1],
                $this->oValidator->isValid($aElement[0]),
                "Failed test #{$nIndex}"
            );
        }
    }


    /**
     * Test usign the function get_browser.
     *
     * @return void
     */
    public function testValidateWithGetBrowser()
    {
        $aUserAgents = array(
            array(
                'Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 6.0; fr-FR)',
                true,
            ),
            array(
                'PHP/5.2.9',
                false
            ),
        );
        foreach ($aUserAgents as $nIndex => $aElement) {
            $this->assertEquals(
                $aElement[1],
                $this->oValidator->validateWithGetBrowser($aElement[0]),
                "Failed test #{$nIndex}"
            );
        }
    }

    /**
     * Test a valid length.
     *
     * @return void
     *
     */
    public function testValidateLength()
    {
        $aUserAgents = array(
            array('1', false),
            array(str_repeat('a', BrowserValidator::MINIMUM_LENGTH), false),
            array(str_repeat('a', BrowserValidator::MINIMUM_LENGTH) + 1, false),
        );
        foreach ($aUserAgents as $nIndex => $aElement) {
            $this->assertEquals(
                $aElement[1],
                $this->oValidator->validateMinimumLength($aElement[0]),
                "Failed test #{$nIndex}"
            );
        }
    }

    /**
     * Test the user agent doesn't contains the word 'bot'.
     *
     * @return void
     */
    public function testValidateWordBot()
    {
        $aUserAgents = array(
            array('xxxxxxx/6.0', true),
            array('xxxxxxxbot/6.0', false),
            array('xxxxxxxBot/6.0', false),
            array('xxxxxxx/5.0 (compatible; BecomeBot/3.0;)', false),
        );
        foreach ($aUserAgents as $nIndex => $aElement) {
            $this->assertEquals(
                $aElement[1],
                $this->oValidator->validateWordBot($aElement[0]),
                "Failed test #{$nIndex}"
            );
        }
    }

    /**
     * Test the user agent doesn't contains the word 'crawler'.
     *
     * @return void
     */
    public function testValidateWordCrawler()
    {
        $aUserAgents = array(
        array('xxxxxxx/6.0', true),
        array('xxxxxxxcrawler/6.0', false),
        array('xxxxxxxCrawler/6.0', false),
        array('xxxxxxx/5.0 (compatible; Crawler/3.0;)', false),
        );
        foreach ($aUserAgents as $nIndex => $aElement) {
            $this->assertEquals(
                $aElement[1],
                $this->oValidator->validateWordCrawler($aElement[0]),
                "Failed test #{$nIndex}"
            );
        }
    }
}