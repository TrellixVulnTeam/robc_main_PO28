<?php

include_once (ROOT . DS . APP_DIR . DS . "global_defines.php");

/*
 * Invetory Controller
 *
 */
class HistoryInventoryController extends AppController {

	var $name = 'HistoryInventory';
	var $uses = array("Account", "Website", "Page", "HistoryStat", "User");
	var $components = array('RequestHandler', 'History', 'Date', 'Timer');
	var $helpers = array('Convert');

	var $cache_on = 1;
	var $debug = 0;

	function beforeFilter() {
		// History Widgets Controller
		App::import('Controller', 'HistoryWidgetAnalytics');
		global $HistoryWidgetAnalytics;
		$HistoryWidgetAnalytics = new HistoryWidgetAnalyticsController;
		$HistoryWidgetAnalytics->constructClasses();

		$this->Session->activate();
		$user = $this->Session->read('User');
		$user = $this->User->findById($user['id']);

		$this->layout = DOMAIN.'/default';
		$this->set('user', $user);
	}

	function chart() {
		Configure::write("debug", 0);
		App::import('Helper', 'Convert');
		$convert = new ConvertHelper();
		$this->layout = "";
		$count = 0;
		$site_wide = 0;

		set_time_limit(20*60);
		if ($this->RequestHandler->isAjax()) {
			$this->RequestHandler->renderAs($this, 'ajax');
		}

		$start_time = $_GET['start_time'];
		$end_time = $_GET['end_time'];
		$in_websites = $_GET['websites'];
		$in_types = $_GET['types'];
		$in_domains = $_GET['domain'];
		$in_intersects = $_GET['intersect'];

		// Debug
		if (0) {
			Configure::write("debug", 0);

			$start_time = mktime(0, 0, 0, date("n"), 1, date("Y")); // This month
			$start_time = strtotime("midnight -1 days"); // 3 days ago

			$end_time = strtotime("midnight today");
			$in_widgets = "17,21";
			$in_websites = "all";
			$in_domains = "2,8";
			$in_domains = "2";
			$in_types = "actual";
			$in_intersects = "category";
		}
		// XXX take me out
		$start_time = strtotime("midnight -1 days"); // 3 days ago

		$end_time = strtotime("yesterday 23:59:59");

		$last_day = date("Y-m-d G:i:s", $end_time);
		$first_day = date("Y-m-d", $start_time);
		$start_time = strtotime($first_day);

		$num_days = $this->Date->num_days($first_day, $last_day);

		/*
                $this->log("start_time: ".$start_time, "history_credits");
                $this->log("end_time: ".$end_time, "history_credits");
                $this->log("first_day: ".$first_day, "history_credits");
                $this->log("last_day: ".$last_day, "history_credits");
                $this->log("num_days: ".$num_days, "history_credits");
                $this->log("---------", "history_credits");
		*/

		// Get types
		$types = $this->get_types($in_types);

		/* We need all the aggregate info */
		if ($in_websites == "all") {
			$element_actual = array();

			$domain_ids = $this->get_domains($in_domains);
			$intersects = $this->get_intersects($in_intersects);
			foreach ($domain_ids as $domain_id) {
				if (in_array("actual", $types) ||
					in_array("strict", $types)) {
					$aggregate = $this->actual_aggregate(0, $domain_id, $first_day, $last_day);
				}
			}

			if (in_array("category", $intersects)) {
				for ($i = 0; $i < CATEGORY_NUMBER; $i++) {
					$num_display = $aggregate['category'][$i]['num_display'];
					if ($num_display) {
						$element_actual[] = $num_display;
						$element_categories[] = $convert->category_short($i);
					}
				}
			}
			if (in_array("actual", $types)) {
				$out[$count++] = array("website_id" => "all", "categories" => $element_categories, "data" => $element_actual, "type" => "Actual", "name" => "All");
			}
		} else {
			/* We only need a subset of the websites */

			// Figure out what websites we need
			$website_ids = $this->get_websites($in_websites);

			foreach($website_ids as $website_id) {
				$element_tpm = array();

				for($i = 0; $i < $num_days; $i++) {
					// We got the extra day so not to count today
					$day = $this->Date->date_add($first_day, $i);

					$tpm = $this->tpm_day($website_id, $day);
					$tpm = $this->format_number($tpm);

					array_push($element_tpm, $tpm);
					//array_push($element_tpm, array($this->get_time_out($day), $tpm));
				}

				$website_name = $this->get_website_name($website_id);

				if (in_array("tpm", $types)) {
					$out[$count++] = array("website_id" => $website_id,
							       "type" => "TPM",
							       "name" => $website_name,
							       "data" => $element_tpm);
				}
			}
		}

		print_r(json_encode($out));
	}

	function density() {
		if (isset($_POST['date_start'])) {
			App::import('Helper', 'Convert');
			$convert = new ConvertHelper();

			set_time_limit(60*60);

			/* Date */
			$date_start = $this->Date->day_start($_POST['date_start']);
			$date_end = $this->Date->day_end($_POST['date_end']);

			/* Domain */
			$domain_ids = explode(",", $_POST['domains']);

			foreach ($domain_ids as $domain_id) {
				$websites = $this->Website->running($domain_id);
				$aggregate = $this->actual_aggregate($websites, $domain_id, $date_start, $date_end);

				for ($i = 0; $i < CATEGORY_NUMBER; $i++) {
					$num_display = $aggregate['category'][$i]['num_display'];
					$num_ctr = $aggregate['category'][$i]['num_ctr'];
					if ($num_display) {
						$data[$domain_id][$i]['num_display'] = $num_display;
						$data[$domain_id][$i]['num_ctr'] = $num_ctr;

						$page_active = 0;

						foreach ($websites as $website) {
							$page_active += $this->Page->find("count", array("conditions" =>
																			 array("status" => PAGE_STATUS_APPROVED,
																				   "category" => $i,
																				   "website_id" => $website['Website']['id'])));
						}
						$data[$domain_id][$i]['page_active'] = $page_active;
					}
				}
			}

			$this->set("data", $data);
			$this->set("date_start", date("m-d-Y", strtotime($date_start)));
			$this->set("date_end", date("m-d-Y", strtotime($date_end)));
			$this->set("domain_ids", $domain_ids);
		} else {
			$this->set("date_start", "");
			$this->set("date_end", "");
		}
	}

	private function get_website_name($website_id) {
		$website_object = $this->Website->findById($website_id);

		if ($website_object['Website']['name']) {
			return $website_object['Website']['name'];
		} else {
			return $website_object['Website']['url'];
		}
	}

	private function get_time_out($day) {
		plat_assert($day);
		return (strtotime("midnight ".$day." UTC") * 1000);
	}

	/*
	 * Returns an array of website IDs
	 */
	private function get_websites($in_websites) {
		plat_assert($in_websites);
		plat_assert($in_websites != "all");

		$websites = explode(",", $in_websites);

		return $websites;
	}

	private function get_domains($in_domains) {
		plat_assert($in_domains);

		$domains = explode(",", $in_domains);

		return $domains;
	}

	private function get_intersects($in_intersects) {
		plat_assert($in_intersects);

		$intersects = explode(",", $in_intersects);

		return $intersects;
	}

	private function get_types($in_types) {
		if (!empty($in_types)) {
			$types = explode(",", $in_types);
		} else {
			$types = array("actual");
		}

		return $types;
	}

	function actual_aggregate($shown_websites = null, $domain_id = DOMAIN_ID_ALL, $date_start, $date_end) {
		global $HistoryWidgetAnalytics;

		$aggregate_outgoing = 0;
		$aggregate_display = 0;

		if (!$shown_websites) {
			$shown_websites = $this->Website->running($domain_id);
		}

		$aggregate = $this->initialize_aggregate();

		$oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());

		foreach ($shown_websites as $shown_website) {
			$pages = $this->Page->get_running($shown_website['Website']['id']);

			// Get all the websites where our pages could run
			$websites = $this->Website->running($oHub->bitsToIdArray($shown_website['Website']['domain_bitfield']));

			foreach ($websites as $website) {
				$website_id = $website['Website']['id'];
				$shown_website_id = $shown_website['Website']['id'];

				if ($shown_website_id == $website_id) {
					continue;
				}

				foreach ($pages as $page) {
					$stat = $HistoryWidgetAnalytics->stats_time($page['Page']['id'], $website_id, $date_start, $date_end);
					$stats = array();
					$stats = $stat;
					$stats['category'][$page['Page']['category']] = $stat;
					$stats['demographic_sex'][$page['Page']['demographic_sex']] = $stat;
					$stats['content_rating'][$page['Page']['content_rating']] = $stat;

					$aggregate = $this->update_aggregate($aggregate, $stats);
				}
			}
		}

		return $aggregate;
	}

	private function initialize_aggregate() {
		$total['num_ctr'] = 0;
		$total['num_display'] = 0;
		$total['category'] = array();
		$total['demographic_sex'] = array();
		$total['content_rating'] = array();
		for ($i = 0; $i < CATEGORY_NUMBER; $i++) {
			$total['category'][$i]['num_ctr'] = 0;
			$total['category'][$i]['num_display'] = 0;
		}
		for ($i = 0; $i < DEMOGRAPHIC_SEX_NUMBER; $i++) {
			$total['demographic_sex'][$i]['num_ctr'] = 0;
			$total['demographic_sex'][$i]['num_display'] = 0;
		}
		for ($i = 0; $i < WEBSITE_CONTENT_NUMBER; $i++) {
			$total['content_rating'][$i]['num_ctr'] = 0;
			$total['content_rating'][$i]['num_display'] = 0;
		}

		return $total;

	}

	private function update_aggregate($total, $update) {
		// Total
		$total['num_ctr'] += $update['num_ctr'];
		$total['num_display'] += $update['num_display'];

		// Category
		for ($i = 0; $i < CATEGORY_NUMBER; $i++) {
			if (!isset($update['category'][$i])) {
				continue;
			}
			$total['category'][$i]['num_ctr'] += $update['category'][$i]['num_ctr'];
			$total['category'][$i]['num_display'] += $update['category'][$i]['num_display'];
		}

		// Demographic Sex
		for ($i = 0; $i < DEMOGRAPHIC_SEX_NUMBER; $i++) {
			if (!isset($update['demographic_sex'][$i])) {
				continue;
			}
			$total['demographic_sex'][$i]['num_ctr'] += $update['demographic_sex'][$i]['num_ctr'];
			$total['demographic_sex'][$i]['num_display'] += $update['demographic_sex'][$i]['num_display'];
		}

		// Content Rating
		for ($i = 0; $i < WEBSITE_CONTENT_NUMBER; $i++) {
			if (!isset($update['content_rating'][$i])) {
				continue;
			}
			$total['content_rating'][$i]['num_ctr'] += $update['content_rating'][$i]['num_ctr'];
			$total['content_rating'][$i]['num_display'] += $update['content_rating'][$i]['num_display'];
		}

		return $total;
	}

	public function tpm_calculate($outgoing, $display) {
		if ($display) {
			$display = $display / 1000;
			return ($outgoing / $display);
		} else {
			return 0;
		}
	}

	/*
	 * Amount of traffic sent per thousand impressions
	 */
	function tpm_day($website_id, $date = null) {
		$date = $this->Date->format($date);

		/* Check the cache */
		if ($date && !$this->Date->is_today($date) && $this->cache_on) {
			$cache_stats = $this->HistoryStat->get_tpm_stats_cache($website_id, $date);
			if ($cache_stats) {
				return $cache_stats[0];
			}
		}

		$account_id = $this->Website->field("account_id", "id = ".$website_id);
		$credit_stats = $this->RequestAction("/history_credits/stats_day/".$account_id."/".$date);
		$widget_stats = $this->RequestAction("/history_widgets/website_stats_day/".$website_id."/".$date);

		$tpm = $this->tpm_calculate($credit_stats['outgoing'], $widget_stats['display']);

		/* Put it into the cache */
		if ($date && !$this->Date->is_today($date) && $this->cache_on) {
			$this->HistoryStat->set_tpm_stats_cache($website_id, $date, $tpm);
		}

		return $tpm;
	}

	function clear_cache($date = null) {
		$date = $this->Date->format($date);

		$websites = $this->Website->find("all", array("conditions" => array("visible" => true)));

		$this->History->clear_cache($date,
					    $websites,
					    array(&$this->HistoryStat, "clear_tpm_stats_cache"));
	}

	public function precache() {
		/* Timers & Limits */
		$this->Timer->start(TIMER_HISTORY_STATS_PRECACHE);
		set_time_limit(TIME_LIMIT_HISTORY_STATS_PRECACHE);
		ini_set('memory_limit', MEMORY_LIMIT_HISTORY_STATS_PRECACHE.'M');

		$websites = $this->Website->find("all", array("conditions" => array("visible" => 1)));

		$date = $this->Date->yesterday();

		foreach($websites as $website) {
			$this->tpm_day($website['Website']['id'], $date);
		}

		/* Save off timer */
		$data = $this->Timer->set_memory_limit();
		$this->Timer->stop_save($data);
	}

	function format_number($number) {
		return round($number, 2);
	}
}

?>
