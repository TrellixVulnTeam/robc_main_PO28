<?php

namespace CI;
use CI\Memcached\Facade\Memcached as Cache;

class PlatAssert
{
    protected $oMemcache;

    function alertToLogStash($aData)
    {
        $nMaxErrorCount = 25;
        $sMd5Backtrace = md5($aData['backtrace']);
        $sLastErrorMessageKey = 'app-platAssert-' .$sMd5Backtrace;
        $oMemcache = $this->getMemcachedObject();

        if ($nMaxErrorCount > 0) {
            $nLastErrorCount = $oMemcache->get($sLastErrorMessageKey);
        }

        if (!$nLastErrorCount) {
            $nLastErrorCount = 1;
        } else {
            $nLastErrorCount++;
        }

        if ($nLastErrorCount % $nMaxErrorCount === 0
            || $nLastErrorCount < $nMaxErrorCount
            || $nMaxErrorCount == 0
        ) {

            $sRedisKey = 'crowdignite_platasserts';
            switch (ENVIRONMENT) {
                case 'local':
                case 'dev':
                    $sRedisHost = 'vip-rds-logstashdev.tp.prd.lax.gnmedia.net';
                    break;
                case 'stg':
                    $sRedisHost = 'vip-rds-logstashstg.tp.prd.lax.gnmedia.net';
                    break;
                case 'prd':
                    $sRedisHost = 'vip-rds-logstashprd.tp.prd.lax.gnmedia.net';
                    break;
            }

            $oRedis = new \Redis();
            $oRedis->connect($sRedisHost, 6379);
            $aData['error_count'] = $nLastErrorCount;
            $oRedis->lPush($sRedisKey, json_encode($aData));
        }

        if ($nMaxErrorCount > 0) {
            $oMemcache->set($sLastErrorMessageKey, $nLastErrorCount, 900);
        }
    }

    protected function getMemcachedObject()
    {
        if (empty($this->oMemcache)) {
            $oConfig = $this->getConfigObject();
            $this->oMemcache = new \CI\Memcached($oConfig->get('memcache'));
        }

        return $this->oMemcache;
    }

    protected function getConfigObject()
    {
        if (empty($this->oConfig)) {
            $this->oConfig = new \CI\Config();
        }

        return $this->oConfig;
    }
}
