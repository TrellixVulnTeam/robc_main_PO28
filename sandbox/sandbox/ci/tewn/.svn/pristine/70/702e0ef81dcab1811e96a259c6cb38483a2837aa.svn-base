<?php

class CakeMemcacheComponentTestController extends Controller{
	var $components = array('CakeMemcache');
}

class CakeMemcacheComponentTest extends CakeTestCase{
	var $Controller;

	function start(){
		$this->Controller = new CakeMemcacheComponentTestController();
		$this->Controller->constructClasses();
		$this->Controller->Component->initialize($this->Controller);
		$this->Controller->beforeFilter();
		$this->Controller->Component->startup($this->Controller);
	}

	function testSet() {
		$key = "memcached_test";

		$init_value = 10;

		/* Test set */
		$result = $this->Controller->CakeMemcache->set($key, $init_value);
		$expected = true;

		$this->assertEqual($result, $expected);
	}

	function testGet() {
		$key = "memcached_test";

		$init_value = 10;

		/* Test set */
		$result = $this->Controller->CakeMemcache->set($key, $init_value);
		$expected = true;
		$this->assertEqual($result, $expected);

		/* Test get */
		$result = $this->Controller->CakeMemcache->get($key);
		$expected = $init_value;

		$this->assertEqual($result, $expected);
	}

	function testCas() {
		/* Test cas */
		$key = "memcached_test";

		$init_value = 10;

		// Cleanup
		$this->Controller->CakeMemcache->delete($key);

		// Test value not changing
		$result = $this->Controller->CakeMemcache->set($key, $init_value);
		$expected = true;
		$this->assertEqual($result, $expected);

		$result = $this->Controller->CakeMemcache->get($key, $cas_token);
		$expected = true;
		$this->assertEqual($result, $expected);

		$result = $this->Controller->CakeMemcache->cas($cas_token, $key, $init_value + 1);
		$expected = true;
		$this->assertEqual($result, $expected);

		$result = $this->Controller->CakeMemcache->get($key, $cas_token);
		$expected = $init_value + 1;
		$this->assertEqual($result, $expected);

		// Test value changing
		$this->Controller->CakeMemcache->set($key, $init_value);
		$result = $this->Controller->CakeMemcache->get($key, $cas_token);
		$expected = $init_value;
		$this->assertEqual($result, $expected);

		$this->Controller->CakeMemcache->set($key, $init_value + 2);
		$expected = true;
		$this->assertEqual($result, $expected);

		$result = $this->Controller->CakeMemcache->cas($cas_token, $key, $init_value - 1);
		$expected = false;
		$this->assertEqual($result, $expected);

		$result = $this->Controller->CakeMemcache->get($key);
		$expected = $init_value + 2;
		$this->assertEqual($result, $expected);

		// Cleanup
		$this->Controller->CakeMemcache->delete($key);

	}

	function testAdd() {
		$key = "memcached_test";

		$init_value = 10;

		/* Test Add */
		$this->Controller->CakeMemcache->delete($key);
		$result = $this->Controller->CakeMemcache->add($key, $init_value);
		$expected = true;

		$this->assertEqual($result, $expected);

		$result = $this->Controller->CakeMemcache->get($key);
		$expected = $init_value;
		$this->assertEqual($result, $expected);
	}

	function testIncrement() {
		$key = "memcached_test";

		$init_value = 10;

		/* Test increment */
		$this->Controller->CakeMemcache->set($key, $init_value);
		$this->Controller->CakeMemcache->increment($key, 2);
		$result = $this->Controller->CakeMemcache->get($key);
		$expected = $init_value + 2;
		$this->assertEqual($result, $expected);
	}

	function testDecrement() {
		$key = "memcached_test";

		$init_value = 10;

		/* Test decrement */
		$this->Controller->CakeMemcache->set($key, $init_value);
		$this->Controller->CakeMemcache->decrement($key, 2);
		$result = $this->Controller->CakeMemcache->get($key);
		$expected = $init_value - 2;
		$this->assertEqual($result, $expected);
	}

	function testDelete() {
		$key = "memcached_test";

		$init_value = 10;

		/* Test delete */
		$this->Controller->CakeMemcache->delete($key);
		$result = $this->Controller->CakeMemcache->get($key);
		$expected = NULL;
		$this->assertEqual($result, $expected);
	}

}
