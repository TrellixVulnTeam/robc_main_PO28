<?php

namespace CI\Http;

abstract class Service
{

    const METHOD_POST = 'POST';
    const METHOD_GET  = 'GET';

    const RESPONSE_JSON = 'Accept: application/json';
    const RESPONSE_XML  = 'Accept: application/xml';

    protected $sUrl          = '';
    protected $aArgs         = array();
    protected $sMethod       = self::METHOD_POST;
    protected $nMaxCurlLoop  = 20;
    protected $sResponseType = self::RESPONSE_JSON;

    protected $sRawResult      = '';
    protected $aData           = array();
    protected $aCurlInfo       = array();
    protected $nTimeout        = 2;
    protected $nConnectTimeout = 1;
    protected $aHeaders        = array();

    public function getUrl()
    {
        return $this->sUrl;
    }

    public function setArg($sKey, $sValue)
    {
        $this->aArgs[(string)$sKey] = (string)$sValue;

        return $this;
    }

    public function getArgs()
    {
        return $this->aArgs;
    }

    public function getRawResult()
    {
        return $this->sRawResult;
    }

    public function getData()
    {
        return $this->aData;
    }

    protected function getCurlObject($sUrl)
    {
        return new \CI\Http\Curl($sUrl);
    }

    /**
     * query
     *
     * @return void
     */
    public function query()
    {
        $sUrl = $this->getUrl();

        if ($this->sMethod == self::METHOD_GET) {
            $sUrl = $sUrl . '?' . http_build_query($this->aArgs);
            $oCurl = $this->getCurlObject($sUrl);
        } else {
            $oCurl = $this->getCurlObject($sUrl);
            $oCurl->setOpt(CURLOPT_POST, 1);
            $oCurl->setOpt(CURLOPT_POSTFIELDS, http_build_query($this->aArgs));
        }

        $aHeaders = $this->getHeaders();
        if (! empty($aHeaders)) {
            $oCurl->setOpt(CURLOPT_HTTPHEADER, $aHeaders);
        }
        $oCurl->setOpt(CURLOPT_RETURNTRANSFER, 1);
        $oCurl->setOpt(CURLOPT_CONNECTTIMEOUT, $this->nConnectTimeout);
        $oCurl->setOpt(CURLOPT_TIMEOUT, $this->nTimeout);

        if ($oCurl->allowFollowLocationOpt()) {
            $oCurl->setOpt(CURLOPT_FOLLOWLOCATION, true);
            $oCurl->setOpt(CURLOPT_MAXREDIRS, $this->nMaxCurlLoop);
            $this->sRawResult = $oCurl->exec();
        } else {
            $this->sRawResult = $oCurl->followLocation($sUrl, $this->nMaxCurlLoop);
        }

        $this->aCurlInfo = $oCurl->getInfo();
        $oCurl->close();

        $this->postProcess();
        return $this;
    }

    /**
     * post-process query result
     *
     * @return void
     */
    protected function postProcess()
    {
        $this->aData = json_decode($this->sRawResult, true);
    }

    public function addHeader($sName, $sValue)
    {
        if (! empty($sName) && ! empty($sValue)) {
            $this->aHeaders[] = $sName . ': ' .$sValue;
        }
    }

    public function getHeaders()
    {
        $aHeaders = $this->aHeaders;

        if (! empty($this->sResponseType)) {
            $aHeaders[] = $this->sResponseType;
        }

        return $aHeaders;
    }

    public function __toString()
    {
        return 'The url is ' . $this->getUrl() .
            ' The parameters are ' .  http_build_query($this->aArgs) .
            ' the method is ' . $this->sMethod;
    }
}
