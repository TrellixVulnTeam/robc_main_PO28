<?php

namespace CI;

abstract class Engine
{
    abstract public function skipAccount($aAccount, $aWebsite);
    abstract public function isPenalizeAccount($aAccount, $nRank, $nDomainId);
    abstract public function getWeightModifier($aAccount, $nRank, $nAccountCount, $nDomainId, $bPaid = false);
    abstract protected function getFormulasObject();

    protected $oSetting;
    protected $oMetricsDaily;
    protected $oHub;
    protected $oAccount;
    protected $oFormulas;
    /**
     * @codeCoverageIgnore
     */
    protected function getSettingObject()
    {
        if (empty($this->oSetting)) {
            $this->oSetting = new \CI\Config\System\Setting();
        }

        return $this->oSetting;
    }
    /**
     * @codeCoverageIgnore
     */
    protected function getMetricsDailyObject()
    {
        if (empty($this->oMetricsDaily)) {
            $this->oMetricsDaily = new \CI\Stats\Website\Metrics\Daily();
        }

        return $this->oMetricsDaily;
    }

    /**
     * @codeCoverageIgnore
     */
    protected function getHubObject()
    {
        if (empty($this->oHub)) {
            $this->oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        }

        return $this->oHub;
    }

    /**
     * @codeCoverageIgnore
     */
    protected function getAccountObject()
    {
        if (empty($this->oAccount)) {
            $this->oAccount = new \CI\Model\Account();
        }

        return $this->oAccount;
    }

    public function getAccountsByPriority($nDomainBit)
    {
        $aReturn        = array();
        $oHub           = $this->getHubObject();
        $nDomainId      = $oHub->bitToId($nDomainBit);
        $oAccount       = $this->getAccountObject();
        $aAccounts      = $oAccount->getRunningByDomainBit($nDomainBit);
        $nAccountsCount = count($aAccounts);

        foreach ($aAccounts as $nIndex => $aAccount) {
            $nModifier = $this->getWeightModifier($aAccount, $nIndex, $nAccountsCount, $nDomainId);
            $aReturn[$aAccount['id']] = $nModifier;
        }

        arsort($aReturn);
        return $aReturn;
    }

    public function sortAccountsPriority(array $aAccounts, $nWebsite = 0) {
        $oSetting            = $this->getSettingObject();
        $nCreditsOff         = $oSetting->get('ACCOUNT_CREDITS_CUTOFF');
        $oYesterday          = \Carbon\Carbon::yesterday();
        $aReturn             = array();
        $aAccountsByIncoming = array();

        foreach ($aAccounts as $aAccount) {
            $skip = $this->skipAccount($aAccount, $nWebsite);
            if ($skip) {
                continue;
            }

            if (((int)$aAccount['credits']) > $nCreditsOff) {
                $aReturn[] = $aAccount;
            } else {
                $aAccountsByIncoming[] = $aAccount;
            }
        }

        $oMetricsDaily = $this->getMetricsDailyObject();

        foreach ($aAccountsByIncoming as $nKey => $aAccount) {
            $aStats = $oMetricsDaily->getFromDate($aAccount['id'], $oYesterday);
            $aAccountsByIncoming[$nKey]['incoming'] = $aStats['incoming'];
        }

        $aAccountsByIncoming = $this->orderByIncomingRate($aAccountsByIncoming);

        foreach($aAccountsByIncoming as $aAccount) {
            if ($aAccount['incoming'] > 0 || (isset($aAccount['featured']) && $aAccount['featured'])) {
                unset($aAccount['incoming']);
                $aReturn[] = $aAccount;
            }
        }

        return $aReturn;
    }

    public function orderByIncomingRate($aAccounts)
    {
        usort($aAccounts, array($this, "sortedMethodByIncomingRate"));
        return $aAccounts;
    }

    protected function sortedMethodByIncomingRate($a, $b)
    {
        if ($a['incoming'] == $b['incoming']) {
            return 0;
        }
        return ($a['incoming'] > $b['incoming']) ? -1 : 1;
    }
}