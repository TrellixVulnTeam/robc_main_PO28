<?php

namespace CI\Asset;

class Image extends \CI\Asset
{
    const URL_RELATIVE      = 1;
    const URL_FULL          = 2;
    const URL_CROP_RELATIVE = 3;
    const URL_CROP_FULL     = 4;

    protected $oManipulator;
    protected $oImageMigrate;

    public static $nCdnCounter = 0;

    protected function getCDNUrl()
    {
        if (CDN_URL_MAX <= self::$nCdnCounter) {
            self::$nCdnCounter = 0;
        }
        ++self::$nCdnCounter;
        return CDN_URL_PRE_NUM . self::$nCdnCounter . CDN_URL_POST_NUM;
    }

    public function migrate($nPageId, $sImage)
    {
        $mReturn = false;

        if (null != $nPageId) {
            $oMigrateImage = $this->getMigrateImageObject();
            $sImage = $oMigrateImage->migrateImageDependTunable($sImage, $nPageId);

            if (!empty($sImage)) {
                $mReturn = $sImage;
            }
        } else {
            $oArrayManipulator = $this->getArrayManipulatorObject($_SERVER);
            $sMessage = "Missing parameter page_id on the image:%s  server:%s url:%s query string:%s";
            error_log(
                sprintf(
                    $sMessage,
                    $sImage,
                    $oArrayManipulator->get('SERVER_NAME', 'empty server'),
                    $oArrayManipulator->get('ORIG_PATH_INFO', 'empty url'),
                    $oArrayManipulator->get('QUERY_STRING', 'empty query string')
                )
            );
        }

        return $mReturn;
    }

    public function getUrl($aData)
    {
        $sReturnUrl = '';
        try {
            $oArrayManipulator = $this->getArrayManipulatorObject($aData);
            $nType             = $oArrayManipulator->get('type');
            $sImage            = $oArrayManipulator->get('image');
            $nPageId           = $oArrayManipulator->get('page_id');

            if (null != $nType  && null != ($sImage)) {
                //Check if the image would be migrated
                $mMigrated = $this->migrate($nPageId, $sImage);
                if ($mMigrated !== false) {
                    $aData['image'] = $mMigrated;
                }

                switch ($nType) {
                    case self::URL_RELATIVE:
                        $sReturnUrl = $this->getRelativeUrl($aData);
                        break;

                    case self::URL_CROP_RELATIVE:
                        $sReturnUrl = $this->getCropRelativeUrl($aData);
                        break;

                    case self::URL_CROP_FULL:
                        $sReturnUrl = $this->getCropFullUrl($aData);
                        break;

                    case self::URL_FULL:
                    default:
                        $sReturnUrl = $this->getFullUrl($aData);
                        break;
                }
            }
        } catch(\Exception $oException) {
            error_log(
                __METHOD__ . 'something happen with ' . print_r($aData, true) . ' ' .
                $oException->getMessage() . ' trace ' .
                $oException->getTraceAsString()
            );
        }

        return $sReturnUrl;
    }

    protected function getArrayManipulatorObject($aData)
    {
        return new \CI\ArrayManipulator($aData);
    }

    protected function getRelativeUrl($aData)
    {
        $sReturn = '';
        $oArrayManipulator = $this->getArrayManipulatorObject($aData);
        $sImage = $oArrayManipulator->get('image');

        if (!empty($sImage)) {
            $sParameters = '';
            $aExtraParameters = $oArrayManipulator->get('extra_parameters');

            if (!empty($aExtraParameters)) {
                $sParameters = $this->getExtraParameters($aExtraParameters);
            }

            $sReturn = DS . IMAGES_URL . $sImage . $sParameters;
        }

        return $sReturn;
    }

    protected function getExtraParameters($aExtraParameters)
    {
        $sReturn = '';
        $aInvalidValues = array(false, null);
        $aExtraParameters = array_diff($aExtraParameters, $aInvalidValues);

        if (!empty($aExtraParameters)) {
            $sReturn = '?' . http_build_query($aExtraParameters);
        }

        return $sReturn;
    }

    protected function getFullUrl($aData)
    {
        return "http://"  . $this->getCDNUrl() . $this->getRelativeUrl($aData);
    }

    protected function getCropRelativeUrl($aData)
    {
        $aData['image'] = $this->getCropUrl($aData);
        return $this->getRelativeUrl($aData);
    }

    protected function getCropFullUrl($aData)
    {
        $aData['image'] = $this->getCropUrl($aData);
        return "http://"  . $this->getCDNUrl() . $this->getRelativeUrl($aData);
    }

    protected function getManipulatorObject()
    {
        if (empty($this->oManipulator)) {
            $this->oManipulator = new \CI\Image\Manipulator();
        }

        return $this->oManipulator;
    }

    protected function getMigrateImageObject()
    {
        if (empty($this->oImageMigrate)) {
            $this->oImageMigrate = new \CI\Migrate\Image();
        }

        return $this->oImageMigrate;
    }

    protected function getFileIOObject($sPath = '', $sContet = '')
    {
        return new \CI\IO\File($sPath, $sContet);
    }

    protected function getSystemObject()
    {
        return new \CI\IO\File\System();
    }

    protected function getCropUrl($aData)
    {
        $sReturn           = '';
        $oManipulator      = $this->getManipulatorObject();
        $oSystemFile       = $this->getSystemObject();
        $oArrayManipulator = $this->getArrayManipulatorObject($aData);
        $sImage            = $oArrayManipulator->get('image');
        $aPathName         = $this->getServerPathNames($sImage);
        $sExtraDirs        = '';
        $aExtraDirs        = $oArrayManipulator->get('extra_dirs');

        if (!empty($aExtraDirs)) {
            foreach ($aExtraDirs as $nKey => $sValue) {
                $sExtraDirs .= $sValue . DS;
            }
        }

        $nWidth  = $oArrayManipulator->get('width');
        $nHeight = $oArrayManipulator->get('height');

        $sImagePathWithCrop = $sExtraDirs . $nWidth . 'x' . $nHeight . '_' . $aPathName['basename'];

        $sPhysicalPathImageCrop = $oManipulator->getCacheImagesPath() . $sImagePathWithCrop;

        if ($oSystemFile->exists($sPhysicalPathImageCrop)) {
            $sReturn = 'upload/cache/' . $sImagePathWithCrop;
        } else {
            $sPhysicalPathOriginal = $oManipulator->getImagesPath() . $sImage;

            // If the image does not exist will be check on the new path
            if (!$oSystemFile->exists($sPhysicalPathOriginal)) {
                $sPhysicalPathOriginal = $oManipulator->getNewPath($sPhysicalPathOriginal);
            }

            if ($oSystemFile->exists($sPhysicalPathOriginal)) {
                $bResultCropImage = $oManipulator->cropThumbnailImage(
                    $sPhysicalPathOriginal,
                    $nWidth,
                    $nHeight,
                    $sPhysicalPathImageCrop
                );

                if ($bResultCropImage) {
                    $sReturn = 'upload/cache/' . $sImagePathWithCrop;
                }
            }
        }

        return $sReturn;
    }

    protected function getServerPathNames($sImg)
    {
        $aReturn = array();
        $sImg = str_replace('upload/', '', $sImg);
        $aReturn = pathinfo($sImg);

        return $aReturn;
    }
}
