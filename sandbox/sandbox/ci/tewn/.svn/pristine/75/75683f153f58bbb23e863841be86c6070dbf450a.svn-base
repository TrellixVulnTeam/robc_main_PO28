<?

class RuleComponent extends Object {

	function content_rating($displayer_rating, $page_rating) {
		if ($page_rating > $displayer_rating) {
			return 0;
		}

		return 1;
	}

	function in_categories($category, $categories)
	{
		return is_array($categories) && in_array($category, $categories);
	}

	function not_in_categories($category, $categories)
	{
		return is_array($categories) && !in_array($category, $categories);
	}

	public function is_valid_categories_rule($page_categories, $link_category)
    {
        $valid = false;
        foreach ($page_categories as $category) {
            if ($this->category($category, $link_category)) {
                $valid = true;
                break;
            }
        }
        return $valid;
    }

	function category($displayer_category, $page_categories) {
		global $global_strict_categories;

		if (!is_array($page_categories)) {
			$page_categories = array($page_categories);
		}

		if (in_array($displayer_category, $global_strict_categories)) {
			if (!in_array($displayer_category, $page_categories)) {
				return 0;
			}
		}

		// Deals
		if ($displayer_category == CATEGORY_DEALS) {
			$allowed_categories = array(
				CATEGORY_PARENTING,
				CATEGORY_FOOD,
				CATEGORY_TRAVEL,
				CATEGORY_DIY,
				CATEGORY_HOME,
				CATEGORY_DEALS,
			);
			if ($allowed_categories == array_diff($allowed_categories, $page_categories)) {
				return 0;
			}
		}

		return 1;
	}

	/**
	 * Validate if an entire intersect is valid for page
	 * @param  array $intersect An intersect
	 * @param  Page $page      Page that we are validating against
	 * @return boolean            0 for invalid, 1 for valid
	 */
	function intersect($intersect, $page) {
		if (!$this->category($intersect['category'], $page['Page']['category'])) {
			return 0;
		}

		if (!$this->content_rating($intersect['content_rating'], $page['Page']['content_rating'])) {
			return 0;
		}

		return 1;
	}
}

?>
