<?php

namespace Test\Model;

class Account extends \PHPUnit_Framework_TestCase
{
    public function testGetByDomainBitOrderBy()
    {
        $aExpected = array(
            array(
                'website_id' =>  '2094',
                'id'         =>  '2387',
                'credits'    =>  '2266595',
                'buying'     =>  '0',
                'paid'       =>  '0',
                'featured'   =>  '1'
            ),
            array(
                'website_id' =>  '309',
                'id'         =>  '319',
                'credits'    =>  '2212935',
                'buying'     =>  '0',
                'paid'       =>  '0',
                'featured'   =>  '0'
            ),
            array(
                'website_id' =>  '1578',
                'id'         =>  '1668',
                'credits'    =>  '2179430',
                'buying'     =>  '0',
                'paid'       =>  '0',
                'featured'   =>  '0'
            ),
            array(
                'website_id' =>  '13407',
                'id'         =>  '25115',
                'credits'    =>  '1937000',
                'buying'     => null,
                'paid'       => null,
                'featured'   => null
            ),
            array(
                'website_id' =>  '227',
                'id'         =>  '228',
                'credits'    =>  '1276875',
                'buying'     =>  '0',
                'paid'       =>  '0',
                'featured'   =>  '0'
            )
        );
        $oDatabase = $this->getMockBuilder('\CI\Database\App')
                          ->disableOriginalConstructor()
                          ->setMethods(array('query'))
                          ->getMock();
        $oDatabase->expects($this->any())
                  ->method('query')
                  ->will($this->returnValue($aExpected));
        $oAccount = $this->getMockBuilder('\CI\Model\Account')
                         ->setMethods(array('getDatabaseObject'))
                         ->getMock();
        $oAccount->expects($this->any())
                 ->method('getDatabaseObject')
                 ->will($this->returnValue($oDatabase));
        $nDomaindBit = 1;
        $aResult = $oAccount->getRunningByDomainBit($nDomaindBit);

        $this->assertEquals($aExpected, $aResult);
    }
}