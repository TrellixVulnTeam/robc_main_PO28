<?
/*
 * Watchdog component to track if something is alive
 *
 * To use call
 * $this->Watchdog->hearbeat($key); // to save a heartbeat
 * $this->Watchdog->is_alive($key, 60); // true if the last heartbeat was in the last 60 seconds
 * $this->Watchdog->stop($key); // will stop the watchdog on this key
 *
 */
class WatchdogComponent extends Object {
	protected $controller;
	protected $CakeMemcache;
	protected $last_heartbeat = 0;
	protected $safe_time = 60; // seconds

	public function startup(&$in_controller) {
		$this->controller = $in_controller;
	}

	public function __construct($safe_time = 60/*seconds*/)
	{
		App::import('Component', 'CakeMemcache');
		$this->CakeMemcache = new CakeMemcacheComponent();
		$this->safe_time    = $safe_time;
	}

	/**
	 * Saves a heartbeat for the given key
	 *
	 * @param string $key The key to set a heartbeat
	 *
	 * @return boolean
	 */
	public function heartbeat($key) {
		if (time() - $this->last_heartbeat > $this->safe_time) {
			$key = $this->key_heartbeat($key);
			$this->last_heartbeat = time();
			$rc = $this->CakeMemcache->set($key, $this->last_heartbeat);
		}
		return isset($rc) ? $rc : true;
	}

	/**
	 * Stops watchdog on a given key
	 *
	 * @param string $key The key to stop watchdog
	 */
	public function stop($key) {
		$key = $this->key_heartbeat($key);
		return $this->CakeMemcache->delete($key);
	}

	/**
	 * See if the key is alive given an amount of time
	 *
	 * @param string  $key  The key
	 * @param integer $time Seconds that this key is considered alive
	 *
	 * @return boolean
	 */
	public function is_alive($key, $time = 600/*seconds*/) {
		/* We get the last heartbeat and compare with the actual
		   time if the comparison is higher than the time to look
		   we notice that the key is not alive
		 */
		$key = $this->key_heartbeat($key);
		$this->last_heartbeat = $this->CakeMemcache->get($key);
		if ($this->last_heartbeat) {
			if (time() - $this->last_heartbeat < $time) {
				return true;
			}
		}
		return false;
	}

	public function stop_process($key) {
		$key = $this->key_stop($key);
		$this->CakeMemcache->set($key, time());
	}

	public function needs_to_stop($key) {
		$key = $this->key_stop($key);
		$needs = $this->CakeMemcache->get($key);
		if ($needs) {
			$this->CakeMemcache->delete($key);
			return true;
		}
		return false;
	}

	/**
	 * Gets the proper key to use
	 *
	 * @param string $key
	 *
	 * @return string
	 */
	private function key_heartbeat($key) {
		return 'watchdog:heartbeat:'.$key;
	}

	private function key_stop($key) {
		return 'watchdog:stoping:'.md5($key);
	}
}

?>