<?

function url_parse() {
	$url = $_SERVER['REQUEST_URI'];

	// strip off get vars and anchor tags
	if (strpos($url, '?'))
		$url = substr($url, 0, strpos($url, '?'));
	if (strpos($url, '#'))
		$url = substr($url, 0, strpos($url, '#'));

	//remove leading slash and possible trailing slash, store in
	//$url
	/*
	if (substr($url, 0, 1) == '/')
		$url = substr($url, 1);
	if (substr($url, -1) == '/')
		$url = substr($url, 0, -1);
	if ($url == '/')
		$url = '';
	$url = explode('/', $url);
        */

	return($url);
}

class AnalyticComponent extends Object {
	var $uses = array('Analytic');
	var $controller;

	function startup(&$in_controller) {
		App::import('Model','Analytic');
		$this->Analytic = new Analytic();

		$this->controller = $in_controller;
	}

	function get_by_category($category_id, $domain_bitfield = 1, $increment_count = 1) {
		if (isset($_GET['refer'])) {
			$ids = explode("-", $_GET['refer']);
			$entry = $this->Analytic->findById(intval($ids[0]));
			return $entry;
		}

		$conditions = array("category" => $category_id,
				    "visible" => true,
				    "domain_bitfield & ".$domain_bitfield);

		$entry = $this->Analytic->find("all", array("conditions" => $conditions,
							    "order" => "(weight * rand()) DESC"));
        $entry[0]['Analytic']['is_ab_testing'] = isset($entry[1]);

		if ($increment_count) {
			$this->Analytic->update_count($entry[0]['Analytic']['id']);
		}

		return $entry[0];
	}

	function count($id) {
		$this->Analytic->update_count($id);
	}

	function ctr($redirect = 1) {
		if (!isset($_GET['refer'])) {
			return;
		}

		$ids = explode("-", $_GET['refer']);
		foreach ($ids as $id) {
			$id = intval($id);

			$this->Analytic->update_ctr($id);
		}

		if ($redirect) {
			$this->controller->redirect(url_parse());
		}
	}

	function add($category, $unique_id) {
		$data['Analytic']['category'] = $category;
		$data['Analytic']['unique_id'] = $unique_id;

		$this->Analytic->save($data);
	}

	function update_weights($category_id, $domain_bit) {
		App::import('Component', 'Statistic');
		$this->Statistic =& new StatisticComponent(null);

		App::import('Model','Analytic');

		$entries = $this->Analytic->get_ctr_rank($category_id, $domain_bit);
		$count = count($entries);

		$weight_amt = 100;

		if (!$count || $count == 1) {
			return;
		}

		$top_num_ctr = $entries[0]['Analytic']['num_ctr'];
		$top_display = $entries[0]['Analytic']['num_display'];

		// Proportional statistics expects a number between 0-1.
		// If we are more than that, we need to adjust it down
		$top_ctr = $top_num_ctr / $top_display;
		if ($top_ctr > 1) {
			$adjust = ceil($top_ctr);
			$top_ctr = $top_ctr / $adjust;
		} else {
			$adjust = 0;
		}

		for ($i = 1; $i < $count; $i++) {
			$num_display = $entries[$i]['Analytic']['num_display'];
			$ctr = $entries[$i]['Analytic']['num_ctr'] / $num_display;
			if ($adjust) {
				$ctr = $ctr / $adjust;
			}

			$best = $this->Statistic->is_best_proportion($top_ctr, $ctr, $top_display, $num_display, 0.998);
			if (!$best || $num_display < 100) {
				// If it's not proven which is better, keep it
				$weight = $weight_amt;
			} else {
				// Remove them from elgibility
				$weight = 0;
				$this->Analytic->pause($entries[$i]['Analytic']['id']);
			}
			$this->Analytic->id = $entries[$i]['Analytic']['id'];
			$this->Analytic->saveField('weight', $weight);
		}
	}

	/* Old method.  We make remove completely if new method is awesome
	function update_weights($category_id, $domain_bit) {
		App::import('Component', 'Statistic');
		$this->Statistic =& new StatisticComponent(null);

		App::import('Model','Analytic');

		$entries = $this->Analytic->get_ctr_rank($category_id, $domain_bit);
		$count = count($entries);

		$weight_amt = 100;

		for ($i = 0; $i < $count; $i++) {
			$weight = $weight_amt - intval($weight_amt*($i/$count));
			$this->Analytic->id = $entries[$i]['Analytic']['id'];
			$this->Analytic->saveField('weight', $weight);
		}
	}
	*/
}

?>