<?php
/* SVN FILE: $Id$ */
/* HistoryCreditsController Test cases generated on: 2010-04-18 10:38:55 : 1271605135*/

class HistoryCreditsControllerTest extends CakeTestCase {
	var $HistoryCredits = null;
	var $fixtures = array(
		'app.history_credit', 'app.account', 'app.website', 'app.history_timer', 'app.stats_account'
	);

	function startTest() {
		App::import('Controller', 'HistoryCredits');
		$this->HistoryCredits = new HistoryCreditsController();
		$this->HistoryCredits->cache_on = 0;
		$this->HistoryCredits->constructClasses();
		$this->HistoryCredits->Component->initialize($this->Accounts);
		$this->HistoryCredits->autoRender = false;
	}

	function testHistoryCreditsControllerInstance() {
		$this->assertTrue(is_a($this->HistoryCredits, 'HistoryCreditsController'));
	}

	function testHistoryCreditsControllerStatsRange(){
		$website_id = 6;
		$datetime_start	= date("Y-m-d G:i:s", strtotime("2011-09-04 18:20:25"));
		$datetime_end	= date("Y-m-d G:i:s", strtotime("2011-09-06 18:20:25"));
		$results = $this->HistoryCredits->stats_range($website_id, $datetime_start, $datetime_end);
		$this->assertTrue(!empty($results));

		$expected = array('incoming'=>0, 'outgoing'=>0, 'credits'=>0);
		$this->assertEqual($expected, $results);
	}

	function testHistoryCreditControllerStatsDay(){
		$website_id = 6;
		$date	= date("Y-m-d G:i:s", strtotime("2011-09-06 18:20:25"));
		$results = $this->HistoryCredits->stats_day($website_id, $date);
		$this->assertTrue(!empty($results));

		$expected = array('incoming'=>0, 'outgoing'=>0, 'credits'=>0);
		$this->assertEqual($expected, $results);
	}

	function testHistoryCreditControllerReturnRateDay(){
		$website_id = 4;
		$date	= '2011-11-20'; //date("Y-m-d G:i:s", strtotime("yesterday noon"));
		$results = $this->HistoryCredits->return_rate_day($website_id, $date);

		if($results > 0){
			$this->assertTrue(!empty($results));
		}

		$expected = 150;
		$this->assertEqual($expected, $results);
	}

	function testHistoryCreditsControllerAggregateStatsRange(){
		$websites = array("0"=>array("Website"=>array("id"=>6, "account_id"=>6)));

		$datetime_start	= '2011-11-18 00:00:00'; //date("Y-m-d G:i:s", strtotime("2 days ago"));
		$datetime_end	= '2011-11-20 12:00:00'; //date("Y-m-d G:i:s", strtotime("yesterday noon"));
		$results = $this->HistoryCredits->aggregate_stats_range($websites, $datetime_start, $datetime_end);
		$this->assertTrue(!empty($results));

		$expected = array('incoming'=>10, 'outgoing'=>15);
		$this->assertEqual($expected, $results);
	}

	function endTest() {
		unset($this->HistoryCredits);
	}
}
?>