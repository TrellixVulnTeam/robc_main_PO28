<?php
/**
 * Category File
 *
 * PHP Version 5.3
 *
 * @author   Francisco Gonzalez <francisco.gonzalez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://www.crowdignite.com
 */

namespace CI;

/**
 * Category Class
 *
 * PHP Version 5.3
 *
 * @author   Francisco Gonzalez <francisco.gonzalez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://www.crowdignite.com
 */
class Category
{
    const ALL                = 0;
    const OFFBEAT            = 1;
    const SPORTS             = 2;
    const GAMING             = 3;
    const LIFESTYLE          = 4;
    const MEDIA              = 5;
    const CELEBRITIES        = 6;
    const TECHNOLOGY         = 7;
    const MENS_ENTERTAINMENT = 8;
    const BEAUTY             = 9;
    const FOOD               = 10;
    const PARENTING          = 11;
    const DEALS              = 12;
    const MUSIC              = 13;
    const TRAVEL             = 14;
    const CASUAL_GAMES       = 15;
    const PETS               = 16;
    const HOME               = 17;
    const HEALTH             = 18;
    const DIY                = 19;
    const OUTDOORS           = 20;
    const ANIME              = 21;
    const AUTOMOTIVE         = 22;
    const URBAN              = 23;
    const NEWS               = 24;

    private $_oDataSource;

    protected function getCategoryDataSource()
    {
        if (empty($this->_oDataSource)) {
            $this->_oDataSource = new Category\DataSource\MyArray();
        }

        return $this->_oDataSource;
    }

    public function getName($nId)
    {
        $oDataSource = $this->getCategoryDataSource();
        $aCategory = $oDataSource->getById($nId);
        return $aCategory !== null ? $aCategory['name'] : '';
    }

    public function getAllNames()
    {
        $aReturn = array();
        $oDataSource = $this->getCategoryDataSource();

        foreach ($oDataSource as $aCategory) {
             $aReturn[] = $aCategory;
        }

        return $aReturn;
    }

    public function getAllIdsByHub($nHubId)
    {
        $oDataSource = $this->getCategoryDataSource();
        $aCategories = $oDataSource->getByHub($nHubId);

        $aCategoryIds = array();
        foreach ($aCategories as $aCategory) {
            $aCategoryIds[] = $aCategory['id'];
        }

        sort($aCategoryIds);
        return $aCategoryIds;
    }

    public function translate($nCategoryId, $nHubId)
    {
        $nReturn        = self::ALL;
        $oDataSource    = $this->getCategoryDataSource();
        $aCategory      = $oDataSource->getById($nCategoryId);
        $aCategoriesHub = $oDataSource->getByHub($nHubId);

        $aCategoryIds = array();
        foreach ($aCategoriesHub as $aCategoryHub) {
            $aCategoryIds[] = $aCategoryHub['id'];
        }

        if (in_array($aCategory['id'], $aCategoryIds)) {
            $nReturn = $aCategory['id'];
        } else {
            // this validation its a ugly code to mantain
            // old behaviour...
            if (count($aCategoryIds) == 2) {
                sort($aCategoryIds);
                $nReturn = $aCategoryIds[1];
            } else {
                foreach ($aCategory['alternatives'] as $nId) {
                    if (in_array($nId, $aCategoryIds)) {
                        $nReturn = $nId;
                        break;
                    }
                }
            }
        }

        return $nReturn;
    }
}