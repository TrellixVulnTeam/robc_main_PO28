<?php

/**
 * This class is intended to extract some information from the chartbeat statistic service.
 * The ChartbeatComponent implements Chartbeat class (app/vendors/chartbeat.php) to get access to the Chartbeat API.
 *
 */
App::import('Vendor', 'Chartbeat');
class ChartbeatComponent{
	private $chartbeat;
	private $host, $apikey;

	/**
	 * Constructor of the class
	 *
	 * $host - Required.  The domain name to get the snapshot for on.
	 * $apikey - Required.  An api key generated here that gives access to this call.
	 */
	public function __construct($host = "crowdignite.com", $apikey = "fc4f446a221696f7c421f4318bfd888f") {
		$this->host = $host;
		$this->apikey = $apikey;

		$this->chartbeat = new chartbeat($host, $apikey);
	}

	/**
	 * To get the current people in the domain.
 	 *
 	 * @return Array An array with the data of the current people in the domain.
	 */
	public function get_current_people() {
		$results = array('hour' => date("G",time()));
		$live_quickstats = $this->chartbeat->live_quickstats();
		if ($live_quickstats) {
			$results['people'] = $live_quickstats;
		}
		return $results;
	}

	private function median($array) {
		rsort($array);
		$middle = round(count($array) / 2);
		$median = $array[$middle - 1];

		return $median;
	}

	/**
	 * To get the average of people in the domain per days & hours
	 *
	 * @param int $days_to_get number of days to calculate the average of people in the domain.
	 *
	 * @return Array an array that represents the average by hour of the last 30 days.
	 */
	private function get_average_visits_hourly($weeks_to_get = 3) {

		// we take another week because we dont want the point
		// for the actual week
		$days_to_get = ($weeks_to_get + 1) * 7;

		$traffic_series = $this->chartbeat->traffic_series($days_to_get);

		$day = 0; // Arrange data by days
		foreach ($traffic_series as $key => $traffic_point) {
			$traffic[$day][] = $traffic_point;
			if ($key > 0 && ($key+1)%24 == 0) {
				$day++;
			}
		}

		// Get the average of this hour the same day
		// the last $weeks_to_get Weeks
		$total = 0;
		for ($i = $days_to_get - 1; $i >= 0; $i--) {
			if (($i+1) % 7 == 0 && $i !== $days_to_get - 1) {
				$total += $traffic[$i][23];
			}
		}

		// return the average of the last $weeks_to_get weeks
		// on this hour on this day
		return $total / $weeks_to_get;
	}

	/**
	 * This action when website drops in number of visits, this calculates the percent.
	 * 1. returns the percent of drops in number of visits.
	 * 2. returns FALSE if there is not drop in number of visits.
	 *
	 * @return int Percent of drop down in number of visits
	 * @return int Return the percent of dropdown, 0 if there is no dropdown
	 */
	public function percent_of_drop_in_visits() {
		try {
			//1. Fetching Real-Time data: last 24 hours.
			$current = $this->get_current_people();

			if (!isset($current['people'])) {
				throw new exception("Something went wrong while calling the chartbeat API.\n");
			}

			//2. Fetching Historical data: last 30 days.
			$average = $this->get_average_visits_hourly();

			if($average <= 0){
				throw new Exception("Error Processing Chartbeat Request");
			}
		} catch (Exception $e) {
			echo $e->getFile() . ": line " . $e->getLine() . ": \n";
			echo $e->getMessage();

			// if an error ocurred, we have to the stop script.
			exit();
		}

		// percent of current traffic related to the average
		$percent = round(($current['people'] / $average) * 100);

		// if percent is less than 100% we have a drop down in number of visits
		if ($percent < 100) {
			//we have a drop down in numbers.
			$drop_down_percent = 100 - $percent;
		}else{
			// We don't have a drop down in numbers.
			$drop_down_percent = 0;
		}

		return $drop_down_percent;
	}
}