<?php

/**
 * Lecture and processing of the logs of widget impressions and clicks
 *
 * PHP Version 5.3
 *
 * @category CI
 * @package  CI\VowpalWabbit\Parser\Widget
 * @author   Julio Rodriguez <julio.rodriguez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 */

namespace CI\VowpalWabbit\Parser\Widget;
use CI\VowpalWabbit\Parser\Common;
use CI\VowpalWabbit\Parser\Builder;
use CI\File\Exception;
use CI\Date;

/**
 * Lecture and processing of the logs of widget impressions and clicks
 *
 * PHP Version 5.3
 *
 * @category CI
 * @package  CI\VowpalWabbit\Parser\Widget
 * @author   Julio Rodriguez <julio.rodriguez@evolvemediallc.com>
 * @license  Evolve Media LLC
 * @link     http://crowdignite.com
 */

class Consolidate extends Common
{
    const CONSOLIDATE_FILE       = 'vwConsWidget.';
    const TIME_RANGE             = 1800;
    const EMPTY_TITLE            = 'empty_title';
    const TOTAL_BUFFER_READ      = 65536;
    const TOTAL_TMP_FILE_LINES   = 39999;
    const EXPECTED_LINK_ELEMENTS = 24;

    private $_aModels     = array();
    private $_aFileBuffer = array();

    protected $oVowpalWabbitSet;
    protected $oWidgetClicks;
    protected $sPrefixName    = 'wimpression.log.';
    protected $sServerPattern = "/^ngx[\d].*ci./";
    protected $aKeys          = array(
        'unix_timestamp',
        'user_id',
        'link_id_1',
        'link_id_2',
        'link_id_3',
        'link_id_4',
        'link_id_5',
        'link_id_6',
        'link_id_7',
        'link_id_8',
        'link_id_9',
        'link_id_10',
        'link_id_11',
        'link_id_12',
        'link_id_13',
        'link_id_14',
        'link_id_15',
        'link_id_16',
        'link_id_17',
        'link_id_18',
        'link_id_19',
        'link_id_20',
        'link_id_21',
        'link_id_22',
        'link_id_23',
        'link_id_24',
        'link_title_1',
        'link_title_2',
        'link_title_3',
        'link_title_4',
        'link_title_5',
        'link_title_6',
        'link_title_7',
        'link_title_8',
        'link_title_9',
        'link_title_10',
        'link_title_11',
        'link_title_12',
        'link_title_13',
        'link_title_14',
        'link_title_15',
        'link_title_16',
        'link_title_17',
        'link_title_18',
        'link_title_19',
        'link_title_20',
        'link_title_21',
        'link_title_22',
        'link_title_23',
        'link_title_24',
        'from_pub_id',
        'to_pub_id_1',
        'to_pub_id_2',
        'to_pub_id_3',
        'to_pub_id_4',
        'to_pub_id_5',
        'to_pub_id_6',
        'to_pub_id_7',
        'to_pub_id_8',
        'to_pub_id_9',
        'to_pub_id_10',
        'to_pub_id_11',
        'to_pub_id_12',
        'to_pub_id_13',
        'to_pub_id_14',
        'to_pub_id_15',
        'to_pub_id_16',
        'to_pub_id_17',
        'to_pub_id_18',
        'to_pub_id_19',
        'to_pub_id_20',
        'to_pub_id_21',
        'to_pub_id_22',
        'to_pub_id_23',
        'to_pub_id_24',
        'context_link_count',
    );

    protected $aPages;
    protected $oLoggerFailed;
    private $_aHandlers;

    /**
     * Constructor of the class
     *
     * @param string $sDate date we will be process
     *
     * @return  Consolidate object.
     */
    public function __construct($sDate)
    {
        $this->sDate = $sDate;
        $this->oVowpalWabbitSet = new \CI\VowpalWabbit\Data\Set();
        $this->sDateFile = $this->increment30Minutes($sDate);

        if (empty($this->sErrorLogPath)) {
            $this->sErrorLogPath = parent::WIDGET_ERROR_LOG_PATH;
        }

        parent::__construct();
    }

    /**
     * Getting the clicks object
     *
     * @return Clicks object
     */
    protected function getClickObject()
    {
        if (empty($this->oWidgetClicks)) {
            $this->oWidgetClicks = Builder::getClick($this->sDate, Builder::PARSER_TYPE_WIDGET);
        }

        return $this->oWidgetClicks;
    }

    /**
     * Getting the Clicks
     *
     * @return array with tha data of the Clicks.
     */
    protected function getClicks()
    {
        $aReturn = array();

        try {
            $oWidgetClicks = $this->getClickObject();
            $aReturn = $oWidgetClicks->readLog();
        }catch(Exception $oFileNotFoundException){
            $oDate = new \CI\Date();
            $oLogger = $this->getLogger(self::TYPE_LOGGER_ERROR);
            $oLogger->log($oDate->now() . ' ' . __METHOD__ . ' We don\'t found Clicks ' . $oFileNotFoundException);
        }

        return $aReturn;
    }

    /**
     * Process the log
     *
     * @param integer $nLimit number of lines
     *
     * @return boolean TRUE if everithing did correct.
     * @throws Exception when the file can't be read
     */
    public function process($nLimit = null)
    {
        $bReturn = false;
        $sPhysicalFiles = $this->getAllLogs($this->sDateFile);
        $nTotalElementsExpected = count($this->aKeys);

        $oElementsWidgetClick = $this->getClicks();

        foreach ($sPhysicalFiles as $sFilePath) {
            $oHandle = @fopen($sFilePath, "r");

            if (false !== $oHandle) {
                $oLine = null;
                $nTotal = 0;

                while (!feof($oHandle)) {
                    $sLine = stream_get_line($oHandle, self::TOTAL_BUFFER_READ, PHP_EOL);

                    if (!empty($sLine)) {
                        $aLine = explode(',', $sLine);
                        $nTotalLine = count($aLine);

                        if ($nTotalLine > $nTotalElementsExpected) {
                            $oLogger = $this->getLogger(self::TYPE_LOGGER_FAILED);
                            $oLogger->log($sLine);
                            continue;
                        }

                        $aLine = $this->_cutOrFillData($aLine);

                        foreach ($aLine as $key => $value) {
                            $value = $this->sanitaze($value);
                            $aLine[$key] =$value;
                        }

                        $oLine = array_combine($this->aKeys, $aLine);
                        $oLine = $this->_removeFields($oLine);
                        $oLine = (object) $oLine;
                        $sWasClicked = 0;

                        if (!$this->isInTimeFrame($oLine->unix_timestamp, self::TIME_RANGE)) {
                            $oLogger = $this->getLogger(self::TYPE_LOGGER_FAILED);
                            $oLogger->log($sLine);
                            continue;
                        }

                        $nTotalElements = ((int) $oLine->context_link_count);

                        for ($nPos = 1;$nPos <= $nTotalElements; $nPos++) {

                            $oLine->link_id = $oLine->{'link_id_' . $nPos};
                            $sKeyClick = $oLine->user_id . '-' . $oLine->link_id;

                            if (isset($oElementsWidgetClick[$sKeyClick])) {
                                    $sWasClicked = 1;
                            }

                            $oLine->was_clicked = $sWasClicked;

                            if (empty($oLine->{'link_title_' . $nPos})) {
                                $oLine->link_title = self::EMPTY_TITLE;
                            } else {
                                $oLine->link_title = $oLine->{'link_title_' . $nPos};
                            }

                            $oLine->pub_id = $oLine->{'to_pub_id_' . $nPos};
                            $this->sentToFile($oLine);
                            $sWasClicked = 0;
                        }

                        $nTotal++;
                        $bReturn = true;

                        if (null !== $nLimit && $nTotal >= $nLimit) {
                            break;
                        }
                    }
                }

                $bBeforeFinish = true;
                $this->sentToFile(null, $bBeforeFinish);
                fclose($oHandle);
            }
        }


        if (!$bReturn) {
            $print = print_r($sPhysicalFiles, true);
            throw new Exception(Exception::FILE_NOT_FOUND, $print);
        } else {
            $this->cleanUp();
        }
        return $bReturn;
    }

    protected function cleanUp()
    {
        $this->moveDoneFiles($this->sDateFile);
        $oWidgetClicks = $this->getClickObject();
        $oWidgetClicks->cleanUp();
    }

    /**
     * Send one line of the consolidation info to a Vowpal wabbit file.
     *
     * @param stdClass $oLine with the consolidation info from widgets and clicks
     * @param boolean $bSendAllTheBuffer true if you will be send all the data on the buffer
     *
     * @return void.
     */
    protected function sentToFile($oLine, $bSendAllTheBuffer = false)
    {
        if (!$bSendAllTheBuffer) {
            $sLine = $this->_getVWStringFormat($oLine) . "\n";;
            $this->_aFileBuffer[] = $sLine;
        }

        if (isset($this->_aFileBuffer[self::TOTAL_TMP_FILE_LINES]) || $bSendAllTheBuffer) {

            $sPhysicalFile = $this->_getConsolidateFileName();
            file_put_contents($sPhysicalFile, $this->_aFileBuffer, FILE_APPEND);
            unset($this->_aFileBuffer);
        }

    }

    private function _getVWStringFormat($oLine)
    {
        $sReturn ='';

        $sPreLine = "%s ".
            "|a_impression_from pub_id_%s " .
            "|b_impression_to page_id_%s pub_id_%s " .
            "|d_title_to %s ";
        $sReturn = sprintf(
            $sPreLine,
            $oLine->was_clicked,
            $oLine->from_pub_id,
            $oLine->link_id,
            $oLine->pub_id,
            $oLine->link_title,
            $oLine->context_link_count
        );

        return $sReturn;
    }

    /**
     * Get the file name  and path  of the consolidate file.
     *
     * @return string all the path and file.
     */
    private function _getConsolidateFileName()
    {
        return $this->sPath. '/' . self::CONSOLIDATE_FILE . $this->sDate;
    }

    /**
     * Data to be cut or fill respect of the size of $this->aKeys
     *
     * @param array $aData to be cut or Fill
     *
     * @return array
     */
    private function _cutOrFillData(array $aData)
    {
        $nTotalItems = count($this->aKeys);
        $nTotalData = count($aData);

        if ($nTotalItems < $nTotalData) {
            $aData = array_slice($aData, 0, $nTotalItems);
        } else if ($nTotalData < $nTotalItems) {
            $nMissing = $nTotalItems - $nTotalData;
            $aTemp = array_fill(0, $nMissing, ' ');
            $aData  = array_merge($aData, $aTemp);
        }

        return $aData;
    }

    /**
     * Unset the Unnecessary for the process.
     *
     * @param array $aData info to be clean
     *
     * @return array
     */
    private function _removeFields(array $aData)
    {

        $nPos = ((int) $aData['context_link_count']) + 1;

        for ($nPos; $nPos <= self::EXPECTED_LINK_ELEMENTS; $nPos++) {
            unset($aData['link_id_' . $nPos]);
            unset($aData['link_title_' . $nPos]);
            unset($aData['to_pub_id_' . $nPos]);
        }

        return $aData;
    }
}