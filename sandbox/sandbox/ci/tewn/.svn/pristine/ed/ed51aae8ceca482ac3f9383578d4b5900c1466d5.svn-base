<?php

class CpcController extends AppController
{
    public $name = 'Cpc';
    public $helpers = array('Html', 'Ajax', 'Javascript', 'Convert');
    public $uses = array('User', 'Account', 'CPCCampaign', 'CPCCampaignPages', 'Page', 'Stats');
    public $components = array('RequestHandler', 'Mail', 'Date');

    public function beforeFilter() {
        // Pages controller
        App::import('Controller', 'Pages');
        global $Pages;
        $Pages = new PagesController;
        $Pages->constructClasses();

        // Get user
        $this->Session->activate();
        $user = $this->Session->read('User');
        $user = $this->User->findById($user['id']);
        if ($user && $this->User->isAdmin($user['User']['id'], $user['User']['admin'])) {
            $accounts = $this->Account->findAllByUserId($user['User']['id']);

            foreach($accounts as $account) {
                if (!$account['Account']['paid']) {
                    $this->set("paid", 0);
                    break;
                } else {
                    $this->set("paid", 1);
                }
            }
        } else {
            $this->saveUrl($_SERVER['REQUEST_URI'], $this->Session, $user);
            $this->redirect("/login");
        }

        // Check if accepted new terms and conditions
        if (!$user['User']['terms']) {
            $this->redirect("/users/terms");
        }

        $this->layout = 'backend2';
    }

    public function pages_by_website()
    {

        if (!empty($this->params['form']['website_id'])) {
            $limit  = isset($this->params['form']['limit']) ? $this->params['form']['limit'] : 10;
            $params = array(
                'conditions' => array(
                    'Page.status'     => PAGE_STATUS_APPROVED,
                    'Page.visible'    => 1,
                    'Page.website_id' => $this->params['form']['website_id']
                ),
                'fields' => array(
                    'Page.id',
                    'Page.title',
                    'Page.image',
                    'Page.website_id',
                    'Page.title_url',
                ),
                'limit' => $limit,
            );

            if (!empty($this->params['form']['search'])) {
                $params['conditions']['Page.title like'] = '%' . $this->params['form']['search'] . '%';
            }

            if (isset($this->params['form']['page'])) {
                $params['page'] = (int) $this->params['form']['page'];
            }

            $this->paginate = $params;
            $pages = $this->paginate('Page');

            $this->set("pages", $pages);
            $this->set("oImageAsset", new \CI\Asset\Image());

            $this->layout = 'ajax';
        }
    }

    public function pages_by_ids()
    {
        $response = array('status' => 'error');

        if (!empty($this->params['form']['pages_ids'])) {
            App::import('Component', 'Dictionary');
            $Dictionary = new DictionaryComponent();

            $params = array(
                'conditions' => array(
                    'Page.status'  => PAGE_STATUS_APPROVED,
                    'Page.visible' => 1,
                    'Page.id'      => $this->params['form']['pages_ids'],
                ),
                'fields' => array(
                    'Page.id',
                    'Page.title',
                    'Page.url',
                    'Page.content_rating',
                    'Page.category',
                ),
            );

            $pages = $this->Page->find('all', $params);
            $response = array();

            foreach ($pages as $page) {
                $response['pages'][] = array(
                    'id'             => $page['Page']['id'],
                    'title'          => $page['Page']['title'],
                    'url'            => $page['Page']['url'],
                    'content_rating' => $Dictionary->get_name(DictionaryComponent::TYPE_CONTENT, $page['Page']['content_rating']),
                    'category'       => $Dictionary->get_name(DictionaryComponent::TYPE_CATEGORY, $page['Page']['category']),
                );
            }

            $response['status'] = 'ok';
        } else {
            $response['msg'] = 'Missing parameters';
        }

        echo json_encode($response);
        exit;
    }

    public function reactivate_under_daily_budget(array $campaign)
    {
        $this->loadModel('CpcLandingPage');

        $day   = strtotime(date('Y-m-d 00:00:00', time()));
        $stats = $this->CpcLandingPage->get_cache($campaign['id'], $day);

        if (!$stats) {
            $stats = $this->CpcLandingPage->get_daily_by_id($campaign['id'], $day);
            $this->CpcLandingPage->set_cache($stats);
        }


        if ($campaign['status'] == CPC_CAMPAIGN_STATUS_OVER_DAILY_BUDGET &&  floatval($stats['spent']) < floatval($campaign['daily_budget'])) {
            $campaign['status'] = CPC_CAMPAIGN_STATUS_ACTIVE;
        }

        return $campaign;
    }

    public function edit_campaign()
    {
        Configure::write ( 'debug', 0 );
        $this->autoRender = false;
        $this->layout = 'ajax';
        $aResponse = array('status' => 'error', 'msg' => '');

        if (empty($this->params['form'])) {
            $aResponse['error'][] = array(
                'msg'  => 'Empty form',
            );
            echo json_encode($aResponse);
            exit;
        }

        $campaign = $this->params['form'];

        if (!empty($campaign['third_party'])) {
            unset($this->CPCCampaign->validate['daily_budget']);
            $campaign['daily_budget'] = 0;
        } else {
            $campaign = $this->reactivate_under_daily_budget($campaign);
        }

        if (empty($campaign['id']) || $this->CPCCampaign->findById($campaign['id']) == false || $this->CPCCampaign->save($campaign) == false) {
            $aResponse['error'][] = array(
                'msg'  => "Something happen when the {$campaign['id']} try to save"
            );

            foreach ($this->CPCCampaign->validationErrors as $sField => $sMessage) {
                $aResponse['error'][] = array(
                    'name' => $sField,
                    'msg'  => $sMessage
                );
            }

            echo json_encode($aResponse);
            exit;
        }

        $this->CPCCampaign->clear_cache($campaign['id']);

        $aResponse['status'] = 'ok';
        $aResponse['msg'] = 'Campaign saved';

        if (empty($campaign['third_party'])) {
            $aPages = array();
            $aPageIds = explode(',', $campaign['page_ids']);

            foreach ($aPageIds as $nPageId) {
                $aPages[] = array(
                    'campaign_id' => $campaign['id'],
                    'page_id'     => $nPageId
                );
            }

            $original_pages = $this->CPCCampaignPages->get_pages_for_analytics($campaign['id']);

            $this->CPCCampaignPages->deleteAll(
                array('campaign_id' => $campaign['id']),
                false
            );

            if (empty($aPages) || !$this->CPCCampaignPages->saveAll($aPages)) {
                $aResponse = array('status' => 'error', 'msg' => '');
                $aResponse['error'][] = array(
                    'msg'  => 'Failed to saved the pages for the campaign'
                );
            } else {
                $new_pages = array();
                foreach ($aPages as $aPage) {
                    $new_pages[] = $aPage['page_id'];
                }

                $pages_to_remove = array_diff($original_pages, $new_pages);

                try {
                    $oCPCObserver = new \CI\CPC\Observer();
                    $oCPCObserver->trigger(
                        \CI\CPC\Observer::CPC_CAMPAIGN_EVENT_EDIT,
                        array(
                            'website_id'      => $campaign['website_id'],
                            'pages_to_remove' => $pages_to_remove,
                            'pages'           => $new_pages,
                        )
                    );
                } catch(Exception $ex) {
                    error_log(__CLASS__ . '/' . __METHOD__ . ' - ' . $ex->getMessage());
                }
            }

        }

        echo json_encode($aResponse);
    }

    public function get_campaigns($website_id, $start_date, $status = CPC_CAMPAIGN_STATUS_ACTIVE)
    {
        $this->autoRender = false;
        Configure::write('debug', 0);
        header('Content-Type: application/json');

        $data  = array_values($this->get_campaigns_data(intval($website_id), $start_date, $status));
        $total = $this->calculate_cpc_total($data);

        echo json_encode(array('status' => 'ok', 'campaigns' => $data, 'total' => $total));
    }

    protected function export_campaigns_data($website_id, $start_date, $status, $excel)
    {
        $campaigns = $this->get_campaigns_data(intval($website_id), $start_date, $status);
        $row       = 1;

        $excel->setActiveSheetIndex(0);
        $sheet = $excel->getActiveSheet();
        $total = $this->calculate_cpc_total($campaigns);

        foreach ($campaigns as $campaign) {
            $campaign_start_date = date('d/m/Y H:iA', strtotime($campaign['start_date']));
            $campaign_end_date   = date('d/m/Y H:iA', strtotime($campaign['end_date']));
            $sheet->setCellValue("A{$row}", $campaign['title']);
            $sheet->setCellValue("B{$row}", 'Flight: '.$campaign_start_date.' - '.$campaign_end_date);
            $sheet->setCellValue("F{$row}", 'CPC: $'.number_format($campaign['click_budget'], 2));
            $sheet->setCellValue("G{$row}", 'Budget: $'.number_format($campaign['daily_budget'], 2));
            $sheet->getStyle("A{$row}")->getFont()->setBold(true);
            $sheet->mergeCells("B{$row}:E{$row}");
            $row++;
            $sheet->setCellValue("A{$row}", 'Pages');
            $sheet->setCellValue("B{$row}", 'Widget Imps');
            $sheet->setCellValue("C{$row}", 'Widget Clicks');
            $sheet->setCellValue("D{$row}", 'Widget CTR');
            $sheet->setCellValue("E{$row}", 'LP Imps');
            $sheet->setCellValue("F{$row}", 'LP Clicks');
            $sheet->setCellValue("G{$row}", 'LP CTR');
            $sheet->setCellValue("H{$row}", 'Spent');
            $sheet->getStyle("A{$row}:H{$row}")->getFont()->setBold(true);
            $row++;
            foreach ($campaign['pages'] as $page) {
                $sheet->setCellValue("A{$row}", $page['title']);
                $sheet->setCellValue("B{$row}", '--');
                $sheet->setCellValue("C{$row}", '--');
                $sheet->setCellValue("D{$row}", 0);
                $sheet->setCellValue("E{$row}", $page['lp_impressions']);
                $sheet->setCellValue("F{$row}", $page['lp_clicks']);
                $sheet->setCellValue("G{$row}", $page['lp_ctr']/100);
                $sheet->setCellValue("H{$row}", $page['spent']);
                $sheet->getStyle("H{$row}")->getNumberFormat()->setFormatCode('$#,##0.00');
                $sheet->getStyle("G{$row}")->getNumberFormat()->setFormatCode('0.00%');
                $sheet->getStyle("D{$row}")->getNumberFormat()->setFormatCode('0.00%');
                $row++;
            }
            $sheet->setCellValue("A{$row}", 'Subtotal');
            $sheet->setCellValue("B{$row}", '--');
            $sheet->setCellValue("C{$row}", '--');
            $sheet->setCellValue("D{$row}", 0);
            $sheet->setCellValue("E{$row}", $campaign['subtotal']['lp_impressions']);
            $sheet->setCellValue("F{$row}", $campaign['subtotal']['lp_clicks']);
            $sheet->setCellValue("G{$row}", $campaign['subtotal']['lp_ctr']/100);
            $sheet->setCellValue("H{$row}", $campaign['subtotal']['spent']);
            $sheet->getStyle("H{$row}")->getNumberFormat()->setFormatCode('$#,##0.00');
            $sheet->getStyle("G{$row}")->getNumberFormat()->setFormatCode('0.00%');
            $sheet->getStyle("D{$row}")->getNumberFormat()->setFormatCode('0.00%');
            $row += 2;
        }

        $sheet->setCellValue("A{$row}", 'Pages');
        $sheet->setCellValue("B{$row}", 'Widget Imps');
        $sheet->setCellValue("C{$row}", 'Widget Clicks');
        $sheet->setCellValue("D{$row}", 'Widget CTR');
        $sheet->setCellValue("E{$row}", 'LP Imps');
        $sheet->setCellValue("F{$row}", 'LP Clicks');
        $sheet->setCellValue("G{$row}", 'LP CTR');
        $sheet->setCellValue("H{$row}", 'Spent');
        $sheet->getStyle("A{$row}:H{$row}")->getFont()->setBold(true);
        $row++;
        $sheet->setCellValue("A{$row}", 'Total');
        $sheet->setCellValue("B{$row}", '--');
        $sheet->setCellValue("C{$row}", '--');
        $sheet->setCellValue("D{$row}", 0);
        $sheet->setCellValue("E{$row}", $total['lp_impressions']);
        $sheet->setCellValue("F{$row}", $total['lp_clicks']);
        $sheet->setCellValue("G{$row}", $total['lp_ctr']/100);
        $sheet->setCellValue("H{$row}", $total['spent']);
        $sheet->getStyle("H{$row}")->getNumberFormat()->setFormatCode('$#,##0.00');
        $sheet->getStyle("G{$row}")->getNumberFormat()->setFormatCode('0.00%');
        $sheet->getStyle("D{$row}")->getNumberFormat()->setFormatCode('0.00%');

        $sheet->getColumnDimension('A')->setAutoSize(true);
        $sheet->getColumnDimension('B')->setAutoSize(true);
        $sheet->getColumnDimension('C')->setAutoSize(true);
        $sheet->getColumnDimension('D')->setAutoSize(true);
        $sheet->getColumnDimension('E')->setAutoSize(true);
        $sheet->getColumnDimension('F')->setAutoSize(true);
        $sheet->getColumnDimension('G')->setAutoSize(true);
        $excel->getActiveSheet()->setTitle('Report');

        return $excel;
    }

    protected function export_all_campagins_data_by($website_id, $start_date, $status, $show_by, $excel)
    {
        $excel->setActiveSheetIndex(0);

        $row       = 1;
        $sheet     = $excel->getActiveSheet();
        $all_pages = 99999;
        $page      = 1;
        $data      = $this->requestAction("/cpc/action/get_all_campagins_data_by/{$show_by}/{$website_id}/{$status}/{$start_date}/{$page}/{$all_pages}");
        $data      = json_decode($data, true);

        if (!empty($data['status']) && $data['status'] == 'ok' && !empty($data['data']['report'])) {
            $totals = $data['data']['footer'];
            $data   = $data['data']['report'];

        }

        $sheet->setCellValue("A{$row}", 'Country');
        $sheet->setCellValue("B{$row}", 'Widget Imps');
        $sheet->setCellValue("C{$row}", 'Widget Clicks');
        $sheet->setCellValue("D{$row}", 'Widget CTR');
        $sheet->setCellValue("E{$row}", 'LP Imps');
        $sheet->setCellValue("F{$row}", 'LP Clicks');
        $sheet->setCellValue("G{$row}", 'LP CTR');
        $sheet->setCellValue("H{$row}", 'Avg CPC');
        $sheet->setCellValue("I{$row}", 'Spent');
        $sheet->getStyle("A{$row}:I{$row}")->getFont()->setBold(true);

        foreach ($data as $info) {
            $row++;
            $sheet->setCellValue("A{$row}", $info['country']);
            $sheet->setCellValue("B{$row}", $info['widget_imps']);
            $sheet->setCellValue("C{$row}", $info['widget_imps']);
            $sheet->setCellValue("D{$row}", $info['widget_ctr']);
            $sheet->setCellValue("E{$row}", $info['lp_imps']);
            $sheet->setCellValue("F{$row}", $info['lp_clicks']);
            $sheet->setCellValue("G{$row}", "=(F{$row}/E{$row})");
            $sheet->setCellValue("H{$row}", $info['avg_cpc']);
            $sheet->setCellValue("I{$row}", $info['spent']);
            $sheet->getStyle("I{$row}")->getNumberFormat()->setFormatCode('$#,##0.00');
            $sheet->getStyle("H{$row}")->getNumberFormat()->setFormatCode('$#,##0.00');
            $sheet->getStyle("G{$row}")->getNumberFormat()->setFormatCode('0.00%');
        }
        $prev_total_row = $row;
        $row++;

        $sheet->setCellValue("A{$row}", $totals['title']);
        $sheet->setCellValue("B{$row}", $totals['widget_imps']);
        $sheet->setCellValue("C{$row}", $totals['widget_imps']);
        $sheet->setCellValue("D{$row}", $totals['widget_ctr']);
        $sheet->setCellValue("E{$row}", "=SUM(E2:E{$prev_total_row})");
        $sheet->setCellValue("F{$row}", "=SUM(F2:F{$prev_total_row})");
        $sheet->setCellValue("G{$row}", "=(F{$row}/E{$row})");
        $sheet->setCellValue("H{$row}", "=SUM(H2:H{$prev_total_row})");
        $sheet->setCellValue("I{$row}", "=SUM(I2:I{$prev_total_row})");

        $sheet->getStyle("I{$row}")->getNumberFormat()->setFormatCode('$#,##0.00');
        $sheet->getStyle("H{$row}")->getNumberFormat()->setFormatCode('$#,##0.00');
        $sheet->getStyle("G{$row}")->getNumberFormat()->setFormatCode('0.00%');

        $sheet->getColumnDimension('A')->setAutoSize(true);
        $sheet->getColumnDimension('B')->setAutoSize(true);
        $sheet->getColumnDimension('C')->setAutoSize(true);
        $sheet->getColumnDimension('D')->setAutoSize(true);
        $sheet->getColumnDimension('E')->setAutoSize(true);
        $sheet->getColumnDimension('F')->setAutoSize(true);
        $sheet->getColumnDimension('G')->setAutoSize(true);
        $sheet->getColumnDimension('H')->setAutoSize(true);
        $sheet->getColumnDimension('I')->setAutoSize(true);
        $excel->getActiveSheet()->setTitle('Report');

        return $excel;
    }

    public function export($website_id, $start_date, $status = CPC_CAMPAIGN_STATUS_ACTIVE, $show_by = CPC_FILTER_VIEW_BY_CAMPAIGNS)
    {
        $this->autoRender = false;
        Configure::write('debug', 0);
        App::import('Vendor', 'phpexcel', array('file' => 'PHPExcel.php'));
        $excel = new PHPExcel();

        $excel->getProperties()->setCreator("Crowdignite");
        $excel->getProperties()->setTitle("CPC Report");
        $excel->getProperties()->setSubject("CPC Campaigns Report");
        $excel->getDefaultStyle()->getFont()->setName('Arial')->setSize(12);

        if ($show_by == CPC_FILTER_VIEW_BY_CAMPAIGNS) {
            $excel = $this->export_campaigns_data($website_id, $start_date, $status, $excel);
        } else {
            $excel = $this->export_all_campagins_data_by($website_id, $start_date, $status, $show_by, $excel);
        }

        $excel->setActiveSheetIndex(0);
        $date_format = date('Y-m-d');
        // Redirect output to a client’s web browser (Excel5)
        header('Content-Type: application/vnd.ms-excel');
        header("Content-Disposition: attachment;filename=\"{$date_format}_cpc_website_{$website_id}.xls\"");
        header('Cache-Control: max-age=0');

        $objWriter = PHPExcel_IOFactory::createWriter($excel, 'Excel5');
        $objWriter->save('php://output');
    }

    public function change_campaign_status()
    {
        $this->autoRender = false;
        Configure::write( 'debug', 0 );
        $campaign_id = 0;

        if (isset($this->params['form']['campaign_id'])) {
            $campaign_id = $this->params['form']['campaign_id'];
        }

        $status = 0;

        if (isset($this->params['form']['status'])){
            $status = $this->params['form']['status'];
        }

        $answer = array('status' => 'error');

        if (!empty($campaign_id)) {
            $campaign = $this->CPCCampaign->findById($campaign_id);
            if (!empty($campaign) && $campaign['CPCCampaign']['status'] != CPC_CAMPAIGN_STATUS_EXPIRED) {
                $this->CPCCampaign->id = $campaign_id;
                if ($this->CPCCampaign->saveField('status', $status)) {
                    $answer = array('status' => 'ok');

                    try {
                        $oCPCObserver = new \CI\CPC\Observer();
                        $oCPCObserver->trigger(
                            \CI\CPC\Observer::CPC_CAMPAIGN_EVENT_CHANGE_STATUS,
                            array(
                                'status'      => $status,
                                'campaign_id' => $campaign['CPCCampaign']['id'],
                            )
                        );
                    } catch(Exception $ex) {
                        error_log(__CLASS__ . '/' . __METHOD__ . ' - ' . $ex->getMessage());
                    }
                }
            }
        }

        $this->layout = 'ajax';
        echo json_encode($answer);
    }

    public function get_campaigns_data($website_id, $start_date, $status = CPC_CAMPAIGN_STATUS_ACTIVE)
    {
        $date = new CI\Date();
        $start_date = $date->format($start_date);

        $status_query = "AND campaign.status = {$status}";

        if ($status == CPC_CAMPAIGN_STATUS_ALL) {
            $status_query = "ORDER BY campaign.status ASC";
        }

        if ($status == CPC_CAMPAIGN_STATUS_INACTIVE) {
            $status = implode(',', array(CPC_CAMPAIGN_STATUS_INACTIVE, CPC_CAMPAIGN_STATUS_EXPIRED));
            $status_query = "AND campaign.status IN ({$status})";
        }

        if ($status == CPC_CAMPAIGN_STATUS_ACTIVE) {
            $status = implode(',', array(CPC_CAMPAIGN_STATUS_ACTIVE, CPC_CAMPAIGN_STATUS_OVER_DAILY_BUDGET));
            $status_query = "AND campaign.status IN ({$status})";
        }

        $campaign_pages = $this->CPCCampaign->query_read(
            "SELECT campaign.id, campaign.title, campaign.status, campaign.start_date, campaign.end_date,
                 campaign.daily_budget, campaign.click_budget, pages.id, pages.title, pages.url, pages.category,
                 pages.content_rating
             FROM cpc_campaign AS campaign
                 INNER JOIN cpc_campaign_pages AS campaign_pages ON campaign_pages.campaign_id = campaign.id
                 INNER JOIN pages ON campaign_pages.page_id = pages.id
             WHERE
                 campaign.website_id = {$website_id} AND campaign.end_date >= '{$start_date}' {$status_query}"
        );

        $data = array();
        if (!empty($campaign_pages)) {
            App::import('Helper', 'Convert');
            $Convert = new ConvertHelper();
            $pages = $this->get_pages_stats(Set::classicExtract($campaign_pages, '{n}.campaign.id'));

            foreach ($campaign_pages as $campaign_page) {
                $campaign_id = $campaign_page['campaign']['id'];
                $page_id = $campaign_page['pages']['id'];
                if (!isset($data[$campaign_id])) {
                    $data[$campaign_id] = $campaign_page['campaign'];
                    $data[$campaign_id]['pages'] = array();
                }

                $widget_clicks            = 0;
                $widget_impressions       = 0;
                $landing_page_clicks      = empty($pages[$campaign_id][$page_id]['landing_page']['clicks']) ? 0 : $pages[$campaign_id][$page_id]['landing_page']['clicks'];
                $landing_page_impressions = empty($pages[$campaign_id][$page_id]['landing_page']['impressions']) ? 0 : $pages[$campaign_id][$page_id]['landing_page']['impressions'];
                $landing_page_spent       = empty($pages[$campaign_id][$page_id]['landing_page']['spent']) ? 0 : $pages[$campaign_id][$page_id]['landing_page']['spent'];

                $widget_ctr               = 0;
                $landing_page_ctr         = $landing_page_impressions > 0 ? $landing_page_clicks / $landing_page_impressions * 100 : 0;

                $page = array(
                    'id'                 => $page_id,
                    'title'              => $campaign_page['pages']['title'],
                    'url'                => $campaign_page['pages']['url'],
                    'category'           => $Convert->category($campaign_page['pages']['category']),
                    'content_rating'     => $Convert->content_rating($campaign_page['pages']['content_rating']),
                    'widget_clicks'      => '--',
                    'widget_impressions' => '--',
                    'widget_ctr'         => 0,
                    'lp_clicks'          => $landing_page_clicks,
                    'lp_impressions'     => $landing_page_impressions,
                    'lp_ctr'             => $landing_page_ctr,
                    'spent'              => $landing_page_spent,
                );

                $data[$campaign_id]['pages'][] = $page;

                if (empty($data[$campaign_id]['subtotal'])) {
                    $data[$campaign_id]['subtotal'] = $this->get_empty_cpc_stats();
                }

                $data[$campaign_id]['subtotal'] = $this->calculate_cpc_stats($data[$campaign_id]['subtotal'], $page);
            }
        }

        return $data;
    }

    public function calculate_cpc_total(array $campaigns)
    {
        $total = $this->get_empty_cpc_stats();
        $total['daily_budget'] = 0;
        $total['click_budget'] = 0;

        foreach ($campaigns as $campaign) {
            $total['daily_budget'] += $campaign['daily_budget'];
            $total['click_budget'] += $campaign['click_budget'];

            $total = $this->calculate_cpc_stats($total, $campaign['subtotal']);
        }

        return $total;
    }

    public function calculate_cpc_stats(array $current_stat, array $data)
    {
        $current_stat['lp_clicks']      += $data['lp_clicks'];
        $current_stat['lp_impressions'] += $data['lp_impressions'];
        $current_stat['spent']          += $data['spent'];

        if (0 != $current_stat['lp_impressions']) {
            $current_stat['lp_ctr'] = ($current_stat['lp_clicks'] / $current_stat['lp_impressions']) * 100;
        }

        return $current_stat;

    }

    public function get_empty_cpc_stats()
    {
        return array(
            'widget_clicks'      => '--',
            'widget_impressions' => '--',
            'widget_ctr'         => 0,
            'lp_clicks'          => 0,
            'lp_impressions'     => 0,
            'lp_ctr'             => 0,
            'spent'              => 0,
        );
    }

    protected function get_pages_stats(array $campaign_ids)
    {
        $this->loadModel('CpcLandingPage');
        $pages = $this->CpcLandingPage->find(
            'all',
            array(
                'fields' => array(
                    'campaign_id',
                    'page_id',
                    'cpc_avg',
                    'SUM(impressions) AS impressions',
                    'SUM(clicks) AS clicks',
                    'SUM(spent) AS spent',
                ),
                'group' => array(
                    'CpcLandingPage.campaign_id',
                    'CpcLandingPage.page_id',
                ),
                'conditions' => array(
                    'campaign_id' => $campaign_ids,
                ),
            )
        );

        $stats = array();
        foreach ($pages as $page) {
            $campaign_id = $page['CpcLandingPage']['campaign_id'];
            $id          = $page['CpcLandingPage']['page_id'];
            $page        = $page[0];

            if (empty($stats[$campaign_id][$id])) {
                $stats[$campaign_id][$id] = array(
                    'widget' => array(
                        'clicks'      => 0,
                        'impressions' => 0,
                        'spent'       => 0,
                    ),
                    'landing_page' => array(
                        'clicks'      => 0,
                        'impressions' => 0,
                        'spent'       => 0,
                    ),
                );
            }
            $stats[$campaign_id][$id]['landing_page']['clicks']      += $page['clicks'];
            $stats[$campaign_id][$id]['landing_page']['impressions'] += $page['impressions'];
            $stats[$campaign_id][$id]['landing_page']['spent']       += $page['spent'];
        }

        return $stats;
    }
}
