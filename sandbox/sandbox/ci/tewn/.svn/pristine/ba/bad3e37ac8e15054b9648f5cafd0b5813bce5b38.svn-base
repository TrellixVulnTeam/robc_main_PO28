<?php

App::import('Controller', 'Actions');
use CI\Article;

class CustomLandingPageActionsController extends ActionsController
{
    public $uses = array('CustomLandingPage', 'Setting', 'Page', 'StatsArticle');
    public $components = array('Intersects');
    public $helpers = array("Convert", 'WordsNumber');

    const DATE_FORMAT = 'Y-m-d H:i:s';

    protected $status_text = array();
    protected $allowed_sex = array(
        DEMOGRAPHIC_SEX_FEMALE,
        DEMOGRAPHIC_SEX_MALE,
        DEMOGRAPHIC_SEX_BOTH
    );
    protected $permissions = array(
        'add' => User::ADMIN,
        'edit' => User::ADMIN,
        'delete' => User::ADMIN,
        'expire' => User::ADMIN,
        'get_list' => User::ADMIN,
    );
    protected $response;

    public function beforeFilter()
    {
        $this->status_text = array(
            Article::STATUS_ACTIVE => 'Active',
            Article::STATUS_PAUSED => 'Paused'
        );
        $this->response = new \CI\Api\Response();

        parent::beforeFilter();
    }

    public function add()
    {
        App::import('Vendor', 'Carbon', array('file' => 'Carbon.php'));
        $params = new \CI\ArrayManipulator($this->params['url']);

        $this->response->setMessage('Adding one custom landing page');
        $array_filter = new \CI\Filter\EmptyArray();

        unset($this->CustomLandingPage->validate['id']);

        try {
            $image             = $params->get('image');
            $image_manipulator = new \CI\Image\Manipulator();
            $coordinates       = $params->get('coordinates', array());
            $image             = $image_manipulator->processImage($image, $coordinates);
        } catch(Exception $e) {
            $image = null;
            $this->response->addError($e->getMessage());
        }

        $save_data['body_text']      = $params->get('body_text');
        $save_data['website_id']     = $params->get('website_id');
        $save_data['domain_primary'] = $params->get('domain_primary');
        $save_data['image']          = $image;
        $save_data['start_at']       = $params->get('start_at');
        $save_data['end_at']         = $params->get('end_at');
        $save_data['readmore_link']  = $params->get('readmore_link');
        $save_data['headline']       = $params->get('headline');
        $save_data['sex']            = $params->get('sex');
        $save_data['content_rating'] = $params->get('content_rating');
        $save_data['category']       = $params->get('category');
        $save_data['created_at']     = \Carbon\Carbon::now()->format(self::DATE_FORMAT);
        $save_data['status']         = Article::STATUS_ACTIVE;
        $save_data                   = $array_filter->filter($save_data);
        $save_data                   = $this->sanitize($save_data);

        if ($this->validate($save_data) === true && $this->CustomLandingPage->save($save_data) !== false) {
            $this->response->addData('id', $this->CustomLandingPage->getId());
        } else {
            $this->response->addErrors($this->CustomLandingPage->validationErrors);
        }

        return $this->response->get();
    }

    public function edit($data = null)
    {
        $this->response->setMessage('Editing');
        $params = array();

        if ($data !== null) {
            $params = new \CI\ArrayManipulator($data);
        } else {
            $params = new \CI\ArrayManipulator($this->params['url']);
        }
        $array_filter = new \CI\Filter\EmptyArray();

        try {
            $image             = $params->get('image');
            $image_manipulator = new \CI\Image\Manipulator();
            $coordinates       = $params->get('coordinates', array());
            $image             = $image_manipulator->processImage($image, $coordinates);
        } catch(Exception $e) {
            $image = null;
            $this->response->addError($e->getMessage());
        }

        $save_data['id']             = $params->get('id');
        $save_data['domain_primary'] = $params->get('domain_primary');
        $save_data['website_id']     = $params->get('website_id');
        $save_data['image']          = $image;
        $save_data['body_text']      = $params->get('body_text');
        $save_data['created_at']     = $params->get('created_at');
        $save_data['start_at']       = $params->get('start_at');
        $save_data['end_at']         = $params->get('end_at');
        $save_data['status']         = $params->get('status');
        $save_data['readmore_link']  = $params->get('readmore_link');
        $save_data['headline']       = $params->get('headline');
        $save_data['sex']            = $params->get('sex');
        $save_data['content_rating'] = $params->get('content_rating');
        $save_data['category']       = $params->get('category');
        $save_data_pre               = $array_filter->filter($save_data);

        foreach (array_diff_key($save_data, $save_data_pre) as $key => $value) {
            unset($this->CustomLandingPage->validate[$key]);
        }

        $save_data = $save_data_pre;
        $save_data = $this->sanitize($save_data);
        $check_if_item_exists = true;

        if ($this->validate($save_data, $check_if_item_exists) === true && $this->CustomLandingPage->save($save_data) !== false && count($save_data) > 1) {
            $this->response->addData('id', $this->CustomLandingPage->getId());
        } else {
            $this->response->addErrors($this->CustomLandingPage->validationErrors);
        }

        return $this->response->get();
    }

    public function validate($data, $check_exist = false)
    {
        $return = true;

        $data = new \CI\ArrayManipulator($data);

        if ($check_exist === true && (is_null($data->get('id')) || $this->CustomLandingPage->findById($data->get('id')) == false)) {
            $this->response->addError('id', 'The item does not exist');
            $return = false;
        }

        $hub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());
        $hub_ids = $hub->getAllIds();

        if (!is_null($data->get('domain_primary')) && in_array($data->get('domain_primary'), $hub_ids) !== true) {
            $this->response->addError('domain_primary', 'The domain does not exist');
            $return = false;
        }

        if (!is_null($data->get('created_at')) && !is_int($data->get('created_at'))){
            $this->response->addError('created_at', 'Expecting the next format ' . self::DATE_FORMAT);
            $return = false;
        }

        if (!is_null($data->get('start_at')) && !is_int($data->get('start_at'))){
            $this->response->addError('start_at', 'Expecting the next format ' . self::DATE_FORMAT);
            $return = false;
        }

        if (!is_null($data->get('end_at')) && !is_int($data->get('end_at'))){
            $this->response->addError('end_at', 'Expecting the next format ' . self::DATE_FORMAT);
            $return = false;
        }

        if (!is_null($data->get('status')) && empty($this->status_text[$data->get('status')])) {
            $this->response->addError('status', 'The status does not exist');
            $return = false;
        }

        if (!is_null($data->get('readmore_link')) && filter_var($data->get('readmore_link'), FILTER_VALIDATE_URL) == false) {
            $this->response->addError('readmore_link', 'Link is not valid');
            $return = false;
        }

        if(!is_null($data->get('image')) && file_exists(ROOT . DS . APP_DIR . DS . 'webroot/img/' . $data->get('image')) === false) {
            $this->response->addError('image', 'Expecting a image');
            $return = false;
        }

        App::import('Helper', 'Convert');
        $convert = new ConvertHelper();

        if (!is_null($data->get('category'))) {
            $category_name = $convert->category($data->get('category'));

            if (empty($category_name)) {
                $this->response->addError('category', 'Category does not exist');
                $return = false;
            }

        }

        if (!is_null($data->get('content_rating'))) {
            $content_rating = $data->get('content_rating');
            $content_rating_name = $convert->content_rating($content_rating);

            if (empty($content_rating_name)) {
                $this->response->addError('content_rating', "Content Raiting {$content_rating} does not exist");
                $return = false;
            }
        }

        if (!is_null($data->get('sex')) && in_array($data->get('sex'), $this->allowed_sex) == false) {
            $this->response->addError('sex', 'The sex does not exist');
            $return = false;
        }

        return $return;
    }

    public function delete()
    {
        $params = new \CI\ArrayManipulator($this->params['url']);
        $id     = $params->get('id', $id);
        $this->change_status($id, Article::STATUS_DELETE);
        $this->response->setMessage('Delete');
        return $this->response->get();
    }

    public function expire()
    {
        App::import('Vendor', 'Carbon', array('file' => 'Carbon.php'));

        $end_at = \Carbon\Carbon::now()->format(self::DATE_FORMAT)->timestamp;
        $params = new \CI\ArrayManipulator($this->params['url']);
        $id     = $params->get('id', $id);
        $this->change_status($id, Article::STATUS_EXPIRED, $end_at);
        $this->response->setMessage('Expire');

        return $this->response->get();
    }

    public function change_status($id, $status)
    {
        $this->response->setMessage('Change Status');

        $this->edit(
            array(
                'id' => $id,
                'status' => $status
            )
        );

        return $this->response->get();
    }

    public function get_list()
    {
        $this->response->setMessage('Get List');

        $params = new \CI\ArrayManipulator($this->params['url']);
        $limit  = $params->get('limit', 10);
        $offset = $params->get('offset', 0);
        $status = $params->get('status', Article::STATUS_ALL);
        $items  = $this->CustomLandingPage->get_list($limit, $offset, $status);

        if (empty($items)) {
             $this->response->addError('items', 'Not found');
        } else {
            $this->response->addData('items', $this->format_output($items));
        }

        return $this->response->get();
    }

    public function get()
    {
        $this->response->setMessage('Get');

        $params = new \CI\ArrayManipulator($this->params['url']);
        $id     = $params->get('id');
        $item   = $this->CustomLandingPage->findById($id);

        if (false !== $item) {
            $this->response->addData('item', $this->format_output($item));
        }

        return $this->response->get();
    }

    public function upload_image()
    {
        $this->response->setMessage('Upload Image');

        try{
            $image_manipulator       = new \CI\Image\Manipulator();
            $this->response->addData('image', $image_manipulator->importFromStream(true));
        } Catch(Exception $e){
            $this->response->addError('image', print_r($e->getTrace(), true));
        }

        return $this->response->get();
    }

    protected function format_output($items)
    {
        App::import('Vendor', 'Carbon', array('file' => 'Carbon.php'));

        foreach ($items as $item_pos => $item ) {
            foreach ($item as $key => $value) {
                switch ($key) {
                    case 'created_at':
                    case 'start_at':
                    case 'end_at':
                        $items[$item_pos][$key] = \Carbon\Carbon::createFromTimeStamp($value)->format(self::DATE_FORMAT);
                        break;
                    case 'image':
                        $image = new \CI\Asset\Image();
                        $items[$item_pos][$key] = $image->getUrl(
                            array(
                                'image' => $value,
                                'page_id' => 'none',
                                'type' => \CI\Asset\Image::URL_FULL,
                                'extra_parameters' => array(
                                   't' => \Carbon\Carbon::parse($items['post']['updated'])->timestamp,
                                )
                            )
                        );
                        break;
                    case 'status':
                        $items[$item_pos]['status_text'] = $this->status_text[$value];
                        break;
                }
            }
        }

        return $items;
    }

    protected  function sanitize($data)
    {
        App::import('Vendor', 'Carbon', array('file' => 'Carbon.php'));
        $date = new \Carbon\Carbon();
        $date->format(self::DATE_FORMAT);

        try{
            if (!empty($data['start_at']) && $data['start_at'] == $date->parse($data['start_at'])) {
                $data['start_at'] = $date->parse($data['start_at'])->timestamp;
            }
        } catch(Exception $exception) {
            error_log(__METHOD__ . '::VALUE:' . print_r($data['start_at'], true) . '::' . $exception->getMessage());
        }

        try{
            if (!empty($data['end_at']) && $data['end_at'] == $date->parse($data['end_at'])) {
                $data['end_at'] = $date->parse($data['end_at'])->timestamp;
            }
        } catch(Exception $exception) {
            error_log(__METHOD__ . '::VALUE:' . print_r($data['end_at'], true) . '::' . $exception->getMessage());
        }

        try{
            if (!empty($data['created_at']) && $data['created_at'] == $date->parse($data['created_at'])) {
                $data['created_at'] = $date->parse($data['created_at'])->timestamp;
            }
        } catch(Exception $exception) {
            error_log(__METHOD__ . '::VALUE:' . print_r($data['created_at'], true) . '::' . $exception->getMessage());
        }

        return $data;
    }

    public function get_pages($domain_id, $intersect_id, $rand_seed)
    {
        $this->header('Content-Type: text/html; charset=utf-8');
        $page = 1;
        if (isset($this->params['named']['page'])) {
            $page = $this->params['named']['page'];
            if ($page <= 1) {
                $page = 1;
            }
        }

        $limit     = DEFAULT_LANDING_PAGE_GENERAL_LINKS;
        $offset    = ($page - 1) * $limit;
        $intersect = $this->Intersects->get_intersect_by_id($intersect_id);

        $intersect = array(
            'categories'      => $intersect['category'],
            'demographic_sex' => $intersect['demographic_sex'],
            'content_rating'  => $intersect['content_rating'],
        );

        $component_hubs = new CI\Hub(new CI\Hub\DataSource\MyArray());
        $component_cache = new CI\Memcached\App();
        $component_landing_page = new CI\Component\LandingPage();
        if (empty($rand_seed)) {
            $rand_seed = $component_landing_page->getRandomSeed($intersect, $domain_id);
        }

        $cache_key_params = array(
            $intersect,
            $domain_id,
            $page,
            $rand_seed,
            array(), //subcategories
            array(), //tags
            array(), //whitelist
            array(), //blacklist
            0, // clicked page id
            $limit,
        );

        $component_key_gen = new \CI\Memcached\KeyGen($cache_key_params, 'lp_general');
        $cache_key = $component_key_gen->generate();

        $pages = $component_cache->get($cache_key);

        if (empty($pages)) {
            $pages = array();
            if ($limit > 1) {
                $this->loadModel('LandingPageAnalytic');
                $domain_bit = $component_hubs->idToBit($domain_id);
                $analytics  = $this->LandingPageAnalytic->intersect_weight(
                    $intersect,
                    $domain_bit,
                    $limit,
                    $offset,
                    $rand_seed,
                    array(), // subcategories
                    array(), // tags
                    array(), // whitelist
                    array(), // blacklist
                    0 // clicked page id
                );

                if (!empty($analytics)) {
                    /* Convert the analytics into pages */
                    $page_analytics = array();
                    foreach ($analytics as $analytic) {
                        $id         = $analytic['LandingPageAnalytic']['page_id'];
                        $page_ids[] = $id;

                        $analytic['LandingPageAnalytic']['intersect_id'] = $this->Intersects->get_id_by_intersect(
                            array(
                                'category'        => $analytic['LandingPage']['category'],
                                'demographic_sex' => $intersect['demographic_sex'],
                                'content_rating'  => $intersect['content_rating']
                            )
                        );
                        $page_analytics[$id] = $analytic['LandingPageAnalytic'];
                    }

                    $implode_page_ids = implode(',', $page_ids);
                    $pages = $this->Page->query_read("CALL ci_ci_sp_select_pages_ordered('{$implode_page_ids}')");

                    $count = count($pages);
                    $image_assets = new \CI\Asset\Image();
                    $page_params = array(
                        'page_analytics' => $page_analytics,
                        'image_width'    => 300,
                        'image_height'   => 250,
                    );
                    array_walk($pages, function(&$page, $key) use ($image_assets, $component_landing_page, $page_params) {
                        $page_id = $page['Page']['id'];
                        $page_analytic = $page_params['page_analytics'][$page_id];
                        $page['Page']['analytic_id']  = $page_analytic['id'];
                        $page['Page']['type']         = $page_analytic['type'];
                        $page['Page']['key']          = $page_analytic['key'];
                        $page['Page']['intersect_id'] = $page_analytic['intersect_id'];
                        $page['Page']['ctr_link']     = $component_landing_page->getOutgoingLink($page['Page'], $page_analytic['intersect_id']);
                        $page['Page']['image_src']    = $image_assets->getUrl(
                            array(
                                'page_id'          => $page['Page']['id'],
                                'type'             => \CI\Asset\Image::URL_CROP_FULL,
                                'image'            => $page['Page']['image'],
                                'width'            => $page_params['image_width'],
                                'height'           => $page_params['image_height'],
                                'extra_parameters' => array('t' => strtotime($page['Page']['moderator_modified'])),
                            )
                        );
                    }); // end array_walk

                    // Queue the impressions of these analytics
                    App::import('Component', 'QueueKestrel');
                    $queue = new QueueKestrelComponent("landing_page_stats_views");
                    $queue_data = $component_landing_page->queueData($pages, $intersect_id, $domain_bit);
                    $queue_data = json_encode($queue_data);
                    $queue->push($queue_data);
                } // end if empty analytics
            } // end if limit > 1
        } // end if empty pages

        /* Save in cache */
        if (!empty($pages)) {
            $component_cache->set($cache_key, $pages, HOUR * 3);
        }

        $this->set("pages", $pages);
        $this->set('random_seed', $rand_seed);
        $this->set("words_limit", $this->Setting->get('RSS_FEED_TITLE_LIMIT_WORDS'));
        $this->set('isHomepage', true);
        $this->set('paginate_current', $page);
        $this->set('article_id', empty($_GET['article_id']) ? '' : $_GET['article_id']);
        $this->render('/custom_landing_page/get_pages');
    }

    public function get_stats_by_website()
    {
        App::import('Vendor', 'Carbon', array('file' => 'Carbon.php'));

        $params     = new \CI\ArrayManipulator($this->params['url']);
        $website_id = $params->get('website_id');
        $page = $params->get('page', 1);
        $limit = $params->get('limit', 10);

        $this->response->setMessage('Get Stats By Website');

        if (false !== filter_var($website_id, FILTER_VALIDATE_INT) && $website_id > 0) {
            $this->response->addError('website_id', "not stats found with website_id = {$website_id} ");

            $this->paginate = array(
                'conditions' => array('CustomLandingPage.website_id ' => $website_id),
                'fields' => array('id', 'image', 'category', 'headline', 'website_id' ),
                'order' => array('CustomLandingPage.id' => 'asc'),
                'limit' => $limit,
                'page' => $page
            );

            $all_articles_tmp = $this->paginate('CustomLandingPage');

            $this->response->addData(
                'have_more_results',
                $this->params['paging']['CustomLandingPage']['nextPage']
            );

            $all_articles = array();

            foreach ($all_articles_tmp as $key => $value) {
                $all_articles[$value['CustomLandingPage']['id']] = $value['CustomLandingPage'];
            }
            unset($all_articles_tmp);

            $id_articles = array_keys($all_articles);
            $results     = $this->StatsArticle->get_by_website_id($website_id, $id_articles);


            $image = new \CI\Asset\Image();
            $category = new \CI\Category();

            foreach ($all_articles as $article_id => $article) {

                $image_url = $image->getUrl(
                    array(
                        'image' => $article['image'],
                        'page_id' => 'none',
                        'type' => \CI\Asset\Image::URL_CROP_FULL,
                        'height' => 50,
                        'width' => 100,
                        'extra_parameters' => array(
                            't' => \Carbon\Carbon::parse($article['updated'])->timestamp,
                        )
                    )
                );
                $category_name = $category->getName($article['category']);

                $ctr = 0;
                $clicks = 0;
                $impressions = 0;

                if (isset($results[$article_id])) {
                    if (intval($results[$article_id]['impressions']) > 0 ) {
                        $ctr = number_format(
                            ($results[$article_id]['clicks']/$results[$article_id]['impressions']) * 100,
                            2
                        );
                    }
                    $clicks = $results[$article_id]['clicks'];
                    $impressions = $results[$article_id]['impressions'];
                }

                $return[$article_id] = array(
                    'clicks' => $clicks,
                    'impressions' => $impressions,
                    'ctr' => $ctr,
                    'category' => $article['category'],
                    'image' => $image_url,
                    'article_id' => $article_id,
                    'website_id' => $article['website_id'],
                    'title' => $article['headline'],
                    'category_name' => $category_name
                );
            }
        }

        if (!empty($return)) {
            $this->response->addData(
                'results',
                $return
            );
        }

        return $this->response->get();
    }
}
