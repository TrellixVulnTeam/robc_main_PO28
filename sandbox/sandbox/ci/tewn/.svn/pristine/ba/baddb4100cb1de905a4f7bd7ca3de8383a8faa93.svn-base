<?php
/*
 * History Landing Page Analytics Controller
 */
class HistoryLandingPageAnalyticsController extends AppController
{

	var $name = 'HistoryLandingPageAnalytics';
	var $uses = array("Stats", "LandingPageAnalytic", "Page", "Website");
	var $components = array('RequestHandler', 'Date', 'History', 'Intersects', 'Timer', 'Domain', 'Rule');

	var $cache_on = 1;
	var $debug = 0;

	public $websites_buffer = array();

	function update() {
		$this->autoRender = false;
		debug_message('Disabled and removed history_landing_page_analytics');
	}

	/*
	 * This gets the aggregate stats minus the base intersect
	 */
	function stats_days_website_landing_pages($website_id, $number_of_days) {
		/* Check cache */
		$total_stats = array('num_ctr' => 0, 'num_display' => 0);
		$date_end = $this->Date->day_end($this->Date->yesterday());
		$date_start = $this->Date->day_start(
			$this->Date->date_subtract(
				$this->Date->today(), $number_of_days
			)
		);
		$stats = $this->Stats->get_website_landing_page_stats($website_id, $date_start, $date_end);
		if ($stats) {
			$total_stats = array('num_ctr' => $stats['clicks'], 'num_display' => $stats['impressions']);
		}

		return $total_stats;
	}

	function stats_days_website($website_id, $intersect = null, $number_of_days) {
		// If you hit this, then increase define
		plat_assert(MAX_ROLLING_STATS_DAYS >= $number_of_days);

		$date_start = $this->Date->day_start($this->Date->days_ago($number_of_days));
		$date_end = $this->Date->yesterday_end();

		return $this->stats_time_website($website_id, $intersect, $date_start, $date_end);
	}

	function stats_time_website($website_id, $intersect = null, $date_start, $date_end) {
		$stats = $this->Stats->get_website_landing_page_stats($website_id, $date_start, $date_end, $intersect);

		return array(
			'num_ctr' => $stats['clicks'],
			'num_display' => $stats['impressions'],
		);
	}

	function stats_day_website($website_id, $intersect, $date = null) {
		if (empty($date)) {
			$date = $this->Date->yesterday();
		}
		$date_start = $this->Date->day_start($date);
		$date_end   = $this->Date->day_end($date);

		return $this->stats_time_website($website_id, $intersect, $date_start, $date_end);
	}

	function stats_days_landing_page($page_id, $number_of_days) {
		$date_end = $this->Date->yesterday_end();
		$date_start = $this->Date->day_start($this->Date->days_ago($number_of_days));
		$total_stats = array('num_ctr' => 0, 'num_display' => 0);

		$stats = $this->Stats->get_page_landing_page_stats($page_id, $date_start, $date_end);
		if ($stats) {
			$total_stats = array('num_ctr' => $stats['clicks'], 'num_display' => $stats['impressions']);
		}

		return $total_stats;
	}

	function stats_page_time($page_id, $start_timestamp, $end_timestamp = 0) {
		$datetime_start = $this->Date->format_timestamp_time($start_timestamp);
		$datetime_end = (0 == $end_timestamp) ? $this->Date->yesterday_end() : $this->Date->format_timestamp_time($end_timestamp);

		$total_stats = array('num_ctr' => 0, 'num_display' => 0);
		$stats = $this->Stats->get_page_landing_page_stats($page_id, $datetime_start, $datetime_end);
		if ($stats) {
			$total_stats = array('num_ctr' => $stats['clicks'], 'num_display' => $stats['impressions']);
		}

		if ($this->RequestHandler->isAjax()) {
			$this->autoRender = false;
			Configure::write('debug', 0);
			return json_encode($total_stats);
		}

		return $total_stats;
	}

	function stats_days($page_id, $intersect = null, $number_of_days, $type = LINK_TYPE_ALL, $key = KEY_ALL) {
		// If you hit this, then increase define
		plat_assert(MAX_ROLLING_STATS_DAYS >= $number_of_days);

		$date_start = $this->Date->day_start($this->Date->days_ago($number_of_days));
		$date_end = $this->Date->yesterday_end();

		$stats = array('num_ctr' => 0, 'num_display' => 0);
		$page_id = is_numeric($page_id) ? $page_id : $page_id['id'];

		return $this->stats_time($page_id, $intersect, $date_start, $date_end, $type, $key);
	}

	function stats_time($page_id = null, $intersect = null, $date_start, $date_end, $type = LINK_TYPE_ALL, $key = KEY_ALL) {
		$stats = $this->Stats->get_page_landing_page_stats($page_id, $date_start, $date_end, $intersect, $type, $key);
		return array(
			'num_ctr' => $stats['clicks'],
			'num_display' => $stats['impressions']
		);
	}

	function stats_day($page, $intersect, $date, $type = LINK_TYPE_ALL, $key = KEY_ALL) {
		if (!empty($intersect) && !$this->is_valid($page, $intersect)) {
			return array('num_ctr' => 0, 'num_display' => 0);
		}

		$date_start = $this->Date->day_start($date);
		$date_end = $this->Date->day_end($date);
		$page_id = is_numeric($page) ? $page : $page['id'];

		return $this->stats_time($page_id, $intersect, $date_start, $date_end, $type, $key);
	}

	private function is_valid($page, $intersect) {

		if (!$page) {
			return 0;
		}

		$page_id = is_numeric($page) ? $page : $page['id'];
		$page = is_numeric($page) ? $this->Page->findById($page_id) : array('Page' => $page);

		$valid = $this->Rule->intersect($intersect, $page);

		return $valid;
	}

	function stats_days_ctr($page_id = null, $intersect = null, $number_of_days) {
		$stats = $this->stats_days($page_id, $intersect, $number_of_days);

		if ($stats['num_display'] > 0) {
			return $stats['num_ctr'] / $stats['num_display'];
		} else {
			return 0;
		}
	}

	public function clear_cache($date = null)
	{
		$this->autoRender = false;
		if (!$this->is_admin()) {
			return 'Not valid user';
		}
		// Clearing all the caches
		$this->clear_website_landing_page_stats_day_cache($date);
		$this->clear_website_stats_day_cache($date);
		$this->clear_website_rolling_stats_day_cache(MANAGEMENT_LANDING_PAGE_ROLLING_DAYS);
		$this->clear_page_stats_day_cache($date);
		return 'Clear cache done';
	}

	private function _get_websites() {
		if (empty($this->websites_buffer)) {
			// getting all the sites
			$this->websites_buffer = $this->Website->find('list', array(
				'fields'     => 'id, name',
				'conditions' => array(
					'visible' => true,
					'status'  => array(WEBSITE_STATUS_ACTIVE, WEBSITE_STATUS_TRANSFER)
				)
			));
		}
		return $this->websites_buffer;
	}

	public function clear_website_landing_page_stats_day_cache($date = null)
	{
		$this->autoRender = false;
		if (!$this->is_admin()) {
			return 'Not valid user';
		}
		$websites = $this->_get_websites();
		if (empty($date)) {
			$date = $this->Date->yesterday();
		}
		$intersects = $this->Intersects->get_all();
		$date_start = $this->Date->day_start($date);
		$date_end = $this->Date->day_end($date);
		foreach ($websites as $website_id => $name) {
			foreach ($intersects as $intersect) {
				$intersect_key = implode('_', array(
					$intersect['category'], $intersect['demographic_sex'], $intersect['content_rating']
				));
				$cache_key = 'get_websites_landing_page_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:{$intersect_key}");
				$this->Stats->memcached_delete($cache_key);
			}
		}
		return 'Clear cache done';
	}

	public function clear_website_stats_day_cache($date = null)
	{
		$this->autoRender = false;
		if (!$this->is_admin()) {
			return 'Not valid user';
		}
		$websites = $this->_get_websites();
		if (empty($date)) {
			$date = $this->Date->yesterday();
		}
		$date_start = $this->Date->day_start($date);
		$date_end = $this->Date->day_end($date);
		foreach ($websites as $website_id => $name) {
			$cache_key = 'get_websites_landing_page_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
			$this->Stats->memcached_delete($cache_key);
		}
		return 'Clear cache done';
	}

	public function clear_website_rolling_stats_day_cache($number_of_days = null)
	{
		$this->autoRender = false;
		if (!$this->is_admin()) {
			return 'Not valid user';
		}
		$websites = $this->_get_websites();
		if (empty($number_of_days)) {
			$number_of_days = MANAGEMENT_LANDING_PAGE_ROLLING_DAYS;
		}
		$date_end = $this->Date->day_end($this->Date->yesterday());
		$date_start = $this->Date->day_start(
			$this->Date->date_subtract(
				$this->Date->today(), $number_of_days
			)
		);
		foreach ($websites as $website_id => $name) {
			$cache_key = 'get_websites_landing_page_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
			$this->Stats->memcached_delete($cache_key);
		}
		return 'Clear cache done';
	}

	public function clear_page_stats_day_cache($date = null, $pages = null) {
		$this->autoRender = false;
		if (!$this->is_admin()) {
			return 'Not valid user';
		}
		if (empty($pages)) {
			$pages = $this->Page->find(
				'list',
				array(
					'fields' => 'id, url',
					'conditions' => array('status' => PAGE_STATUS_APPROVED)
				)
			);
		}
		if (empty($date)) {
			$date = $this->Date->yesterday();
		}
		$intersects = $this->Intersects->get_all();
		$date_start = $this->Date->day_start($date);
		$date_end = $this->Date->day_end($date);
		$type = LINK_TYPE_ALL;
		$key = KEY_ALL;

		foreach ($pages as $page_id => $url) {
			foreach ($intersects as $intersect) {
				$intersect_key = implode('_', array(
					$intersect['category'], $intersect['demographic_sex'], $intersect['content_rating']
				));
				$cache_key = 'get_pages_landing_page_stats::'.md5("{$page_id}:{$date_start}:{$date_end}:{$intersect_key}:{$type}:{$key}");
				$this->Page->memcached_delete($cache_key);
			}
		}
		return 'Clear cache done';
	}


	public function precache($timer = 1, $num_days = MANAGEMENT_LANDING_PAGE_ROLLING_DAYS) {
		$this->autoRender = false;
		/* Timers & Limits */
		if ($timer) {
			$this->Timer->start(TIMER_HISTORY_LANDING_PAGE_ANALYTICS_PRECACHE);
		}
		//set_time_limit(TIME_LIMIT_HISTORY_LANDING_PAGE_ANALYTICS_PRECACHE);
		ini_set('memory_limit', MEMORY_LIMIT_HISTORY_LANDING_PAGE_ANALYTICS_PRECACHE.'M');

		// getting all the sites
		$websites = $this->_get_websites(null);

		if ($timer) {
			$script_total = count($websites) + 1;
			$script_count = 0;
			$this->Timer->progress_set(0);
			$this->Timer->running_set();
		}

		///////////////////////////////////////////////////////////

		$date_start = $this->Date->yesterday_start();
		$datetime_start = strtotime($date_start);
		$date_end = $this->Date->yesterday_end();
		$datetime_end = strtotime($date_end);

		$empty_stats = array('clicks' => 0, 'impressions' => 0);

		if (!empty($websites)) {
			$website_ids = implode(',', array_keys($websites));

			echo "Precaching Websites Yesterday Stats... ";

			$query = "SELECT website_id, sum(clicks) AS clicks, sum(impressions) AS impressions
				FROM stats_landing_page AS StatsLandingPage
				WHERE website_id IN ({$website_ids}) AND created >= {$datetime_start} AND created <= {$datetime_end}
				GROUP BY website_id";
            $stats = $this->Stats->query_read($query, false);
            if(is_array($stats)) {
				$temp_website_ids = explode(',', $website_ids);
                foreach ($stats as $website_stats) {
					$website_id = $website_stats['StatsLandingPage']['website_id'];
                    $cache_key = 'get_websites_landing_page_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
                    $stat = array(
                    	'clicks' => intval($website_stats[0]['clicks']),
                    	'impressions' => intval($website_stats[0]['impressions']),
                    );

                    $time_cached = 10 * MINUTE;
                    if ($stat['clicks'] > 0 || $stat['impressions'] > 0) {
                        $time_cached = 12 * HOUR;
                    }

                    $this->Stats->memcached_set_json($cache_key, $stat, $time_cached);
                    unset($temp_website_ids[$website_id]);
				}
                $time_cached = 10 * MINUTE;
                foreach ($temp_website_ids as $website_id) {
					$cache_key = 'get_websites_landing_page_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
					$this->Stats->memcached_set_json($cache_key, $empty_stats, $time_cached);
				}
			}
			unset($stats);
			debug_memory('Done');

			$date_start = $this->Date->day_start($this->Date->days_ago($num_days));
			$datetime_start = strtotime($date_start);

			echo "Precaching Websites {$num_days} Days Stats... ";

			$query = "SELECT website_id, sum(clicks) AS clicks, sum(impressions) AS impressions
				FROM stats_landing_page AS StatsLandingPage
				WHERE website_id IN ({$website_ids}) AND created >= {$datetime_start} AND created <= {$datetime_end}
                GROUP BY website_id";
			$stats = $this->Stats->query_read($query, false);
			if(is_array($stats)) {
				$temp_website_ids = explode(',', $website_ids);
                foreach ($stats as $website_stats) {
					$website_id = $website_stats['StatsLandingPage']['website_id'];
					$cache_key = 'get_websites_landing_page_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
                    $stat = array(
                    	'clicks' => intval($website_stats[0]['clicks']),
                    	'impressions' => intval($website_stats[0]['impressions']),
                    );

                    $time_cached = 10 * MINUTE;
                    if ($stat['clicks'] > 0 || $stat['impressions'] > 0) {
                        $time_cached = 12 * HOUR;
                    }

                    $this->Stats->memcached_set_json($cache_key, $stat, $time_cached);
                    unset($temp_website_ids[$website_id]);
				}
                $time_cached = 10 * MINUTE;
                foreach ($temp_website_ids as $website_id) {
					$cache_key = 'get_websites_landing_page_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
                    $this->Stats->memcached_set_json($cache_key, $empty_stats, $time_cached);
				}
			}
			unset($stats);

			debug_memory('Done');
			unset($website_ids);
		}

		if ($timer) {
			$script_count++;
			$this->Timer->progress_set($script_count, $script_total);
			$this->Timer->running_set();
		}

		foreach ($websites as $website_id => $website_name) {
			$pages = $this->Page->find('list', array(
				'fields'     => 'id',
				'conditions' => array(
					'visible'    => true,
					'status'     => PAGE_STATUS_APPROVED,
					'website_id' => $website_id
				)
			));

			echo "Precaching Pages from Website {$website_name} ({$website_id})... ";

			if (!empty($pages)) {
				$pages_ids = implode(',', $pages);
				unset($pages);

				$query = "SELECT page_id, category, sex, age, content, type, `key`, sum(clicks) AS clicks, sum(impressions) AS impressions
					FROM stats_landing_page AS StatsLandingPage
					WHERE page_id IN ({$pages_ids}) AND created >= {$datetime_start} AND created <= {$datetime_end}
					GROUP BY page_id, category, sex, age, content, type, `key`";
				$temp_stats = $this->Stats->query_read($query, false);
				unset($query);

				$stats = array();
				$page_stats = array();
				if(is_array($temp_stats)) {
					foreach ($temp_stats as $stat) {
						$info = $stat['StatsLandingPage'];
						$id = implode('_', array(
							$info['page_id'], $info['category'], $info['age'],
							$info['sex'], $info['content'], $info['type'], $info['key']
						));

						$stats[$id] = array('clicks' => intval($stat[0]['clicks']), 'impressions' => intval($stat[0]['impressions']));
						$intersect_key = implode('_', array($info['category'], $info['age'], $info['sex'], $info['content']));
						$cache_key = 'get_pages_landing_page_stats::'.md5("{$info['page_id']}:{$date_start}:{$date_end}:{$intersect_key}:{$info['type']}:{$info['key']}");
						$this->Stats->memcached_set_json($cache_key, $stats[$id], 12 * HOUR);

						if (isset($page_stats[$info['page_id']])) {
							$page_stats[$info['page_id']]['clicks'] += intval($stat[0]['clicks']);
							$page_stats[$info['page_id']]['impressions'] += intval($stat[0]['impressions']);
						} else {
							$page_stats[$info['page_id']] = $stats[$id];
						}
					}
				}
				unset($temp_stats);

				$query = "SELECT page_id, category, demographic_sex, content_rating, type, `key`
					FROM landing_page_analytics AS LandingPageAnalytic
					WHERE visible = 1 AND page_id in ({$pages_ids})";
				$analytics = $this->Website->query_read($query, false);
				unset($query);

				// Precache the analytics for rebalance landing page
				foreach ($analytics as $analytic) {
					$analytic = $analytic['LandingPageAnalytic'];
					$id = implode('_', array(
						$analytic['page_id'], $analytic['category'], $analytic['demographic_sex'],
						$analytic['content_rating'], $analytic['type'], $analytic['key']
					));
					if (!isset($stats[$id])) {
						$intersect_key = implode('_', array(
							$analytic['category'], $analytic['demographic_sex'], $analytic['content_rating']
						));
						$cache_key = 'get_pages_landing_page_stats::'.md5("{$analytic['page_id']}:{$date_start}:{$date_end}:{$intersect_key}:{$analytic['type']}:{$analytic['key']}");
						$this->Stats->memcached_set_json($cache_key, $empty_stats, 12 * HOUR);
					}
				}
				unset($analytics);
				unset($stats);

				// Precache the active pages stats
				foreach ($page_stats as $page_id => $stat) {
					$cache_key = 'get_pages_landing_page_stats::'.md5("{$page_id}:{$date_start}:{$date_end}::-1:-1");
					$this->Stats->memcached_set_json($cache_key, $stat, 12 * HOUR);
				}
				unset($page_stats);
			}

			debug_memory('Done');

			if ($timer) {
				$script_count++;
				$this->Timer->progress_set($script_count, $script_total);
				$this->Timer->running_set();
			}
		}

		/* Save off timer */
		if ($timer) {
			$data = $this->Timer->set_memory_limit();
			$this->Timer->stop_save($data);
		}

		debug_memory('Done Precaching');
	}

	function page_ctr_range($page_id = NULL) {
		Configure::write('debug', 0);
		$this->autoRender = false;

		$end_date = $this->Date->yesterday_end();
		$start_date = $this->Date->day_start($this->Date->date_subtract($end_date, 9));

		$io = array();
		while(strtotime($start_date) < strtotime($end_date)) {
			$stats = $this->stats_day($page_id, null, $start_date);
			$io[] = $stats['num_ctr'] > 0 ? $stats['num_ctr'] / $stats['num_display'] * 100 : 0;
			$start_date = $this->Date->day_start($this->Date->date_add($start_date, 1));
		}
		return implode(",",$io);
	}
}

?>
