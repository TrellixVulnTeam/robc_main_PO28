<?php
/*
 * History Widget Analytics Controller
 */
class HistoryWidgetAnalyticsController extends AppController {

	var $name = 'HistoryWidgetAnalytics';
	var $uses = array("Stats", "WidgetAnalytic", "Website", "Page", 'Setting');
	var $components = array('RequestHandler', "Date", "Timer");

	var $cache_on = 1;
	var $debug = 0;

	function update() {
		$this->autoRender = false;
		debug_message('Disabled and removed history_widget_analytics');
	}

	public function stats_days_referrals($website_id, $number_of_days) {
		$date_start = $this->Date->days_ago($number_of_days) . ' 00:00:00';
		$date_end = $this->Date->yesterday_end();

		if ($this->cache_on) {
			$data = $this->Stats->get_cache_website_referral_stats($website_id, $date_start, $date_end);
			if ($data) {
				return $data;
			}
		}

		// obtain the possible referrals of a website
		$pages = array();
		$referrals = array();
		$website_referrals = $this->WidgetAnalytic->referrals($website_id);
		foreach ($website_referrals as $referral) {
			$referral = $referral[0];
			$referrals[$referral['website_id']] = $referral['referral'];
			$referral_pages = explode(',', $referral['page_id']);
			foreach ($referral_pages as $page) {
				if (in_array($page, $pages)) {
					continue;
				}
				$pages[] = $page;
			}
		}

		// TODO finish here all the details
		$data = $this->Stats->get_widget_stats_referrals($referrals, $pages, $date_start, $date_end);

		// set the name of the referral
		for ($i = 0, $total = count($data); $i < $total; $i++) {
			$data[$i][0]['referral'] = $referrals[$data[$i][0]['website_id']];
		}

		if ($this->cache_on) {
			$this->Stats->set_cache_website_referral_stats($website_id, $date_start, $date_end, $data);
		}

		return $data;
	}

	function stats_days_website($website_id, $shown_website_id = null, $number_of_days) {
		// If you hit this, then increase define
		plat_assert(MAX_ROLLING_STATS_DAYS >= $number_of_days);

		$date_start = $this->Date->day_start($this->Date->days_ago($number_of_days));
		$date_end = $this->Date->yesterday_end();

		$stats = array('num_ctr' => 0, 'num_display' => 0, 'num_ctr_traffic' => 0);
		$page_stats = $this->Stats->get_website_widget_stats(
			$website_id, $date_start, $date_end, $shown_website_id
		);
		if ($page_stats) {
			$stats = array(
				'num_ctr' => $page_stats['clicks'],
				'num_display' => $page_stats['impressions'],
				'num_ctr_traffic' => $page_stats['traffic']
			);
		}

		return $stats;
	}

	function stats_time_website($website_id, $shown_website_id = null, $date_start, $date_end) {
		$stats = $this->Stats->get_website_widget_stats($website_id, $date_start, $date_end, $shown_website_id);
		return array(
			'num_ctr' => $stats['clicks'],
			'num_display' => $stats['impressions'],
			'num_ctr_traffic' => $stats['traffic'],
		);
	}

	function stats_day_website($website_id, $shown_website_id, $date = null) {
		$date = ($date === null) ? $this->Date->yesterday() : $this->Date->format($date);
		$start_date = $this->Date->day_start($date);
		$end_date = $this->Date->day_end($date);
		$analytics = array('num_ctr' => 0, 'num_display' => 0, 'num_ctr_traffic' => 0);

		$page_stats = $this->Stats->get_website_widget_stats($website_id, $start_date, $end_date, $shown_website_id);
		if ($page_stats) {
			$analytics = array(
				'num_ctr' => $page_stats['clicks'],
				'num_display' => $page_stats['impressions'],
				'num_ctr_traffic' => $page_stats['traffic']
			);
		}

		return $analytics;
	}

	function stats_time($page_id = null, $shown_website_id = null, $date_start, $date_end, $type = LINK_TYPE_ALL, $key = KEY_ALL) {
		$analytics = $this->Stats->get_page_widget_stats(
			$page_id, $date_start, $date_end, $shown_website_id, $type, $key
		);
		return array(
			'num_ctr' => $analytics['clicks'],
			'num_display' => $analytics['impressions'],
			'num_ctr_traffic' => $analytics['traffic'],
		);
	}

	function stats_page_time($page_id, $start_time, $end_time = 0) {
		$end_time = (0 == $end_time) ? $this->Date->today() : $this->Date->format_timestamp($end_time);
		$start_time = $this->Date->format_timestamp($start_time);
		$total_stats = array('num_ctr' => 0, 'num_display' => 0, 'num_ctr_traffic' => 0);

		$stats = $this->Stats->get_page_widget_stats($page_id, $start_time, $end_time);
		if ($stats) {
			$total_stats = array(
				'num_ctr' => $stats['clicks'],
				'num_display' => $stats['impressions'],
				'num_ctr_traffic' => $stats['traffic']
			);
		}

		if ($this->RequestHandler->isAjax()) {
			$this->autoRender = false;
			Configure::write('debug', 0);
			return json_encode($total_stats);
		}
		return $total_stats;
	}

	function stats_days($page_id, $shown_website_id = null, $number_of_days, $type = LINK_TYPE_ALL, $key = KEY_ALL) {
		// If you hit this, then increase define
		plat_assert(MAX_ROLLING_STATS_DAYS >= $number_of_days);

		$date_start = $this->Date->days_ago($number_of_days);
		$date_end = $this->Date->yesterday();
		$stats = array('num_ctr' => 0, 'num_display' => 0, 'num_ctr_traffic' => 0);

		$page_stats = $this->Stats->get_page_widget_stats($page_id, $date_start.' 00:00:00', $date_end.' 23:59:59', $shown_website_id, $type, $key);
		if ($page_stats) {
			$stats = array(
				'num_ctr' => $page_stats['clicks'],
				'num_display' => $page_stats['impressions'],
				'num_ctr_traffic' => $page_stats['traffic']
			);
		}

		return $stats;
	}

	function stats_day($page_id, $shown_website_id = null, $date, $type = LINK_TYPE_ALL, $key = KEY_ALL) {

		$stats = array('num_ctr' => 0, 'num_display' => 0, 'num_ctr_traffic' => 0);
		$start_date = $this->Date->day_start($date);
		$end_date = $this->Date->day_end($date);

		$page_stats = $this->Stats->get_page_widget_stats($page_id, $start_date, $end_date, $shown_website_id, $type, $key);
		if ($page_stats) {
			$stats = array(
				'num_ctr' => $page_stats['clicks'],
				'num_display' => $page_stats['impressions'],
				'num_ctr_traffic' => $page_stats['traffic']
			);
		}

		return $stats;
	}

	function stats_days_ctr($page_id = null, $shown_website_id = null, $number_of_days) {
		$stats = $this->stats_days($page_id, $shown_website_id, $number_of_days);

		if ($stats['num_display']) {
			return $stats['num_ctr'] / $stats['num_display'];
		} else {
			return 0;
		}
	}

	/* Cache functions */
	public function clear_cache($date = null) {
		if (empty($date)) {
			$date = $this->Date->yesterday();
		}
		$date_start = $this->Date->day_start($date);
		$date_end   = $this->Date->day_end($date);
		$websites = $this->Website->find('list', array(
			'fields' => 'id, name',
			'conditions' => array(
				'visible' => true,
				'status' => array(WEBSITE_STATUS_ACTIVE, WEBSITE_STATUS_TRANSFER),
			),
		));
		foreach ($websites as $id => $name) {
			$cache_key = 'get_websites_widget_stats::'.md5("{$id}:{$date_start}:{$date_end}:");
			$this->Website->memcached_delete($cache_key);
		}

		$this->autoRender = false;
		return "Websites Widget Cache on {$date} Cleared";
	}

	/* Use this this to cache some data into memcached for fast retrieval */
	public function precache() {
		$this->autoRender = false;
		$websites = $this->Website->find(
			'list',
			array(
				'conditions' => array(
					'visible' => true,
					'status'  => array(
						WEBSITE_STATUS_ACTIVE,
						WEBSITE_STATUS_TRANSFER,
					),
				),
				'fields' => array(
					'id',
					'domain_primary',
				),
			)
		);

		$other_websites = $this->Website->find(
			'list',
			array(
				'conditions' => array(
					'visible' => true,
					'NOT' => array(
						'status'  => array(
							WEBSITE_STATUS_ACTIVE,
							WEBSITE_STATUS_TRANSFER,
						)
					),
				),
				'fields' => array(
					'id',
					'domain_primary',
				),
			)
		);

		$script_total    = count($websites) + count($other_websites) + 1;
		$script_count    = 0;
		$date_start      = $this->Date->days_ago(1) . ' 00:00:00';
		$date_end        = $this->Date->yesterday_end();
		$date_time_start = strtotime($date_start);
		$date_time_end   = strtotime($date_end);
		$websites_ids    = implode(',', array_keys($websites));
		$empty_stats     = array('clicks' => 0, 'impressions' => 0, 'traffic' => 0);

		$this->Timer->progress_set(0);
		$this->Timer->running_set();

		$stats             = array();
		$datas             = array();
		$temp_websites_ids = $websites;

		$stats = $this->Stats->get_websites_widget_stats(
			$websites_ids,
			$date_time_start,
			$date_time_end,
			0
		);

        if ($this->cache_on) {
        	echo 'Start to save on cache websites for yesterday... ';
        	foreach ($stats as $website_id => $website_stats) {
        		$cache_key = 'get_websites_widget_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
				$this->Website->memcached_set_json($cache_key, $website_stats, 12 * HOUR);
	            unset($temp_websites_ids[$website_id]);
	        }
	        debug_memory('Done');

	        // Save empty websites on the memcached
	        echo 'Start to save on cache empty websites for yesterday... ';
	        foreach($temp_websites_ids as $website_id => $website_name) {
	        	$cache_key = 'get_websites_widget_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
				$this->Website->memcached_set_json($cache_key, $empty_stats, 12 * HOUR);
	        }
	        debug_memory('Done');
        }

        // Request and cache data for MANAGEMENT_WIDGET_ROLLING_DAYS
		$date_start        = $this->Date->days_ago(MANAGEMENT_WIDGET_ROLLING_DAYS) . ' 00:00:00';
		$date_time_start   = strtotime($date_start);
		$stats             = array();
		$datas             = array();
		$temp_websites_ids = $websites;

		$stats = $this->Stats->get_websites_widget_stats(
			$websites_ids,
			$date_time_start,
			$date_time_end,
			0
		);

        if ($this->cache_on) {
        	echo 'Start to save on cache websites for MANAGEMENT_WIDGET_ROLLING_DAYS... ';
        	foreach ($stats as $website_id => $website_stats) {
				$cache_key = 'get_websites_widget_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
				$this->Website->memcached_set_json($cache_key, $website_stats, 12 * HOUR);
	            unset($temp_websites_ids[$website_id]);
	        }
	        debug_memory('Done');

	        // Save empty websites on the memcached
	        echo 'Start to save on cache empty websites for MANAGEMENT_WIDGET_ROLLING_DAYS... ';
	        foreach($temp_websites_ids as $website_id => $website_name) {
	        	$cache_key = 'get_websites_widget_stats::'.md5("{$website_id}:{$date_start}:{$date_end}:");
				$this->Website->memcached_set_json($cache_key, $empty_stats, 12 * HOUR);
	        }
	        debug_memory('Done');
        }

		$script_count++;
		$this->Timer->progress_set($script_count, $script_total);
		$this->Timer->running_set();

		$widget_use_lifetime_ctr                  = $this->Setting->get('WIDGET_USE_LIFETIME_CTR');
		$widget_significance_impression_threshold = $this->Setting->get('WIDGET_SIGNIFICANCE_IMPRESSION_THRESHOLD');

		$total_websites = $websites;
		foreach ($other_websites as $website_id => $domain_primary) {
			$total_websites[$website_id] = $domain_primary;
		}
		unset($other_websites);
		ksort($total_websites);

		$oHub = new \CI\Hub(new \CI\Hub\DataSource\MyArray());

		foreach ($total_websites as $website_id => $website_domain) {
			echo "Precaching Pages from Website {$website_id}... ";
			$page_stats     = array();
			$widget_stats   = array();
			$pages_ids      = array();
			$stats          = array();

			$domain_bitfield = $oHub->idToBit($website_domain);

			$query = "SELECT page_id, shown_website_id, type, `key`
					  FROM widget_analytics
					  WHERE
					      visible = 1 AND
					      shown_website_id = {$website_id} AND
					      domain_bitfield & {$domain_bitfield} AND
					      {$widget_significance_impression_threshold} < num_display
					  GROUP BY page_id, shown_website_id, type, `key`";
	        $page_analytics = $this->Website->query_read($query, false);
	        unset($query);

			// Save on memcached the stats for the pages of the website
			if (!$widget_use_lifetime_ctr && !empty($page_analytics)) {
				foreach ($page_analytics as $element) {
					$analytic = $element['widget_analytics'];
					$cache_key = 'get_pages_widget_stats::' . md5(
						"{$analytic['page_id']}:{$date_start}:{$date_end}:{$analytic['shown_website_id']}:{$analytic['type']}:{$analytic['key']}"
					);
					$cache_key_alter = 'get_pages_widget_stats::' . md5(
						"{$analytic['page_id']}:{$date_start}:{$date_end}:{$analytic['shown_website_id']}:-1:-1"
					);

					$this->Website->memcached_set_json($cache_key, $empty_stats, 12 * HOUR);
					$this->Website->memcached_set_json($cache_key_alter, $empty_stats, 12 * HOUR);
					$pages_ids[] = $analytic['page_id'];
					unset($cache_key);
					unset($cache_key_alter);
				}

				if (!empty($pages_ids)) {
					$pages_ids_list = implode(',', $pages_ids);

					echo ' pages: ',count($pages_ids). '...';

					unset($page_analytics);
					unset($pages_ids);

					$query = "SELECT page_id, shown_website_id, type, `key`, SUM(clicks) AS clicks, SUM(impressions) AS impressions, SUM(traffic) AS traffic
						      FROM stats_widget
							  WHERE
							  	  created >= {$date_time_start} AND
							  	  created <= {$date_time_end} AND
							  	  page_id IN ({$pages_ids_list})
						  	  GROUP BY page_id, shown_website_id, type, `key`";
					$widget_stats = $this->Stats->query_read($query, false);
					unset($query);

					if (is_array($widget_stats)) {
						echo ' stats: ',count($widget_stats). '...';
						$widget_stats_sum = array();

						foreach ($widget_stats as $stats) {
							$stats[0] = array(
								'clicks'      => (int) $stats[0]['clicks'],
								'impressions' => (int) $stats[0]['impressions'],
								'traffic'     => (int) $stats[0]['traffic'],
							);

							$cache_key = 'get_pages_widget_stats::' . md5(
								"{$stats['stats_widget']['page_id']}:{$date_start}:{$date_end}:{$stats['stats_widget']['shown_website_id']}:{$stats['stats_widget']['type']}:{$stats['stats_widget']['key']}"
							);

							$id = implode(
								'_',
								array(
									$stats['stats_widget']['page_id'],
									$stats['stats_widget']['shown_website_id']
								)
							);

							if (isset($widget_stats_sum[$id])) {
								$widget_stats_sum[$id]['clicks']      += $stats[0]['clicks'];
								$widget_stats_sum[$id]['impressions'] += $stats[0]['impressions'];
								$widget_stats_sum[$id]['traffic']     += $stats[0]['traffic'];
							} else {
								$widget_stats_sum[$id] = $stats[0];
							}

							$this->Website->memcached_set_json($cache_key, $stats[0], 12 * HOUR);
							unset($cache_key);
						}

						foreach ($widget_stats_sum as $id => $stats) {
							$id = explode('_', $id);
							$cache_key_alter = 'get_pages_widget_stats::' . md5(
								"{$id[0]}:{$date_start}:{$date_end}:{$id[1]}:-1:-1"
							);
							$this->Website->memcached_set_json($cache_key_alter, $stats, 12 * HOUR);
						}
						unset($widget_stats);
					}
				} else {
					echo ' pages: 0...';
				}
			}

			if (isset($websites[$website_id])) {
				// Active pages
				$pages = $this->Page->find(
					'list',
					array(
						'conditions' => array(
							'visible' => true,
							'status'=> PAGE_STATUS_APPROVED,
							'website_id' => $website_id
						),
						'fields' => 'id'
					)
				);

				// Active pages
				$query = "SELECT page_id, SUM(clicks) AS clicks, SUM(impressions) AS impressions, SUM(traffic) AS traffic
						  FROM stats_widget
						  WHERE website_id = {$website_id} AND created >= {$date_time_start} AND created <= {$date_time_end}
						  GROUP BY page_id";
		        $pages_stats = $this->Stats->query_read($query, false);
		        unset($query);

		        foreach ($pages_stats as $stats) {
		        	$stats[0] = array(
						'clicks'      => (int) $stats[0]['clicks'],
						'impressions' => (int) $stats[0]['impressions'],
						'traffic'     => (int) $stats[0]['traffic'],
					);
		        	$cache_key = 'get_pages_widget_stats::'.md5("{$stats['stats_widget']['page_id']}:{$date_start}:{$date_end}::-1:-1");
					$this->Website->memcached_set_json($cache_key, $stats[0], 12 * HOUR);
					unset($pages[$stats['stats_widget']['page_id']]);
					unset($cache_key);
		        }
		        unset($page_stats);

		        foreach ($pages as $page_id) {
		        	$cache_key = 'get_pages_widget_stats::'.md5("{$page_id}:{$date_start}:{$date_end}::-1:-1");
					$this->Website->memcached_set_json($cache_key, $empty_stats, 12 * HOUR);
		        }
		        unset($pages);
			}

			debug_memory('Done');

			$script_count++;
			$this->Timer->progress_set($script_count, $script_total);
			$this->Timer->running_set();
		}
		unset($websites);

		/* Save off timer */
		$data = $this->Timer->set_memory_limit();
		$this->Timer->stop_save($data);
	}

	function page_widget_ctr_range($page_id = null) {
		Configure::write('debug', 0);
		$this->autoRender = false;

		$end_date = $this->Date->yesterday_end();
		$start_date = $this->Date->day_start($this->Date->date_subtract($end_date, 9));

		$io = array();
		while(strtotime($start_date) < strtotime($end_date)) {
			$stats = $this->Stats->get_page_widget_stats(
				$page_id, $start_date, $this->Date->day_end($start_date)
			);
			$io_value = 0;
			if (!empty($stats['impressions']) && !empty($stats['clicks'])) {
				$io_value = $stats['clicks'] / $stats['impressions'] * 100;
			}
			$io[] = $io_value;
			$start_date = $this->Date->day_start($this->Date->date_add($start_date, 1));
		}
		return implode(",",$io);
	}
}

?>