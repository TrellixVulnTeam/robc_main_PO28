<?
/*
 * Date functions
 *
 * Version: 1.4
 *
 */
define("TIME_FORMAT", "Y-m-d H:i:s");
define("DATE_FORMAT", "Y-m-d");
if (!defined("DAY_TIMESTAMP")) {
	define("DAY_TIMESTAMP", (60*60*24));
}

class DateComponent extends Object {

	function age($date_start) {
		$num_days = $this->num_days($date_start, date(DATE_FORMAT), 1);

		if ($num_days > 0) {
			$num_days--;	// Subtract 1 since we don't want inclusive
		}

		return $num_days;
	}

	/* Depricated */
	function get_age($date_start) {
		return $this->age($date_start);
	}

	/* Get number of days in between (inclusively) */
	function num_days_timestamp($time_start, $time_end, $allow_negative = 0) {
		// Need PHP 5.3
		$date_start = new DateTime(date(DATE_FORMAT, $time_start));
		$date_end = new DateTime(date(DATE_FORMAT, $time_end));
		$interval = $date_start->diff($date_end);

		if ($allow_negative && $interval->invert) {
			$days = $interval->days * -1;
		} else {
			$days = $interval->days + 1;
		}

		return $days; // Add 1 since this in inclusive
	}

	function num_hours_timestamp($time_start, $time_end) {
		// Need PHP 5.3
		$date_start = new DateTime(date(TIME_FORMAT, $time_start));
		$date_end = new DateTime(date(TIME_FORMAT, $time_end));
		$interval = $date_start->diff($date_end);

		return ($interval->h + 1); // Add 1 since this in inclusive
	}

	/* Depricated */
	function get_num_days_time($time_start, $time_end) {
		return $this->num_days_timestamp($time_start, $time_end);
	}

	/* Get number of days in between (inclusively) */
	function num_days($date_start, $date_end, $allow_negative = 0) {
		$time_start = strtotime($date_start);
		$time_end = strtotime($date_end);

		return $this->num_days_timestamp($time_start, $time_end, $allow_negative);
	}

	function num_hours($date_start, $date_end) {
		$time_start = strtotime($date_start);
		$time_end = strtotime($date_end);

		return $this->num_hours_timestamp($time_start, $time_end);
	}

	function num_points($date_start, $date_end, $time_unit) {
		switch ($time_unit) {
			case TIME_UNIT_HOUR:
			return $this->num_hours($date_start, $date_end);
			break;
			case TIME_UNIT_DAY:
			return $this->num_days($date_start, $date_end);
			break;
			case TIME_UNIT_WEEK:
			plat_assert(0);
			break;
			case TIME_UNIT_MONTH:
			plat_assert(0);
			break;
		}

		return $this->num_days_timestamp($time_start, $time_end);
	}

	function num_points_timestamp($datetime_start, $datetime_end, $time_unit) {
		switch ($time_unit) {
			case TIME_UNIT_HOUR:
			return $this->num_hours_timestamp($datetime_start, $datetime_end);
			break;
			case TIME_UNIT_DAY:
			default:
			return $this->num_days_timestamp($datetime_start, $datetime_end);
			break;
			case TIME_UNIT_WEEK:
			plat_assert(0);
			break;
			case TIME_UNIT_MONTH:
			plat_assert(0);
			break;
		}
	}

	/* Depricated */
	function get_num_days($date_start, $date_end) {
		return $this->num_days($date_start, $date_end);
	}

	function num_weeks($date_start, $date_end) {
		return floor($this->num_days($date_start, $date_end) / 7);
	}

	function point_add($base_date, $num_points, $time_unit) {
		switch ($time_unit) {
			case TIME_UNIT_HOUR:
			return $this->hour_add($base_date, $num_points);
			break;
			case TIME_UNIT_DAY:
			return $this->date_add($base_date, $num_points);
			break;
			case TIME_UNIT_WEEK:
			plat_assert(0);
			break;
			case TIME_UNIT_MONTH:
			plat_assert(0);
			break;
		}
	}

	function hour_add($base_date, $num_hours) {
		$start_time = strtotime($base_date);

		$day = date(TIME_FORMAT, strtotime("+".$num_hours." hours", $start_time));

		return $day;
	}

	function date_add($base_date, $num_days) {
		$start_time = strtotime($base_date);

		$day = date(DATE_FORMAT, strtotime("+".$num_days." days", $start_time));

		return $day;
	}

	function date_subtract($base_date, $num_days) {
		$day = $this->date_add($base_date, -1 * $num_days);

		return $day;
	}

	function days_ago($num_days) {
		$day = $this->date_subtract($this->today(), $num_days);

		return $day;
	}

	function is_today($date) {
		if (date(DATE_FORMAT, strtotime("midnight ".$date)) == date(DATE_FORMAT)) {
			return 1;
		} else {
			return 0;
		}
	}

	function is_current_hour($datetime) {
		if (!$this->is_today($datetime)) {
			return 0;
		}

		if (date("G", $datetime) == date("G")) {
			return 1;
		} else {
			return 0;
		}
	}

	function time_minutes_before($minutes) {
		return date(TIME_FORMAT, strtotime("-".$minutes." minutes"));
	}

	/* Depricated */
	function get_time_minutes_before($minutes) {
		return $this->time_minutes_before($minutes);
	}

	function day_before($date) {
		return date(DATE_FORMAT, strtotime("-1 days midnight", strtotime($date)));
	}

	/* Depricated */
	function get_day_before($date) {
		return $this->day_before($date);
	}

	function yesterday() {
		return date(DATE_FORMAT, strtotime("yesterday midnight"));
	}

	function yesterday_start() {
		return $this->day_start($this->yesterday());
	}

	/* Depricated */
	function get_yesterday() {
		return $this->yesterday();
	}

	function yesterday_end() {
		return $this->day_end($this->yesterday());
	}

	function day_start($date) {
		return date(TIME_FORMAT, strtotime("midnight", strtotime($date)));
	}

	/* Depricated */
	function get_day_start($date) {
		return $this->day_start($date);
	}

	function day_end($date) {
		return date(TIME_FORMAT, strtotime("23:59:59", strtotime($date)));
	}

	function hour_start($datetime) {
		$date = date(DATE_FORMAT, strtotime($datetime));

		$hour = date("G", strtotime($datetime));

		return $date." ".$hour.":00:00";
	}

	function hour_end($datetime) {
		$date = date(DATE_FORMAT, strtotime($datetime));

		$hour = date("G", strtotime($datetime));

		return $date." ".$hour.":59:59";
	}

	/* Depricated */
	function get_day_end($date) {
		return $this->day_end($date);
	}

	function now() {
		return date(TIME_FORMAT);
	}

	function format($date) {
		return date(DATE_FORMAT, strtotime($date));
	}

	function format_timestamp($datetime) {
		return date(DATE_FORMAT, $datetime);
	}

	/* Depricated */
	function timestamp_format($datetime) {
		return date(DATE_FORMAT, $datetime);
	}

	function format_time($datetime) {
		return date(TIME_FORMAT, strtotime($datetime));
	}

	/* Depricated */
	function time_format($datetime) {
		return date(TIME_FORMAT, strtotime($datetime));
	}

	function format_timestamp_time($datetime) {
		return date(TIME_FORMAT, $datetime);
	}

	/* Depricated */
	function timestamp_time_format($datetime) {
		return date(TIME_FORMAT, $datetime);
	}

	function today() {
		return date(DATE_FORMAT);
	}

	function human_timing ($time) {
		// to get the time since that moment
		$time = time() - $time;

		$tokens = array (
			31536000 => 'year',
			2592000 => 'month',
			604800 => 'week',
			86400 => 'day',
			3600 => 'hour',
			60 => 'minute',
			1 => 'second'
		);

		foreach ($tokens as $unit => $text) {
			if ($time < $unit) {
				continue;
			}
			$numberOfUnits = floor($time / $unit);
			return $numberOfUnits.' '.$text.(($numberOfUnits>1)?'s':'');
		}
	}

}
?>
