%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2005 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
%# REST/1.0/Forms/asset/default
%#
<%ARGS>
$id
$changes => {}
$fields => undef # these are the fields passed to the rt "-f" flag.
</%ARGS>
<%perl>
my @comments;
my ($c, $o, $k, $e) = ("", [], {}, 0);
my %data   = %$changes;
my $asset = new RTx::AssetTracker::Asset $session{CurrentUser};
my @people = ActiveRoleArray();
my $p_rx = join('|',@people);
my $people = qr/^(?:$p_rx)$/i;
my @basics = qw(Name Status Type Description); # list of Basic Asset fields
my $basics = qr/^(?:Name|Status|Type|Description)$/i;
my $cfpre = qr/^CF-/i;
my $ip = qr/^IPs$/i;
my %Basics;
my %People;
my %CFs;
my %basicsmap = map {lc $_ => $_} @basics;
my %peoplemap = map {lc $_ => $_} @people;

# Want proper capitalisation on incoming fields - the rt client lc's some things.
# Makes things cleaner.
foreach my $k (keys %data) {
  $basicsmap{$k} && ($data{$basicsmap{$k}} = delete $data{$k});
  $peoplemap{$k} && ($data{$peoplemap{$k}} = delete $data{$k});
}

# Not used much yet - was pre-work for a re-vamp
foreach my $k (keys %data) {
  $Basics{$k} = $data{$k} if ($k =~ /$basics/); 
  $People{$k} = $data{$k} if ($k =~ /$people/);
  $CFs{$k} = $data{$k} if ($k =~ /$cfpre/);
}

# Looking for an existing asset

if ($id ne 'new') { # Load existing asset
    $asset->Load($id);
    if (!$asset->Id) {
        return [ "# Asset $id does not exist.", [], {}, 1 ];
    }
    elsif (!$asset->CurrentUserHasRight('ShowAsset') ||
           (%data && !$asset->CurrentUserHasRight('ModifyAsset')))
    {
        my $act = %data ? "modify" : "display";
        return [ "# You are not allowed to $act asset $id.", [], {}, 1 ];
    }
}
else { # New asset
    if (%data == 0) { # ... user submitted no field values
        # GET asset/new: Return a suitable default form.
        # Can't return Custom Fields at this point because we don't know what type it is
        # Won't return IPs yet either because it may not be appropriate for the type of asset it's
        # going to be.
        
        my $Ffields = {
                id               => "asset/new",
                Name             => "",
                Status           => "",
                Type             => "",
                Description      => "",
            };
        # Add Role informtion, dealing with custom roles
        foreach my $role (@people) {
          $Ffields->{$role} = [];
        }
          
        return [
            "# Required: Name, Status, Type",
            [ qw(id Name Status Type Description), @people ],
            $Ffields,
            0
        ];
    }
    else { # ... user submitted some field values 
      foreach my $k (keys %Basics) {
        delete $data{$k};
      }

      foreach my $k (keys %People) {
        delete $data{$k};
      }

      # Need to pass any custom fields we're given in order to satisfy Mandatory CF checks.
      foreach my $k (keys %CFs) {
        delete $data{$k};
        my $acf = RT::CustomField->new( $RT::SystemUser );
        my $cfk = $k;
        $cfk =~ s/$cfpre//i;
        my $assettype = new RTx::AssetTracker::Type($RT::SystemUser) ;
        $assettype->Load($Basics{'Type'});
        my ($n,$s) = $acf->LoadByName( Name => $cfk, Type => $assettype->Id );
        # if it's not atype-specific CF, maybe it's a Global CF ...
        unless ($n) {# if it's not atype-specific CF, maybe it's a Global CF ...
          ($n,$s) = $acf->LoadByName( Name => $cfk, Type => '0');
        }
        unless ($n) { 
            push @comments, "# $cfk: $s";
            goto DONE;
        }
        
        if ($acf->SingleValue) {
          $Basics{"CustomField-".$acf->Id()} = delete $CFs{$k};
        }
        else {
          $Basics{"CustomField-".$acf->Id()} = vsplit(delete $CFs{$k});
        }
  
      }

      my($AID,$TRID,$TERR) = $asset->Create(%Basics, %People);
      unless ($AID) {
        push(@comments, "# Could not create asset.");
        push(@comments, "# " . $TERR);
        goto DONE;
      }
      
      delete $data{id};
      $id = $asset->Id;
      push(@comments, "# Asset $id created.");
      goto DONE if %data == 0;

      }
}

# Not a new asset - we've either just created it above or it already existed
if (%data == 0) {
    my ($time, $key, $val, @data);

# Query must come with an asset Id
    push @data, [ id    => "asset/".$asset->Id   ];

# Might also come with some basic fields
    foreach (@basics) {
	    next unless (!%$fields || (exists $fields->{lc $_}));
	    if (/^Type$/) { # Because Type is stored as an ID, not a name - needs special treatment on updates too - see below
	    	push @data, [$_ => $asset->TypeObj->Name ];
	    }
      else {
      	push @data, [$_ => $asset->$_ ];
      }
    }
# Might also come with some Role fields. Have to deal with groups, users and mixtures.
# Also have to honour the various config flags which determine display.

    foreach my $key (@people) {
	    next unless (!%$fields || (exists $fields->{lc $key}));
	    my $rolegroup = $key . 'RoleGroup';
    #  my @members = ($asset->$rolegroup->MembersObj);
      my $rolegroupmembers = [];
      
      # Watchers for this Asset type
      if ($RTx::AssetTracker::ShowTypeWatchersInAsset) {
        my $rg = $asset->TypeObj->$rolegroup->MembersObj;
          while ( my $rgm = $rg->Next()) {
            if ($rgm->MemberObj->IsGroup) {
              if ($RTx::AssetTracker::ShowGroupMembers) {
                my $us = $rgm->MemberObj->Object->UserMembersObj();
                my @users;
                while (my $u = $us->Next()) {
                  push @users, $u->RealName . ' <' . $u->EmailAddress . '>';
                }
                push @$rolegroupmembers,  'TYPE GROUP [' . $rgm->MemberObj->Object->Name . ']' . ' (' . join(';',@users) . ')';
              }
              else {
                push @$rolegroupmembers,  'TYPE GROUP ['. $rgm->MemberObj->Object->Name . ']';
              }
            }
            elsif ($rgm->MemberObj->IsUser) {
              push @$rolegroupmembers, 'TYPE ' . $rgm->MemberObj->Object->RealName . ' <' . $rgm->MemberObj->Object->EmailAddress . '>';
            }
          }
      }
      
      # Watchers for this Asset in particular
      my $rg = $asset->$rolegroup->MembersObj;
      while ( my $rgm = $rg->Next()) {
        if ($rgm->MemberObj->IsGroup) {
          if ($RTx::AssetTracker::ShowGroupMembers) {
            my $us = $rgm->MemberObj->Object->UserMembersObj();
            my @users;
            while (my $u = $us->Next()) {
              push @users, $u->RealName . ' <' . $u->EmailAddress . '>';
            }
            push @$rolegroupmembers,  'GROUP [' . $rgm->MemberObj->Object->Name . ']' . ' (' . join(';',@users) . ')';
          }
          else {
            push @$rolegroupmembers,  'GROUP ['. $rgm->MemberObj->Object->Name . ']';
          }
        }
        elsif ($rgm->MemberObj->IsUser) {
          push @$rolegroupmembers, $rgm->MemberObj->Object->RealName . ' <' . $rgm->MemberObj->Object->EmailAddress . '>';
        }
      }
      push @data, [ $key => $rolegroupmembers ];
    }

    
# Might come with some IPs
    if ($RTx::AssetTracker::EnableIP) {
    	my $aips = $asset->IPs;
    	my @aips;
      while (my $aip = $aips->Next()) {
      	push @aips, "[Id=".$aip->Id . "]" .
      	            " IF=" . $aip->Interface .
      	            " IP=" . $aip->IP .
      	            " MAC=" . $aip->MAC .
      	            " TCP=(" . join(' ', sort {$a<=>$b} $aip->TCPPorts) . ")" .
      	            " UDP=(" . join(' ', sort {$a<=>$b} $aip->UDPPorts) . ")"
      	            ;
      }
      push @data, [ "IPs" => [ @aips ] ];
    }

# Custom fields
    my $CustomFields = $asset->CustomFields;
    while (my $CustomField = $CustomFields->Next()) {
      next unless (!%$fields || exists $fields->{lc "CF-".$CustomField->Name});
      next unless $CustomField->CurrentUserHasRight('SeeCustomField');
      my $CFvalues = $asset->CustomFieldValues($CustomField->Id);
      my @CFvalues;
      while (my $CFvalue = $CFvalues->Next()) {
      	push @CFvalues, $CFvalue->Content;
      }
      push @data, [ "CF-".$CustomField->Name => \@CFvalues ];
    }

    my %k = map {@$_} @data;
    $o = [ map {$_->[0]} @data ];
    $k = \%k;

}
else { # Alteration of a just created asset or an already existing asset
    my ($get, $set, $key, $val, $n, $s);
    $n = 1;

    foreach $key (keys %data) {
        $val = $data{$key};
        
        # Only Owner and Admin fields can have multiple values
        if (ref $val eq 'ARRAY') {
            unless ($key =~ /$people/ or $key =~ /$ip/) {
                $n = 0;
                push @comments, "# $key may have only one value.";
                goto SET;
            }
        }

        if ($key =~ /$basics/) { # For basic fields as defined above for the @basics array
            $set = "Set$key";

            next if (($val eq $asset->$key)||
                     ($asset->$key =~ /^\d+$/ && $val == $asset->$key)||
                     (($key eq "Type") && ($val == $asset->TypeObj->Name)) # Because Type is stored as an ID, not a name
                     );
            
            ($n, $s) = $asset->$set(Value => "$val");
            unless ($n) {
              push @comments, "# $s";
              goto SET;
            }
        }
        elsif ($key =~ /$people/) { # Deals with adding/changing Role fields
            my ($p, @msgs);
            my $ameth = $key . "RoleGroup";
            
            my %new;
            my $group_p = RT::Group->new( $RT::SystemUser );
            foreach my $nmember (@{ vsplit($val) }) {
              if ($nmember =~ /^(TYPE\s+)?GROUP\s+\[([^\]]+)\]/){ # Group
                $group_p->LoadUserDefinedGroup($2);
                $new{'GROUP' . $2} = $1 ? 0 : $group_p->PrincipalObj->Id;
                
              }
              elsif ($nmember =~ /^(TYPE\s+)?[^<]+<([^>]+)>$/) { # User
                $new{$2} = $1 ? 0 : 1;
              }
            }
            
            my %old;
            if ($RTx::AssetTracker::ShowTypeWatchersInAsset) {
               my $groupmembers = $asset->TypeObj->$ameth->MembersObj;
               while (my $omember = $groupmembers->Next()) {
                if ($omember->MemberObj->IsGroup) {
                  $old{'GROUP' . $omember->MemberObj->Object->Name} = 0;;
                }
                elsif ($omember->MemberObj->IsUser) {
                  $old{$omember->MemberObj->Object->EmailAddress} = 0;
                }
              }    
            }
            
            my $groupmembers = $asset->$ameth->MembersObj;
            while (my $omember = $groupmembers->Next()) {
              if ($omember->MemberObj->IsGroup) {
                $old{'GROUP' . $omember->MemberObj->Object->Name} = $omember->MemberObj->Id;
              }
              elsif ($omember->MemberObj->IsUser) {
                $old{$omember->MemberObj->Object->EmailAddress} = $omember->MemberObj->Id;
              }
            }
            my $type = $key;

            # Process deletions
            foreach my $p (keys %old) {
              unless (exists $new{$p}) {
                if (! $old{$p}) { # Trying to delete a Type watcher
                  $n = 0;
                  $s = "$p: Cannot delete Type watchers via a particular Asset";
                }
                elsif ($p =~ /^GROUP/) { # deleting a group
                  ($n, $s) = $asset->DeleteWatcher(Type => $type,
                                                    PrincipalId => $old{$p});
                }
                else { # deleting a user
                  ($n, $s) = $asset->DeleteWatcher(Type => $type,
                                                    Email => $p);
                }
              }
              push @msgs, [ $n, $s ];
            }
            
            # Process additions
            foreach my $p (keys %new) {
              unless (exists $old{$p}) {
                if (! $new{$p}) { # Trying to add a Type watcher
                  $n = 0;
                  $s = "$p: Cannot add Type watchers via a particular Asset";
                }
                elsif ($p =~ /^GROUP/) { # adding a group
                  unless ($asset->IsWatcher(Type => $type, PrincipalId => $new{$p})) {
                    ($n, $s) = $asset->AddWatcher(Type => $type, PrincipalId => $new{$p});
                  }
                }
                else {
                  unless ($asset->IsWatcher(Type => $type, Email=> $p)) {
                    ($n, $s) = $asset->AddWatcher(Type => $type, Email => $p);
                  }
                }
              }              
              push @msgs, [ $n, $s ];
            }
            
            # collate all error messages from the above transactions into one string
            $n = 1;
            if (@msgs = grep {$_->[0] == 0} @msgs) {
                $n = 0;
                $s = join "\n", map {"# ".$_->[1]} @msgs;
                $s =~ s/^# //;
            }
        }
        # IPs
        elsif ($key =~ /$ip/) {
        	my @msgs;
        	my %naips;
        	my %aipchanges;
        	my $caips = $asset->IPs;
          foreach my $naip (@{ vsplit($val) }) {
          	# Parse REST IP values list
          	$naip =~ /^\[Id=(\d+|new)\]/ && (my $naipID = $1);
            $naip =~ /IF=([^\s]+)\b/ && ($naips{$naipID}->{'Interface'} = $1);
            $naip =~ /IP=([^\s]+)\b/ && ($naips{$naipID}->{'IP'} = $1);
            $naip =~ /MAC=([^\s]+)\b/ && ($naips{$naipID}->{'MAC'} = $1);
            $naip =~ /TCP=\(([^\)]+)\)\s*\b/ && ($naips{$naipID}->{'TCP'} = $1);
            $naip =~ /UDP=\(([^\)]+)\)/ && ($naips{$naipID}->{'UDP'} = $1);
          }
          # Get list of current IP Ids
          my @caipids;
          while (my $caip = $caips->Next()) {
          	push @caipids, $caip->Id;
          }
          
        	# Process deletions
        	$caips->GotoFirstItem();
        	while (my $caip = $caips->Next()) {
        		next if grep { $_ eq $caip->Id } keys %naips;
        		($n, $s) = $asset->DeleteIP(IP => $caip->Id);
        		unless ($n) {
          	  $n = 0;
              $s = "Could not delete IP with Id ".$caip->Id;
              push @msgs, [ $n, $s ];
            }
        	}
        	# Process additions
        	foreach my $naip (keys %naips) {
        		next unless ($naip eq "new");
        		my @TCPPorts = split(/\s+/, $naips{$naip}->{'TCP'});
            my @UDPPorts = split(/\s+/, $naips{$naip}->{'UDP'});
		        ($n, $s) = $asset->AddIP( IP => $naips{$naip}->{'IP'},
                                              Interface => $naips{$naip}->{'Interface'},
                                              MAC => $naips{$naip}->{'MAC'},
                                              TCPPorts => \@TCPPorts,
                                              UDPPorts => \@UDPPorts);
            unless ($n) {
          	  $n = 0;
              $s = "Could not Add IP " . $naips{$naip}->{'IP'} . " to Asset ID ".$asset->Id;
              push @msgs, [ $n, $s ];
            }    		
        	}

        	# Process Port modifications (AT doesn't let you modify anything else for existing IPs)
        	$caips->GotoFirstItem();
        	while (my $caip = $caips->Next()) {
          	next unless grep { $_ eq $caip->Id } keys %naips;
          	my @newTCPPorts = split(/\s+/, $naips{$caip->Id}->{'TCP'});
            my @newUDPPorts = split(/\s+/, $naips{$caip->Id}->{'UDP'});
          	my @currTCP_ports = $caip->TCPPorts;
          	my @currUDP_ports = $caip->UDPPorts;
          	# Port Deletions
          	# TCP
          	foreach my $port (@currTCP_ports) {
              next if  grep { $_ eq $port } @newTCPPorts;
              ($n, $s) = $caip->DeleteTCPPort($port);
              unless ($n) {
          	    $n = 0;
                $s = "Could not Delete TCP Port $port from IP " . $naips{$caip->Id}->{'IP'} . " in Asset ID ".$asset->Id;
                push @msgs, [ $n, $s ];
              }    		
            }
            # UDP
            foreach my $port (@currUDP_ports) {
              next if  grep { $_ eq $port } @newUDPPorts;
              ($n, $s) = $caip->DeleteUDPPort($port);
              unless ($n) {
          	    $n = 0;
                $s = "Could not Delete UDP Port $port from IP " . $naips{$caip->Id}->{'IP'} . " in Asset ID ".$asset->Id;
                push @msgs, [ $n, $s ];
              }    		
            }
            # Port Additions
          	# TCP
          	foreach my $port (@newTCPPorts) {
              next if  grep { $_ eq $port } @currTCP_ports;
              ($n, $s) = $caip->AddTCPPort($port);
              unless ($n) {
          	    $n = 0;
                $s = "Could not Add TCP Port $port from IP " . $naips{$caip->Id}->{'IP'} . " in Asset ID ".$asset->Id;
                push @msgs, [ $n, $s ];
              }    		
            }
            # UDP
            foreach my $port (@newUDPPorts) {
              next if  grep { $_ eq $port } @currUDP_ports;
              ($n, $s) = $caip->AddUDPPort($port);
              unless ($n) {
          	    $n = 0;
                $s = "Could not Add UDP Port $port from IP " . $naips{$caip->Id}->{'IP'} . " in Asset ID ".$asset->Id;
                push @msgs, [ $n, $s ];
              }    		
            }            
          }
          $n = 1;
          if (@msgs = grep {$_->[0] == 0} @msgs) {
              $n = 0;
              $s = join "\n", map {"# ".$_->[1]} @msgs;
              $s =~ s/^# //;
          }
        }
        # Custom fields
        elsif ($key =~ /$cfpre/) {
        	my @msgs;
        	# take off leading "CF-". We must have this prefix to stop arbitrary Custom
          # field names interfering with internals and basic fields
          $key =~ s/$cfpre//i;

        	my $CustomFieldObj = RT::CustomField->new( $RT::SystemUser );
        	($n,$s) = $CustomFieldObj->LoadByName( Name => $key, Type => $asset->TypeObj->Id);
        	# if it's not atype-specific CF, maybe it's a Global CF ...
          unless ($n) {# if it's not atype-specific CF, maybe it's a Global CF ...
            ($n,$s) = $CustomFieldObj->LoadByName( Name => $key, Type => '0');
          }
          unless ($n) {
            push @msgs, [ $n, $s . " - wrong queue for CF? wrong object type for CF?" ];
            goto CFEND;
          }

        	if ($CustomFieldObj->CurrentUserHasRight('ModifyCustomField')) {
            $val =~ s/^\s+$//; # values which are just whitespace are made null to
                               # simplify mandatory/validated processing in core
                               
            # Don't change any field that hasn't changed - otherwise the History shows
            # that every field changes on changing any field.
            my $CFvalues = $asset->CustomFieldValues($key);

            # If new and old are both empty, do nothing
            goto CFEND unless ($CFvalues->Count || length($val)); 
  
            # Single-Valued Field
  		      if ($CustomFieldObj->SingleValue) {	      	
		        	if ((my $CFvalue = $CFvalues->Next()) || length($val) ) {
		        		# Skip delete unless we're going from a value to nothing (changing a value doesn't need a delete first)
		        		goto SVCFADD unless ((defined $CFvalue) && (! length($val))); 
		        		goto CFEND if ($CFvalue->Content eq $val); # Skip delete and add if there is nothing to do
            	  ($s, $n) = $asset->DeleteCustomFieldValue(Field => $CustomFieldObj, Value => $CFvalue->Content);
                push @msgs, [ $s, $n ];
        SVCFADD:
                goto CFEND unless length($val);
           	    ($s, $n) = $asset->AddCustomFieldValue(Field => $CustomFieldObj, Value => $val);
                push @msgs, [ $s, $n ];
              }
		        }
		        # Multi-Valued Field
		        elsif (! $CustomFieldObj->SingleValue) {
		        	my @val = @ { vsplit($val) };
              my @CFVALS = map {$_->Content} @{$CFvalues->ItemsArrayRef};
              
		        	# Process additions
		        	foreach my $newval (@val) {
		        	  if (! grep {$newval eq $_} @CFVALS ) {
		        	    ($s,$n) = $asset->AddCustomFieldValue(Field => $CustomFieldObj, Value => $newval);
                  push @msgs, [ $s, $n ];
		        	  }
		        	}
		        	# Process deletions
		        	foreach my $oldval (@CFVALS) {
		        	  if (! grep {$oldval eq $_} @val ) {
		        	    ($s,$n) = $asset->DeleteCustomFieldValue(Field => $CustomFieldObj, Value => $oldval);
                  push @msgs, [ $s, $n ];
		        	  }
		        	}
            }  
        	}
          else {
        	  $n = 0;
            $s = "You do not have permission to modify these custom fields";
          }
		CFEND:
          # collate all error messages from the above transactions into one string
          $n = 1;
          if (@msgs = grep {$_->[0] == 0} @msgs) {
              $n = 0;
              $s = join "\n", map {"# ".$_->[1]} @msgs;
              $s =~ s/^# //;
          }
        }
        elsif ($key ne 'id') {
            $n = 0;
            $s = "Unknown field.";
        }
    SET:
        if ($n == 0) {
            $e = 1;
            push @comments, "# $key: $s" unless ($key eq 'id');
            unless (@$o) {
            	  # This bit just re-arranges @o so that "id" is at the beginning.
                my %o = map {$_ => 1} keys %$changes;
                delete $o{id};
                @$o = ("id", sort keys %o);
                $k = $changes;
            }
        }
    }
    push(@comments, "# Asset ".$asset->id." updated.") unless $e;
}

DONE:
$c ||= join("\n", @comments) if @comments;

# return format is:
# $c: string of comments to return to user
# $o: ref to array of Field Names
# $k: ref to Field => Value hash to return to user
# $e: 1 on any error, 0 on success

return [$c, $o, $k, $e];

</%perl>
