#!/usr/bin/perl -w

# gstaples @ Gorilla Nation

use strict;
use IO::Socket;
use JSON;

sub usage() {
   print STDERR "Usage: $0 hostname [metalnr] [-m MiB] [-o OS] [-c CPU]\n";
   exit(1);
}

#defaults
my $loc="lax";
my $defmem="10";
my $defcpu="4";
my $mem;
my $cpu;
my $env="dev";
my $vertical="tp";
my $hostname="";
my $orighostname="";
my $metalnr="";
my $requestedOS="";
my $requestedVIG="";
my @vigs=();#qw/per610 per620/; # Very Important Groups


while ($ARGV[0]) {
   if ($ARGV[0] eq "-m") { shift @ARGV; $mem=shift @ARGV; next; }
   if ($ARGV[0] eq "-o") { shift @ARGV; $requestedOS=shift @ARGV; next; }
   if ($ARGV[0] eq "-g") { shift @ARGV; $requestedVIG=shift @ARGV; next; }
   if ($ARGV[0] eq "-c") { shift @ARGV; $cpu=shift @ARGV; next; }
   if ($ARGV[0] =~ m/^-/) { usage(); }
   if (!$hostname) {
      $hostname=$ARGV[0]; shift @ARGV;
      $orighostname=$hostname;
  } elsif (!$metalnr) {
      $metalnr=$ARGV[0]; shift @ARGV;
  } else {
      usage(); 
  }
}
if (!$hostname) { usage(); }

if (!$mem) {
   $mem=`nodels $hostname vm.memory 2>/dev/null`;
   chomp($mem);
   $mem=~ s/.*: //;
}
if (!$mem) {
   $mem=$defmem;
}
if ($mem < 100) {
   $mem*=1024; # convert gigs to megs
}
# All memory calculations below here are in megs...

if (!$cpu) {
   $cpu=`nodels $hostname vm.cpus 2>/dev/null`;
   chomp($cpu);
   $cpu=~ s/.*: //;
}
if (!$cpu) {
   $cpu=$defcpu;
}

if (!$metalnr) {
    $metalnr='metal@online';
}

# Metals take overhead per vm, we need to ensure have have room for this
my $vmoverhead=(0.0052*$mem) + 340 + (($cpu-1)*75);

my $power=`rpower $orighostname stat 2>/dev/null | grep on\$`;
if ($power) {
   if ($requestedOS) {
      print STDERR "Error: VM is powered on, can not override metal OS\n";
      exit(1);
   }
   if ($requestedVIG) {
      print STDERR "Error: VM is powered on, can not override metal group\n";
      exit(1);
   }
}

sub parsehostname {
   my ($hostname,$vertical,$env,$loc);
   $hostname=shift;
   $hostname=~s/.gnmedia.net//;
   my (@parts)=split(/\./,$hostname);
   $loc="lax";
   $env="dev";
   $vertical="tp";
   if (scalar @parts==4) {
      ($hostname,$vertical,$env,$loc)=(@parts);
   } elsif (scalar @parts==3) {
      ($hostname,$vertical,$env)=(@parts);
   } elsif (scalar @parts==2) {
      ($hostname,$env)=(@parts);
   } elsif (scalar @parts==1) {
      ($hostname)=(@parts);
   }
   if ($env =~ m/^lax/) {
      $env="prd";
   } elsif ($env =~ m/^prd/) {
      $env="prd";
   } elsif ($env =~ m/^stg/) {
      $env="stg";
   } else {
      $env="dev";
   }
   return ($hostname,$vertical,$env,$loc);
}

($hostname,$vertical,$env,$loc)=parsehostname($hostname);


    

my %os=();
my %groups=();
open(METALOS,"nodels $metalnr nodetype.os nodelist.groups|") or die;
while (my $line=<METALOS>) {
   if ($line =~ /(.*): nodetype.os: (.*)/) {
      $os{$1}=$2;
   }
   if ($line =~ /(.*): nodelist.groups: (.*)/) {
      $groups{$1}=$2;
   }
}


my $data;
foreach my $metal (keys %{os}) {
    my $socket = IO::Socket::INET->new
        (PeerAddr=>"$metal",
        PeerPort=>1456,
        Proto=>'tcp',
        Type=>SOCK_STREAM);
    if ($socket) {
        my $line=<$socket>;
        #print STDERR $line,"\n";
        # old # memtotal:198266812 memfree:4798124 hugepagestotal:93184 hugepagesfree:85325 loadavg:0.88
        # new # memtotal:198202204 memfree:3825176 hugepagestotal:93184 hugepagesfree:44138 hugepagesrsvd:138 loadavg:0.92
        foreach my $atom (split(" ",$line)) {
            my ($key,$value) = split(":",$atom);
            $data->{$metal}->{$key}=$value;
        }
        close $socket;
    }
}

   

foreach my $metal (keys %{$data}) {

   if (!exists $os{$metal}) {
       print STDERR "$metal excluded by noderange\n";
      delete $data->{$metal};
      next;
   }
   if (!exists $data->{$metal}->{loadavg}) {
      print STDERR "Warning: $metal missing data.\n";
      delete $data->{$metal};
      next;
   }
   if (exists $data->{$metal}->{hugepagestotal}) {
      $data->{$metal}->{totalmegs}=$data->{$metal}->{hugepagestotal} * 2; # hugepages are 2048KB
   } else {
      $data->{$metal}->{totalmegs}=$data->{$metal}->{memtotal} / 1024; # /proc/meminfo/memtotal is in bytes
   }
   $data->{$metal}->{usedmegs}=0;
   # totalmegs and usedmegs are what we actually use in our calculations

   if (exists $data->{$metal}->{hugepagesfree}) {
      # hugePagesUsed = (hpTotal - hpFree) + hpRsvd
      # hugePagesFree = hpTotal - hpUsed
      # Hugepages are 2M each so multiply this by two.
      $data->{$metal}->{hugepagesused} = ($data->{$metal}->{hugepagestotal} - $data->{$metal}->{hugepagesfree}) + $data->{$metal}->{hugepagesrsvd};
      $data->{$metal}->{freemegs} = $data->{$metal}->{hugepagestotal} - $data->{$metal}->{hugepagesused};
      $data->{$metal}->{freemegs} *= 2;
   } else {
      $data->{$metal}->{freemegs}=$data->{$metal}->{memfree} / 1024; # /proc/meminfo/memtotal is in bytes
   }
}
my @metalsbyload=sort {$data->{$a}->{loadavg} <=> $data->{$b}->{loadavg}} keys %{$data};
print STDERR "Metal machines sorted by load average.\n";
#print join("\n",@metalsbyload);

open(VMDATA,"nodels vm vm.host vm.memory|") or die;
my $host="";
my $memory="";
my $metalos="";
my $metalvig="";
my $vmhost="";
while (my $line=<VMDATA>) {
   #tester8.tp.dev.lax.gnmedia.net: vm.memory: 1024
   #tester8.tp.dev.lax.gnmedia.net: vm.host: metal-1419.lax.gnmedia.net
   # This weird parsing is because I don't trust the order I get these lines from xcat
   if ($line =~ /(.*): vm.(.*): (.*)/) {
      $memory=$3 if ($2 eq "memory");
      $host=$3 if ($2 eq "host");
      if ($memory && $host && exists $data->{$host}) {
         $data->{$host}->{usedmegs}+=$memory;
         push(@{$data->{$host}->{domains}}, $1);
         if ($1 eq "$orighostname") {
            $metalos=$os{$host} ? $os{$host} : "";
            foreach my $vig (@vigs) {
                if ($groups{$host} =~ /\b$vig\b/) {
                    $metalvig=$vig; # if power on, then new metal must have this group
                }
            }
         }
         #print STDERR "$host $memory (".$data->{$host}->{usedmegs}.")\n";
         $memory="";
         $host="";
      }
   }
}

$metalos=$requestedOS ? $requestedOS : $metalos;
$metalvig=$requestedVIG ? $requestedVIG : $metalvig;

my @candidatesbyload;
foreach my $candidatemetal (@metalsbyload) {
   my $freemegs=$data->{$candidatemetal}->{totalmegs} - $data->{$candidatemetal}->{usedmegs}; #leave 2g for OS
   # be conservative and use the lesser of the two values
   if ($freemegs > $data->{$candidatemetal}->{freemegs}) {
      $freemegs = $data->{$candidatemetal}->{freemegs};
   }
   if ($mem + $vmoverhead > $freemegs) {
      print STDERR "Allocator: $candidatemetal excluded by memory ($mem + $vmoverhead > $freemegs megs).\n";
      `logger -t metalallocator "$$ - $candidatemetal excluded by memory ($mem + $vmoverhead > $freemegs megs.)"`;
      next;
   }
    if ($requestedVIG || $power) {
        if ($groups{$candidatemetal} !~ /\b$metalvig\b/) {
          if ($metalos ne "centos6.4") { #<-- hack so that el6 overrides vigs
            print STDERR "Allocator: $candidatemetal excluded by group (required $metalvig).\n";
            `logger -t metalallocator "$$ - $candidatemetal excluded by group (required $metalvig)."`;
            next;
          }
        }
    }
   if ($requestedOS || $power) {
      if ($metalos gt $os{$candidatemetal}) {
         print STDERR "Allocator: $candidatemetal excluded by OS ($metalos gt $os{$candidatemetal}).\n";
         `logger -t metalallocator "$$ - $candidatemetal excluded by OS ($metalos gt $os{$candidatemetal})."`;
         next;
      }
   }
#print STDERR "$candidatemetal: $mem <=> $freemegs.\n";
   push(@candidatesbyload,$candidatemetal);
}

if (scalar @candidatesbyload == 0) {
   print STDERR "No machines can fit $mem MiB\n";
   `logger -t metalallocator "$$ - No machines can fit $mem MiB"`;
   exit(1);
}


my @candidatesbyname;
metal:
foreach my $candidatemetal (@candidatesbyload) {
   foreach my $vm (@{$data->{$candidatemetal}->{domains}}) {
      my ($ch,$cv,$ce,$cl)=parsehostname($vm);
      $ch=~s/[0-9]/_/g;
      my $hh=$hostname;
      $hh=~s/[0-9]/_/g;
      if ($ch eq $hh and $cv eq $vertical and $ce eq $env and $cl eq $loc) {
         print STDERR "Allocator: $candidatemetal excluded by similar VM ($vm).\n";
         `logger -t metalallocator "$$ - $candidatemetal excluded by similar VM ($vm}->{name})."`;
         next metal;
      }
    }
    push(@candidatesbyname,$candidatemetal);
}
if (scalar @candidatesbyname == 0) {
   print STDERR "Warning: ran out of eligible machines.  Allocating on machine with similar VM.\n";
   `logger -t metalallocator "$$ - Warning: ran out of eligible machines.  Allocating on machine with similar VM."`;
   print $candidatesbyload[0],"\n";
   exit(0);
}
print $candidatesbyname[0],"\n";

