#!/bin/bash

# gstaples @ Gorilla Nation

# maximums
maxmemg=81
maxcpus=24
maxdisk=50


# defaults
Denv=dev
Dvertical=tp
Dbusunit=TechPlatform
Dloc=lax
Dintlb=auto
Dcpus=1
Dmem=1
Ddisk=10
Dos=centos6.5
Darch=x86_64
Dvlan=1
Dfirewall=0
env=$Denv
busunit=$Dbusunit
loc=$Dloc
intlb=$Dintlb
cpus=$Dcpus
mem=$Dmem
disk=$Ddisk
os=$Dos
arch=$Darch
vlan=$Dvlan
firewall=$Dfirewall

usage() {
cat<<-__EOF__
	Usage: $0 hostname -e env -b busunit -l location -L intlb
	       -c cpus -m mem -d disk -o os -a arch
               [--dnsonly] (just requesting an IP and DNS entry)
               [--firewall] (requesting VIP IP that will be
                             reachable from the firewall)
	       hostname: no dots!
	       env: dev, stg, or prd (default: $Denv)
	       busunit: valid busunits listed below
	                (default: $Dbusunit)
	       location: lax (default: $Dloc)
	       intlb: Internally load balanced  yes|no 
                      (default: no)
                      (note: if hostname starts with "sql"
                             or "vip-sql", default is 'yes' )
	       cpus: integer, 1 to $maxcpus (default: $Dcpus)
	       mem: integer, GiB, max $maxmemg (default: $Dmem)
	       disk: integer, GiB, 4 to $maxdisk (default: $Ddisk)
	       os: centos (default: $Dos)
	       arch: x86_64 (default: $Darch)
__EOF__
echo "Valid Business Units: ";
cat /usr/local/etc/businessunits | column

exit 1
}

if [ -n "$SUDO_USER" ];then
  log_user="$SUDO_USER (sudo)"
else
  log_user=$USER
fi
logger -t vmcreate "$0 $@ by $log_user"


case "$1" in
  -*) echo "Must start with hostname" 1>&2; usage;;
  *) hostname=$1; shift;;
esac


while [ $# -gt 0 ];do
   case $1 in
      --dnsonly) dnsonly=yes; shift;;
      --firewall) firewall=yes; shift;;
      -l) loc=$2; shift; shift;;
      -e) env=$2; shift; shift;;
      -b) busunit=$2; shift; shift;;
      -L) intlb=$2; shift; shift;;
      -c) cpus=$2; shift; shift;;
      -m) mem=$2; shift; shift;;
      -d) disk=$2; shift; shift;;
      -o) os=$2; shift; shift;;
      -a) arch=$2; shift; shift;;
      -h|--help) usage;;
      *) echo "Unknown option: $1"; usage;;
   esac
done
test -z "$hostname" && echo "Missing hostname" && usage

if [ 0 == $(id -u) ];then
   echo "Not as root"
   exit 1
fi


######################
## Argument validation
## TODO: hostname format enforcement?
case $hostname in
   *.*) echo "Error: NO DOTS in hostnames!"; usage;;
   *-*) type=${hostname#*-};
        role=$(echo $hostname | sed -e 's/-.*//' -e 's/[[:digit:]].*//');;
   *) echo "Hostname needs a type (characters on either side of a dash)" 1>&2; usage;;
esac
case $loc in
   lax) loc=lax; CFSite=LAX;;
   *) echo "Error: Unknown loc"; usage;;
esac
case $intlb in
   no|0) vlan=1;;
   yes|1) vlan=2;;
   auto) echo $hostname | grep -q ^sql && vlan=2;
         echo $hostname | grep -q ^vip-sql && vlan=2;;
   *) echo "Error: intlb is yes or no"; usage;;
esac
case $vlan in
   1) intlb=no;;
   2) intlb=yes;;
esac
case $env in
   p*) env=prd; vlan=${vlan}0; rtstatus=production;;
   s*) env=stg; vlan=${vlan}1; rtstatus=staging;;
   d*) env=dev; vlan=${vlan}2; rtstatus=development;;
   *) echo "Error: Unknown environment"; usage;;
esac
case $busunit in
   CraveOnline)    vertical=ao;;
   CrowdIgnite)    vertical=ci;;
   GameRevolution) vertical=ao;;
   HFBoards)       vertical=ao;;
   PebbleBed)      vertical=ao;;
   TeenCrunch)     vertical=ao;;
   TheFashionSpot) vertical=ao;;
   Sherdog)        vertical=ao;;
   AdPlatform)     vertical=ap;;
   SBVideo)        vertical=sbv;;
   DoubleHelix)    vertical=si;;
   TechPlatform)   vertical=tp;;
   Origin)         vertical=og;;
   Momtastic)      echo "No VMs are assigned to this business unit"; usage;;
   Spare)          echo "No VMs are assigned to this business unit"; usage;;
   *) echo "Error: Unknown business unit: $busunit"; usage;;
esac
case $vertical in
   tp)  vlan=${vlan}20; rtvertical=TechPlatform;;
   si)  vlan=${vlan}26; rtvertical=Sales_Integration;;
   sbv) vlan=${vlan}28; rtvertical=Springboard_Video;;
   ap)  vlan=${vlan}30; rtvertical=AdPlatform;;
   ao)  vlan=${vlan}34; rtvertical=Atomic_Online;;
   ci)  vlan=${vlan}34; rtvertical=Crowd_Ignite;;
   og)  vlan=${vlan}36; rtvertical=Origin;;
   *) echo "Error: Unknown vertical: $vertical"; usage;;
esac
if [ $cpus -lt 1 -o $cpus -gt $maxcpus ];then
   echo "Error: Cpus out of range"; usage
fi
if [ $mem -gt $maxmemg ];then
   echo "Error: Memory out of range"; usage
fi
mem=$((mem*1024))
if [ $disk -lt 4 -o $disk -gt $maxdisk ];then
   echo "Error: Disk out of range"; usage
fi

os=$(echo $os | tr '[A-Z]' '[a-z]')
case $os in
   centos*) CFOS=CentOS
            CFOSVersion=${os:=centos};;
   *) echo "Error: Unknown OS: $os"; usage;;
esac
case $arch in
   x86_64|X86_64|x64) arch=x86_64;;
   *) echo "Error: Unknown arch"; usage;;
esac

case $firewall in
    1|yes) vlan=8;;
esac


case $vertical in
   tp) HomeMount=mounted
     ;;
    *)
       case $vlan in
          10*|11*) HomeMount=transitional;;
               *) HomeMount=mounted;;
       esac
     ;;
esac

continue() {
   read -p "${1:-Continue?} [Y/n] " reply
   if test -z "$reply" -o "${reply:0:1}" = Y -o "${reply:0:1}" = y ; then
      return 0
   else
      return 1
   fi
}


######################
## Resource Allocation
fqdn="$hostname.$vertical.$env.$loc.gnmedia.net"
echo "FQDN: $fqdn"

if nodels $fqdn >/dev/null 2>&1 ;then
   echo "Error: $fqdn already defined in xCAT"
   exit 1
fi
echo "VLAN: $vlan"
echo "Internally Load Balanced: $intlb"
echo "HomeMount: $HomeMount"

case $((RANDOM%2+1)) in
  1) x=a; X=A;;  # sigh, this is silly
  2) x=b; X=B;;
esac
#echo "Forcing nfs1 for VM image store"; X=1

# if VIP, just create the DNS entry and exit
case $fqdn in
   vip*) dnsonly=yes;;
esac
if [ "$dnsonly" == "yes" ];then
       newip=$(ipreserve vlan$vlan $fqdn)
       if test -z "$newip" ;then
          echo "Error: Failed to get an IP in network vlan$vlan"
          exit 1
       fi
       echo "IP: $newip"
       if ! continue "Create DNS entry?";then
          iprelease $fqdn
          exit 0
       fi
       dnsnewentry --commit $fqdn $newip
       echo 
       read -p "Run dnspush? [Y/n] " reply
       case $reply in
          n*|N*) echo "Do not forget to run dnspush yourself!";;
          *) dnspush ;;
       esac
       exit
fi
       

store="nfs://nfs${X}-netapp1.gnmedia.net/vol/nac1${x}_vm_images/"

echo "Store: $store"


metal=$(metalallocator -m $mem -c $cpus $fqdn)
if test -z "$metal" ;then
   echo "Error: Failed to get a baremetal host in $loc"
   exit 1
fi  
echo "BM Host: $metal"

echo "Disk Store: $store"
echo "Vertical: $rtvertical"
echo "Business Unit: $busunit"
echo "RT Status: $rtstatus"
echo "OS: $CFOS-$CFOSVersion"


###################
## Do the real work

echo
if ! continue "Create this VM?" ;then
   exit 0
fi

# rt create -t asset set Name=testvm.lax2.gnmedia.net Status=development Type=Servers Description='xCAT Virtual Machine' CF-Vertical=TechPlatform CF-CPU=1 CF-Memory=1024 CF-Manufacturer=Xen CF-OS=CentOS CF-OSVersion=5.3 CF-Site=LAX CF-Silo=lax3 CF-ServerStatus=inservice CF-BusinessUnit=TechPlatform
if rt list -l  -t asset  "Name = '$fqdn'" | grep -q "No matching results." ;then
   echo "Host not in RT, adding..."
   set -x
   rt create -t asset set Name=$fqdn Status=$rtstatus Type=Servers Description="xCAT Virtual Machine for $rtvertical" CF-Vertical=$rtvertical CF-CPU=$cpus CF-Memory=$mem CF-Manufacturer=KVM CF-Model=KVMGuest CF-OS=$CFOS CF-OSVersion=$CFOSVersion CF-Site=$CFSite CF-Silo=$lax CF-ServerStatus=inservice CF-BusinessUnit=$busunit CF-HomeMount=$HomeMount
   set +x
else
   if ! continue "** Warning: $fqdn already exists in inventory. Update inventory?" ;then
      echo "** Continuing without updating inventory... it's up to YOU to make sure it is correct!!"
   else
      rt list -i -t asset  "Name = '$fqdn'" | rt edit - set Name=$fqdn Status=$rtstatus Description="xCAT Virtual Machine for $rtvertical" CF-Vertical=$rtvertical CF-CPU=$cpus CF-Memory=$mem CF-Manufacturer=KVM CF-Model=KVMGuest CF-OS=$CFOS CF-OSVersion=$CFOSVersion CF-Site=$CFSite CF-Silo=$lax CF-ServerStatus=inservice CF-BusinessUnit=$busunit CF-HomeMount=$HomeMount
   fi
fi


echo
echo "Adding node now..."

set -x
nodeadd $fqdn groups=all,$loc,vm,kvm,$env,$vertical,$role,$(echo $type | sed 's/-/,/g'),$busunit,vlan$vlan hosts.ip=auto-vlan$vlan \
     nodetype.os=$os nodetype.arch=$arch nodetype.profile=vm \
     vm.host=$metal vm.memory=$mem vm.cpus=$cpus vm.nics=br$vlan \
     vm.nicmodel=virtio vm.storage=$store
newip=$(nodels $fqdn hosts.ip | awk '{print $2}')
if test -z "$newip" ;then
   echo "Error: Failed to get an IP in network vlan$vlan"
   exit 1
fi
dnsnewentry --commit $fqdn $newip
mkvm $fqdn -s $disk
makehosts $fqdn
makeconservercf $fqdn
rpower $fqdn on
makedhcp $fqdn

#if [ $env != "dev" -a $vertical != "tp" ];then
   #aceman rserver $fqdn add
#fi
set +x
nodeset $fqdn install
rpower $fqdn off
[ -z "$NOAUTOPUPPET" ] && autopuppet $fqdn && rpower $fqdn on
echo 

read -p "Run dnspush? [Y/n] " reply
case $reply in
   n*|N*) echo "Run the following command when you are ready:"
      echo "  dnspush"
      ;;
   *) dnspush
      echo "Congratulations! $fqdn will be done in about 10 minutes."
      ;;
esac

