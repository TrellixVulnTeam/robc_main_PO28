#!/bin/bash

# gstaples @ Gorilla Nation

# Build a default manifest. Volume names are documented at 
# http://docs.gnmedia.net/wiki/Network_Attached_Storage#Volume_Names

puppetgiturl=git@git.gnmedia.net:

#test=echo
case $1 in
   *.gnmedia.net) fqdn=$1; shift;;
esac
if [ -z "$fqdn" ];then
   echo "Usage: $0 fqdn" 1>&2
   exit 1
fi
#app4v-hfb.ao.dev.lax.gnmedia.net
hostname=${fqdn%.gnmedia.net}
volhostname=${hostname//./_}
volhostname=${volhostname//-/_}
ip=$(getent hosts $fqdn | awk '{print $1}')

host=$(IFS=.; set -- $fqdn; echo $1)
vert=$(IFS=.; set -- $fqdn; echo $2)
env=$(IFS=.; set -- $fqdn; echo $3)
loc=$(IFS=.; set -- $fqdn; echo $4)

h1=$(IFS=-; set -- $host; echo $1);
type=$(IFS=-; set -- $host; echo $2);
role=$(echo "$h1" | sed 's/[[:digit:]].*//')
incr=$(echo "$h1" | sed 's/.*\([[:digit:]]\).*/\1/')


#echo "$host ($role $incr) $vert $env $loc gnmedia.net"

if [ -z "$role" ];then
   echo "hostname lacks a role." 1>&2
   exit 1
fi

case $((incr%2)) in
   0) iX=2;;
   1) iX=1;;
esac
case $vert in
   tp)  X=1;;
   si)  X=1;;
   sbv) X=2;;
   ap)  X=2;;
   ao)  X=2;;
   ci)  X=1;;
   *) X=1;;
esac


: ${PAGER:=less}
: ${EDITOR:=vim}

tmpdir=/tmp/autopuppet.$$.$RANDOM
manifest=$tmpdir/puppet-manifests/nodes/$vert/$fqdn.pp
if nodels $fqdn groups 2>/dev/null | grep -q PebbleBed;then
   # special-case for pebblebed
   manifest=$tmpdir/puppet-manifests/nodes/$vert/pebblebed/$fqdn.pp
fi
echo Using $manifest...
sleep 1
rm -rf $tmpdir
mkdir  $tmpdir
cd $tmpdir
if [ $(id -u) != 0 ];then
   git clone $puppetgiturl/puppet-manifests
   cd puppet-manifests/nodes || exit 1
   if [ ! -d $vert ];then
      mkdir -p $vert
      git config user.name `whoami`
      git commit -a -m "New xworld-style vertical ($vert) directory"
      git push
   fi
   if [ -f $manifest ];then
     read -p "** This VM already has a manifest. Write a new one? [N/y]" reply
     case $reply in
        Y|y*) echo "Continuing...";;
        *) echo "Running autovolume..."; autovolume $manifest; exit 0;;
     esac
     mv $manifest $manifest-orig
   fi
fi


#############################################
# Find out which mounts we want.
#
## SQL
if [ "$role" == "sql" ];then
   sqlmounts=yes
   read -p "This appears to be a SQL server. Do you want the standard /sql mounts? [Y/n] " reply;
else
   sqlmounts=no
   read -p "Do you want the standard /sql mounts? [N/y] " reply;
fi
case $reply in
  Y|y*) sqlmounts=yes;;
  N|n*) sqlmounts=no;;
esac

## APP
if [ "$role" == "app" ];then
   appmounts=yes
   read -p "This appears to be an APP server. Do you want the standard /app mounts? [Y/n] " reply;
else
   appmounts=no
   read -p "Do you want the standard /app mounts? [N/y] " reply;
fi
case $reply in
  Y|y*) appmounts=yes;;
  N|n*) appmounts=no;;
esac
if [ "$appmounts" == "yes" ];then
   ugcmount=no
   read -p "Do you want the standard UGC mount? [N/y] " reply;
fi
case $reply in
  Y|y*) ugcmount=yes;;
  N|n*) ugcmount=no;;
esac
if [ -z "$type" ];then
   echo "This hostname lacks a type... refusing to allow /app mounts"
   appmounts=no
   ugcmount=no
fi

## PXY
if [ "$role" == "pxy" ];then
   pxymounts=yes
   read -p "This appears to be a PXY server. Do you want the standard /pxy mounts? [Y/n] " reply;
else
   pxymounts=no
   read -p "Do you want the standard /pxy mounts? [N/y] " reply;
fi
case $reply in
  Y|y*) pxymounts=yes;;
  N|n*) pxymounts=no;;
esac

## MEM
if [ "$role" == "mem" ];then
   meminstall=yes
   read -p "This appears to be a MEM server. Do you want to install memcache? [Y/n] " reply;
else
   meminstall=no
   read -p "Do you want to install memcache? [N/y] " reply;
fi
case $reply in
   Y|y*) meminstall=yes;;
   N|n*) meminstall=no;;
esac

case $vert in
   tp)  project=admin;;  
   si)  case $type in
            dh) project=doublehelix;;
            *)  project=$type;;
        esac;;
   sbv) project=springboard;;
   ap)  project=adops;;
   ao)  case $type in
           mal) project=mal;;
           vb)  project=vb;;
           gr)  project=springboard;;
           *)   project=atomiconline;;
        esac;;
   og)  project=origin;;
   *)   project=unknown;;
esac
read -p "What is this host's project? [$project] " reply;
if [ -n "$reply" ];then
   project=$reply
fi
   

newstyle=yes


echo
echo "SQL: $sqlmounts, APP: $appmounts (UGC: $ugcmount), PXY: $pxymounts  Project: $project MEM: $meminstall"
read -p "Continue? [Y/n] " reply
case $reply in
   N|n*) echo "Exiting."; exit 1;;
esac



echomount() {
cat <<-__EOF__

	    common::nfsmount { "$2":
	        device  => "$1",
	    }
__EOF__
}


if [ "$sqlmounts" == yes ];then
   exec 3>&1
   mypuppetstring=$(/usr/local/bin/automycnf $fqdn)
fi


#############################################
# Build the new manifest
#
echo "node '$fqdn' {" > $manifest
echo "    include base" >> $manifest
echo "    \$project=\"$project\"" >> $manifest
if [ "$sqlmounts" == yes ];then
   echo "    $mypuppetstring" >> $manifest
fi
if [ "$meminstall" == yes ];then
    echo "    include memcached" >> $manifest
fi
if [ "$appmounts" == yes ];then
    echo "    include common::app" >> $manifest
fi

if [ "$sqlmounts" == yes ];then
    echomount nfs$iX.netapp3.gnmedia.net:/vol/nfs${iX}_${volhostname}_data /sql/data >> $manifest
    echomount nfs$iX.netapp3.gnmedia.net:/vol/nfs${iX}_${volhostname}_binlog /sql/binlog >> $manifest
    echomount nfs$iX.netapp3.gnmedia.net:/vol/nfs${iX}_${vert}_${loc}_${env}_sql_log/$fqdn /sql/log >> $manifest
fi
if [ "$appmounts" == yes ];then
    echomount nfs$X.netapp3.gnmedia.net:/vol/nfs${X}_${vert}_${loc}_${env}_${role}_shared/${type}-shared /app/shared >> $manifest
    echomount nfs$iX.netapp3.gnmedia.net:/vol/nfs${iX}_${vert}_${loc}_${env}_app_log/$fqdn /app/log >> $manifest
fi
if [ "$ugcmount" == yes ];then
    echomount nfs$X.netapp3.gnmedia.net:/vol/nfs${X}_${vert}_${loc}_${env}_${role}_ugc/${type}-ugc /app/ugc >> $manifest
fi
if [ "$pxymounts" == yes ];then
    echomount nfs$iX.netapp3.gnmedia.net:/vol/nfs${iX}_${vert}_${loc}_${env}_pxy_log/$fqdn /pxy/log >> $manifest
fi
echo "}" >> $manifest

if [ "$newstyle" == yes ];then
    manifestmigrate $manifest
fi

#############################################
# Edit the new manifest
#
commitmanifest() {
   fqdn=$1
   $test git add $manifest 2>/dev/null
   $test git config user.name `whoami`
   $test git commit -m "Initial manifest for $fqdn" $manifest
   $test git pull --rebase
   $test git push
}
swapfiles() {
   fqdn=$1
   if test -f $manifest-new ;then
      mv -f $manifest $manifest-orig
      mv -f $manifest-new $manifest
   else
      mv -f $manifest $manifest-new
      mv -f $manifest-orig $manifest
   fi
}
showdiff() {
   fqdn=$1
   if test -f $manifest-new ;then
      diff -u $manifest $manifest-new
   else
      diff -u $manifest-orig $manifest
   fi
}

$PAGER $manifest
echo
echo "New manifest created."
test -f "$manifest-orig" && echo "** Original manifest exists!"
reply=u
while [ $reply != done ];do
   test -f "$manifest-new" && echo "* Currently working with original manifest"
   test -f "$manifest-orig" && echo "* Currently working with new manifest"
   read -p "[C]ommit, [D]iff, [E]dit, [S]wap manifests, or [I]gnore it? " reply
   case $reply in
     c|C) commitmanifest $fqdn; reply=done;;
     s|S) swapfiles $fqdn;;
     e|E) $EDITOR $manifest;;
     d|D) showdiff $fqdn;;
     i|I) reply=done; cd; rm -rf $tmpdir; exit 0;;
     *) reply=u;;
   esac
done

autovolume $manifest
