#!/usr/bin/perl

use strict;
$ENV{"XCATROOT"}="/opt/xcat";
$ENV{"PATH"}=$ENV{"XCATROOT"}."/bin:".$ENV{"XCATROOT"}."/sbin:".$ENV{"PATH"};


my %aggrdata=();
my %lifdata=();
my %voldata=();
my %pshdata=();
my %volsize=();

use Data::Dumper;

$aggrdata{"netapp1-01"}="netapp1_01_aggr1";
$aggrdata{"netapp1-02"}="netapp1_02_aggr1";       # nodename->aggr
$aggrdata{"netapp1-03"}="netapp1_03_aggr1";       # nodename->aggr
$aggrdata{"netapp1-04"}="netapp1_04_aggr1";       # nodename->aggr

open(RNETAPP,"rnetapp netapp1_nfs lif list -q|") or die;
while (<RNETAPP>) {
    my (@parts)=split;
    $lifdata{$parts[0]} = [$parts[1], $parts[3], $parts[2]]; # lifname->[ipaddr,nodename]
}
close(RNETAPP);
#print Dumper(\%lifdata);

open(RNETAPP,"rnetapp netapp1_nfs vol list -q -n|") or die;
while (<RNETAPP>) {
    my (@parts)=split;
    $voldata{$parts[0]} = $parts[2];             # volname->aggr
    $volsize{$parts[0]} = $parts[3];             # volname->size
}
close(RNETAPP);
#print Dumper(\%lifdata);

open(PSH,"psh vm grep addr /etc/mtab|") or die;
while (<PSH>) {
    my (@parts)=split;
    $parts[0] =~ s/://;
    $parts[1] =~ s/.*:\/vol\///;
    $parts[1] =~ s/\/.*//;
    $parts[4] =~ s/.*,addr=//;
    $parts[4] =~ s/,.*//;
    push(@{$pshdata{$parts[0]}}, [$parts[2],$parts[1],$parts[4]]); # hostname->[mntpoint,volname,ipaddr]
}
close(PSH);
#print Dumper(\%pshdata);

my %mountips=();

foreach my $host (sort keys %pshdata) {
    foreach my $mountdata (@{$pshdata{$host}}) {
        my $mountpoint=$mountdata->[0];
        foreach my $lif (sort keys %lifdata) {
            if ($mountdata->[2] eq $lifdata{$lif}[0]) {
                # host is mounting from an IP we care about
                my $ipaddr=$mountdata->[2];
                my $nodename=$lifdata{$lif}[1];
                my $volname=$mountdata->[1];
                push(@{$mountips{$volname}}, $ipaddr);
                if (exists $aggrdata{$nodename}) {
                    my $aggr=$aggrdata{$nodename};
                    if (exists $voldata{$volname}) {
                        if ($aggr ne $voldata{$volname}) {
                            print "$host $volname from $ipaddr NOT optimized (try $aggr )!\n";
                            #} else {
                            #print "$host $volname from $ipaddr Optimized!\n";
                        }
                    } else {
                        print STDERR "Wtf?! Volume $volname not in an aggregate?\n";
                    }
                } else {
                    print STDERR "Wtf?! $nodename node does not have an aggregate?\n";
                }
            }
        }
    }
}

print "\n";
foreach my $volname (sort keys %mountips) {
    my %seen;
    @{ $mountips{$volname} } = grep { not $seen{$_} ++ } @{ $mountips{$volname} }; # unique the set
    if (scalar @{ $mountips{$volname} } > 1) {
        print "$volname mounted from multiple IPs: ",join(",",@{ $mountips{$volname} }),"\n";
    }
}
print "\n";
foreach my $lif (sort keys %lifdata) {
    if ( $lifdata{$lif}[1] ne $lifdata{$lif}[2]) {
        print "$lif is not at home (is on ",$lifdata{$lif}[2],", should be ",$lifdata{$lif}[1],")\n";
    }
}

my @groups=();
# $groups[$groupid]{volumes}{vol1}=1
# $groups[$groupid]{ips}{ip1}=1
foreach my $vol (sort keys %mountips) {
    foreach my $ip (sort @{$mountips{$vol}}) {
        my @found=();
        for (my $groupid=0; $groupid<=$#groups; $groupid++) {
            if (exists $groups[$groupid]{volumes}{$vol}) {
                $groups[$groupid]{volumes}{$vol}=1;
                $groups[$groupid]{ips}{$ip}=1;
                push(@found,$groupid);
            }
            if (exists $groups[$groupid]{ips}{$ip}) {
                $groups[$groupid]{volumes}{$vol}=1;
                $groups[$groupid]{ips}{$ip}=1;
                push(@found,$groupid);
            }
        }
        my %seen;
        @found = grep { not $seen{$_} ++ } @found;

        if (scalar @found == 0) {
            # we did not find a group, make a new one
            my $groupid=scalar @groups;
            $groups[$groupid]{volumes}{$vol}=1;
            $groups[$groupid]{ips}{$ip}=1;
        } elsif (scalar @found > 1) {
            # we found more than one group... condense them
            my $keeper=shift @found;
            foreach my $groupid (@found) {
                foreach my $vol (keys %{$groups[$groupid]{volumes}}) {
                    $groups[$keeper]{volumes}{$vol}=1;
                }
                foreach my $ip (keys %{$groups[$groupid]{ips}}) {
                    $groups[$keeper]{ips}{$ip}=1;
                }
            }
            foreach my $groupid (reverse @found) {
                splice(@groups,$groupid,1);
            }
        }
    }
}


print "\n\nGroups...";
for (my $groupid=0; $groupid<=$#groups; $groupid++) {
    print "\nGroup $groupid:\n";
    print "\t";
    foreach my $ip (sort keys %{$groups[$groupid]{ips}}) {
        foreach my $lif (keys %lifdata) {
            if ($lifdata{$lif}[0] eq $ip) { print "$ip($lif/",$lifdata{$lif}[1],") "; }
        }
    }
    print "\n";
    print "\t",join (", ",sort keys %{$groups[$groupid]{volumes}}),"\n";

    my $size=0;
    foreach my $vol (sort keys %{$groups[$groupid]{volumes}}) {
        $size+=$volsize{$vol};
    }
    $size/=1000;
    $size/=1000;
    $size/=1000;
    printf "\t%.2f GB\n", $size;
}

my %sizes=();
foreach my $vol (sort keys %voldata) {
    if ($vol =~ /nac1a.*_tp_/) {
        $sizes{tpA}+=$volsize{$vol};
    } elsif ($vol =~ /nac1b.*_tp_/) {
        $sizes{tpB}+=$volsize{$vol};
    } elsif ($vol =~ /nac1a_home/) {
        $sizes{tpA}+=$volsize{$vol};
    } elsif ($vol =~ /nac1a_vm_images/) {
        $sizes{tpA}+=$volsize{$vol};
    } elsif ($vol =~ /nac1b_vm_images/) {
        $sizes{tpB}+=$volsize{$vol};

    } elsif ($vol =~ /nac1a.*_ao_/) {
        $sizes{aoA}+=$volsize{$vol};
    } elsif ($vol =~ /nac1b.*_ao_/) {
        $sizes{aoB}+=$volsize{$vol};

    } elsif ($vol =~ /nac1a.*_sbv_/) {
        $sizes{sbvA}+=$volsize{$vol};
    } elsif ($vol =~ /nac1b.*_sbv_/) {
        $sizes{sbvB}+=$volsize{$vol};

    } elsif ($vol =~ /nac1a.*_ap_/) {
        $sizes{apA}+=$volsize{$vol};
    } elsif ($vol =~ /nac1b.*_ap_/) {
        $sizes{apB}+=$volsize{$vol};

    } elsif ($vol =~ /nac1a.*_si_/) {
        $sizes{siA}+=$volsize{$vol};
    } elsif ($vol =~ /nac1b.*_si_/) {
        $sizes{siB}+=$volsize{$vol};

    } elsif ($vol =~ /nac1a.*_ci_/) {
        $sizes{ciA}+=$volsize{$vol};
    } elsif ($vol =~ /nac1b.*_ci_/) {
        $sizes{ciB}+=$volsize{$vol};
    } else {
        $sizes{unknown}+=$volsize{$vol};
        print "Unknown $vol\n";
    }

}
map { $sizes{$_} /= 1000 } keys %sizes; # to kilobytes
map { $sizes{$_} /= 1000 } keys %sizes; # to megabytes
map { $sizes{$_} /= 1000 } keys %sizes; # to gigabytes
print "Group sizes...\n";
print Dumper(\%sizes);
