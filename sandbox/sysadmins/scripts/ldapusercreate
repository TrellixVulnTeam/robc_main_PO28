#!/bin/bash

set -o noglob
# ldapadd -W -x -D "uid=gstaples,ou=People,dc=gnmedia,dc=net" -h ldap < user_template.ldif 
# ldapvi -D "uid=gstaples,ou=People,dc=gnmedia,dc=net" -h ldap 
# ldapdelete -D "uid=gstaples,ou=People,dc=gnmedia,dc=net" -W -x -h ldap uid=flast,ou=People,dc=gnmedia,dc=net
# default password is 234bnm6

if test -z "$USER" ;then
  echo "USER not set" 1>&2
  exit 1
fi
usage="Usage: $0 firstname lastname [group]"

case "$1" in
   -*) echo "$usage"; exit 1;;
esac

firstname=$1
lastname=$2
group=$3
if test -z "$lastname" ;then
   echo "$usage"
   exit 1
fi

host=ldap.gnmedia.net
baseuserdn="ou=People,dc=gnmedia,dc=net"
basegroupdn="ou=Groups,dc=gnmedia,dc=net"
binddn="uid=$USER,$baseuserdn"

echo -n "($binddn)'s LDAP password: "
stty -echo
read password
stty echo
echo

ldapargs="-D $binddn -h $host"
openldapargs="-w $password -x $ldapargs"



function initcap {
  a=$1
  a=$(echo $a | tr '[:upper:]' '[:lower:]')
  echo -n "${a:0:1}" | tr '[:lower:]' '[:upper:]'
  echo ${a:1}
}

firstname=$(echo "$firstname" | tr '[:upper:]' '[:lower:]')
lastname=$(echo "$lastname" | tr '[:upper:]' '[:lower:]')
Firstname=$(initcap $firstname)
Lastname=$(initcap $lastname)
flast=${firstname:0:1}$lastname




template="dn: uid=username,ou=People,dc=gnmedia,dc=net
objectClass: top
objectClass: inetorgperson
objectClass: organizationalPerson
objectClass: person
objectClass: posixAccount
objectClass: shadowaccount
objectClass: account
uidNumber: UID
gidNumber: GID
givenName: First
sn: Last
loginShell: /bin/bash
mail: first.last@gorillanation.com
uid: username
cn: First Last
homeDirectory: /home/username
userPassword: {CRYPT}\$1\$QcCGanFr\$2gQKLH2IamLwM2tC7arjz0

dn: cn=username,ou=Groups,dc=gnmedia,dc=net
gidNumber: GID
objectClass: top
objectClass: groupofuniquenames
objectClass: posixgroup"



# Check if the username already exists
existinguser=$(ldapsearch -LLL $openldapargs -b $baseuserdn "(uid=$flast)" dn cn uid )
if [ $? != 0 ];then
   exit 1  # first time we actually try to connect to ldap server
fi
if test -n "$existinguser" ;then
   echo "User $flast is already in use..."
   echo "$existinguser"
   username=""
   while [ -z "$username" ];do
     read -p "Enter a new username: " username
   done
else
   username=$flast
fi


# Figure out new uid/gid
# nextuid is greater than all currently used uids, however we wish to restrict to the 10000 range.
nextuid=$(ldapsearch $openldapargs -b $baseuserdn '(&(uidNumber>=10000)(uidNumber<=19999))' uidNumber | grep ^uidNumber | awk '{print $2}' | sort -n | tail -1)
nextuid=$((nextuid+1))
# see if we can get gid that matches the uid
gidtaken=$(ldapsearch -LLL $openldapargs -b $basegroupdn "(gidNumber=$nextuid)" dn cn)
if [ -z "$gidtaken" ];then
   # the gid is available, use it
   nextgid=$nextuid
else
   # the gid is not available, get the next one, however we wish to restrict to the 10000 range to try to be consistent with uidNumber
   nextgid=$(ldapsearch $openldapargs -b $baseuserdn '(&(gidNumber>=10000)(gidNumber<=19999))' gidNumber | grep ^gidNumber | awk '{print $2}' | sort -n | tail -1)
   nextgid=$((nextgid+1))
   nextuid=$nextgid
fi

read -p "Create $Firstname $Lastname ($username) ($nextuid:$nextgid)? [y/N] " prompt
case $prompt in
  y) :;;
  *) echo "Cancelled."; exit;;
esac


# Passed all pre-flight checks... we are go for create...
echo "Creating account for $Firstname $Lastname ($username) ($nextuid:$nextgid)"
echo
echo "$template" | sed \
                      -e s/username/$username/ \
                      -e s/UID/$nextuid/ \
                      -e s/GID/$nextgid/ \
                      -e s/First/$Firstname/ \
                      -e s/Last/$Lastname/ \
                      -e s/first/$firstname/ \
                      -e s/last/$lastname/ | \
                    ldapadd $openldapargs

if [ -n "$group" ];then
   echo -e "dn: cn=$group,$basegroupdn\nchangetype: modify\nadd: memberUid\nmemberUid: $username" | ldapmodify $openldapargs
   echo -e "dn: cn=$group,$basegroupdn\nchangetype: modify\nadd: uniqueMember\nuniqueMember: uid=$username,$baseuserdn" | ldapmodify $openldapargs

fi

