#!/usr/bin/perl

# gstaples @ Gorilla Nation

$ENV{PATH}="/bin:/usr/sbin:/usr/bin:/opt/xcat/bin";
$ENV{XCATROOT}="/opt/xcat";
$ENV{HOME}="/root";

if (defined $ARGV[0] and $ARGV[0] eq "-v") {
   $ENV{VERBOSE}=1;
}

use strict;
use Sys::Virt;
use JSON;
use IO::Socket;
use Data::Dumper;

#my $Nodes=`nodels metal | xargs  echo`;
my $Nodes=`nodels metal | xargs  echo`;
chomp($Nodes);
my @nodes=(split(/ /,$Nodes));

open(BUSUNITS,"/usr/local/etc/businessunits") or die;
my  @BUs=(<BUSUNITS>);
chomp(@BUs);
close(BUSUNITS);


my %machine_bu;
foreach my $bu (@BUs) {
	foreach my $machine (split(/\s+/, `nodels vm\@$bu 2>/dev/null`)) {
		$machine_bu{$machine} = $bu;
	}
}

my %vmm;
foreach my $node (@nodes) {
   print STDERR "virt connect to $node\n" if ($ENV{VERBOSE});
eval {
   $vmm{$node} = Sys::Virt->new( uri => 'qemu+ssh://root@'.$node.'/system?no_tty=1' ) or print STDERR "$node: $! ";
}
}

my %data;
foreach my $node (@nodes) {
   next unless $node;
   next unless $vmm{$node};
   my $info = $vmm{$node}->get_node_info();
   my @domains = $vmm{$node}->list_domains();
   $data{$node}{cpus}=$info->{cpus};
   $data{$node}{name}=$node;
   #$data{$node}{memory}=$info->{memory};

   print STDERR "tcp connect to $node\n" if ($ENV{VERBOSE});
   my $socket;
   eval {
    local $SIG{ALRM} = sub { die "$node connect timeout"; };
      alarm(2);
      $socket = IO::Socket::INET->new
          (PeerAddr=>$node,
          PeerPort=>1456,
          Proto=>'tcp',
          Type=>SOCK_STREAM);
      alarm(0);
   };

   if (!$socket) {
      alarm(0);
      next;
   }
   my $line;
   eval {
    local $SIG{ALRM} = sub { print STDERR "$node read timeout"; close($socket); };
      alarm(2);
   $line=(<$socket>);
   alarm(0);
   };
   chomp($line);
   foreach my $elem (split(/ /,$line)) {
      my ($n,$v)=split(/:/,$elem);
      $data{$node}{$n}=$v;
   }
   eval {
    local $SIG{ALRM} = sub { print STDERR "$node close timeout"; };
      alarm(2);
   close($socket);
   alarm(0);
   };


   foreach my $dom (@domains) {
      my $dominfo = $dom->get_info();
      $data{$node}{domains}{$dom->get_id}{maxMem} = $dominfo->{maxMem};
      $data{$node}{domains}{$dom->get_id}{name}=$dom->get_name;
      if (exists $machine_bu{$dom->get_name}) {
         $data{$node}{domains}{$dom->get_id}{businessUnit} = $machine_bu{$dom->get_name};
      } else {
         # special case since xcat doesn't know about itself
         if ($dom->get_name =~ m/xcat/) {
            $data{$node}{domains}{$dom->get_id}{businessUnit} = "TechPlatform";
         }
      }
      #$data{$node}{domains}{$dom->get_id}{maxMem}=$dominfo->{maxMem};
      #$data{$node}{domains}{$dom->get_id}{memory}=$dominfo->{memory};
      $data{$node}{domains}{$dom->get_id}{cpus}=$dominfo->{nrVirtCpu};
      print STDERR "tcp connect to ",$dom->get_name,"\n" if ($ENV{VERBOSE});
      my $socket;
      eval {
         local $SIG{ALRM} = sub { die $dom->get_name." connect timeout"; };
         alarm(2);
         $socket = IO::Socket::INET->new
            (PeerAddr=>$dom->get_name,
            PeerPort=>1456,
            Proto=>'tcp',
            Type=>SOCK_STREAM);
      alarm(0);
      };
      if ($socket) {
      my $line;
      eval {
         local $SIG{ALRM} = sub { die $dom->get_name." read timeout"; };
         alarm(2);
         $line=(<$socket>);
         alarm(0);
         };
         chomp($line);
         foreach my $elem (split(/ /,$line)) {
            my ($n,$v)=split(/:/,$elem);
            $data{$node}{domains}{$dom->get_id}{$n}=$v;
         }
         close($socket);
         $data{$node}{domains}{$dom->get_id}{loadavg}+=0;
         $data{$node}{domains}{$dom->get_id}{memtotal}+=0;
         $data{$node}{domains}{$dom->get_id}{memfree}+=0;
         $data{$node}{domains}{$dom->get_id}{memused}=$data{$node}{domains}{$dom->get_id}{memtotal}-$data{$node}{domains}{$dom->get_id}{memfree};
         $data{$node}{memused}+=$data{$node}{domains}{$dom->get_id}{memtotal};
      }
      $data{$node}{memtotal}+=0;
      $data{$node}{loadavg}+=0;
      #$data{$node}{memfree}=$data{$node}{memtotal}-$data{$node}{memused};

      #print "Domain ", $dom->get_id, " ", $dom->get_name, "\n";
   }
}

#open(O,"psh metal\@online 'echo \$(grep ^HugePages /proc/meminfo|xargs echo) \$(cat /proc/loadavg)' |");
#while (my $foo=<O>) {
  #chomp($foo);
  #my (@foo) = split(/ /,$foo);
  #$foo[0]=~s/:$//;
  #next unless $foo[0];
  #$data{$foo[0]}{HugePages_Total}=$foo[2];
  #$data{$foo[0]}{HugePages_Free}=$foo[4];
  #$data{$foo[0]}{loadavg}=$foo[7];
#}
#close(O);

my $json = new JSON;

#my $json_text   = $json->encode(\%data);
my $json_text   = $json->pretty->encode(\%data);
print $json_text;

