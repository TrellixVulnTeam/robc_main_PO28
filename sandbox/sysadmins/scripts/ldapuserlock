#!/bin/bash

#set -x

set -o noglob
if test -z "$USER" ;then
  echo "USER not set" 1>&2
  exit 1
fi
usage="Usage: $0 username [-L|-u|-l] (Lock|unlock|list)"
case "$1" in
   -*) echo "$usage"; exit 1;;
esac


username=$1;shift
if test -z "$1" ;then
   echo "$usage"
   exit 1
fi
if [ "$USER" = "$username" ];then
   echo "Refusing to lock your account. Silly monkey."
   exit 1
fi

case "$1" in
   -L) mode=lock;;
   -u) mode=unlock;;
   -l) mode=list;;
   *) echo "$usage"; exit 1;;
esac

host=ldap.gnmedia.net
#host=app1v-ldap.tp.dev.lax.gnmedia.net
baseuserdn="ou=People,dc=gnmedia,dc=net"
basegroupdn="ou=Groups,dc=gnmedia,dc=net"
binddn="uid=$USER,$baseuserdn"

echo -n "($binddn)'s LDAP password: "
stty -echo
read password
stty echo
echo

ldapargs="-D $binddn -h $host"
openldapargs="-w $password -x $ldapargs"

testlist=$(ldapsearch $openldapargs -LLL "(uid=$username)" uid)
if [ $? != 0 ];then
  exit 1
fi
if [ -z "$testlist" ];then
   echo "No such user"
   exit 1
fi

# Get the user object's current lock state and reason - which is useful in all 3 modes below
lockstatus=$(ldapsearch $openldapargs -LLL "(uid=$username)" nsAccountLock | grep ^nsAccountLock | awk -F: '{print $2}')
reason=$(ldapsearch $openldapargs -LLL "(uid=$username)" gnLockReason | grep ^gnLockReason | awk -F: '{print $2}')

shopt -qs nocasematch
if [[ $lockstatus =~ true ]]
   then
        locked=1;              
   else
        locked=0;
fi
shopt -qu nocasematch

# Lets get the Account status
if [ "$mode" = "list" ];then

   if [[ $locked = 1 ]]
        then    
            if [ -n "$reason" ];then
                echo "Account is locked: $reason"
            else
                echo "Account is locked, but no reason is specified."
            fi
   else
      echo "Account is not locked."
   fi
   exit
fi

# Get the password data, and store for later.
userPassword=$(ldapsearch $openldapargs -LLL "(uid=$username)" userPassword | grep ^userPassword)
if [ -n "$userPassword" ];then
   if [[ "$userPassword" =~ "::" ]];then
      oldcrypt=$(set -- $userPassword; echo -n $2 | base64 -d 2>/dev/null)
   else
      oldcrypt=$(set -- $userPassword; echo $2)
   fi
else
   echo "Note: the account does not have userPassword attribute."
fi


ldifheader="dn: uid=$username,$baseuserdn\nchangetype: modify"


# Lets deal with unlocking, if applicable
if [  "$mode" = "unlock" ];then

    if [[ $locked = 0 ]];then
        echo "Account is already unlocked."
        exit 1;
    fi
    
    echo -e "$ldifheader\nreplace: nsAccountlock\nnsAccountLock: FALSE\n-\nreplace: gnLockReason\ngnLockReason: \n" | ldapmodify $openldapargs
    echo "Locks cleared."
    # Un-munch any host entries, if present
    for host in $(ldapsearch $openldapargs -LLL "(uid=$username)" host | grep ^host | awk '{print $2}');do
        echo -e "dn: uid=$username,$baseuserdn\nchangetype: modify\ndelete: host\nhost: $host\n" | ldapmodify $openldapargs
        host=${host/XXX/}
        echo -e "dn: uid=$username,$baseuserdn\nchangetype: modify\nadd: host\nhost: $host\n" | ldapmodify $openldapargs
    done
    #if the password exists and is munched, un-munch it.
    if [ -n "$oldcrypt" ];then
        newcrypt=$(echo "$oldcrypt" | sed 's/\({.*}\)XXXXX/\1/')
        echo -e "$ldifheader\nreplace: userPassword\nuserPassword: $newcrypt\n" | ldapmodify $openldapargs
        echo "Password reverted."
    else
        echo "Password was not present, you will need to set one manually."
    fi    
fi


# Lets deal with locking, if applicable.
if [ "$mode" = "lock" ];then

    if [[ $locked = 1 ]];then
        if [ -n "$reason" ];then
           echo "Account is already locked: $reason"
        else
           echo "Account is already locked, but no reason is specified."
        fi
        exit 1;
    fi

   read -p "Reason for locking account? " reason
   # Add the objectClass required for gnLockReason, and ignore its output in case it is already present.  
   # Can be removed when proper schema implemented.
   echo -e "$ldifheader\nadd: objectClass\nobjectClass: extensibleObject\n" | ldapmodify $openldapargs 2>/dev/null
   # Lock the account, and provide the reason.
   echo -e "$ldifheader\nreplace: nsAccountLock\nnsAccountLock: TRUE\n-\nreplace: gnLockReason\ngnLockReason: $reason" | ldapmodify $openldapargs
   # Munch any host patterns, if present.
   for host in $(ldapsearch $openldapargs -LLL "(uid=$username)" host | grep ^host | awk '{print $2}');do
        echo -e "dn: uid=$username,$baseuserdn\nchangetype: modify\ndelete: host\nhost: $host\n" | ldapmodify $openldapargs
        echo -e "dn: uid=$username,$baseuserdn\nchangetype: modify\nadd: host\nhost: XXX$host\n" | ldapmodify $openldapargs
   done
   # Munch the password, if present.
   if [ -n "$oldcrypt" ];then
        newcrypt=$(echo "$oldcrypt" | sed 's/\({.*}\)/\1XXXXX/')
        echo -e "$ldifheader\nreplace: userPassword\nuserPassword: $newcrypt\n" | ldapmodify $openldapargs
        echo "Account Locked."
   fi

fi

accessconfgen
